{
	"info": {
		"_postman_id": "f7d3d22d-3dff-4b06-bd8c-7c3595121bb0",
		"name": "PLAY_SMART_WITH_THE_BACKEND",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6384621"
	},
	"item": [
		{
			"name": "ECHO_SERVICE",
			"item": [
				{
					"name": "setup & utils",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.get('ENABLE_HELP_MESSAGES') ",
									"    && console.log(`'${pm.info.requestName}' Request Pre-request Script`);",
									"",
									"pm.globals.clear();",
									"",
									"const deepTest = expected => actual => (prefix = 'object') => testFunction => {        ",
									"    ",
									"    if (typeof expected !== 'object' || expected === null){",
									"        testFunction(expected, actual, prefix);",
									"        return;",
									"    }",
									"",
									"    if (Array.isArray(expected)){                     ",
									"        expected.forEach((element, index) => ",
									"            deepTest(expected[index])(actual[index])(`${prefix}[${index}]`)(testFunction)",
									"        );",
									"        return;",
									"    }",
									"",
									"    if (typeof expected === 'object'){          ",
									"        Object.keys(expected).forEach(key => ",
									"            deepTest(expected[key])(actual[key])(`${prefix}.${key}`)(testFunction)",
									"        );            ",
									"        return;",
									"    }",
									"};",
									"",
									"const testFunction = (expected, actual, prefix) =>",
									"    pm.test(`Validate ${prefix}`, () => pm.expect(expected).eql(actual));",
									"",
									"const prettify = json => JSON.stringify(json, null, 2);",
									"",
									"const getHeader = (pm, headerName) => {",
									"    const header = pm.response.headers.find(header => header.key == headerName); ",
									"    return header ? header.value : undefined;",
									"}",
									"",
									"// SAVE FUCTIONALITY FOR REUSE",
									"postman.setGlobalVariable('deepTest', deepTest);",
									"//globals.deepTest = deepTest;  // this does not work",
									"postman.setGlobalVariable('testFunction', testFunction);",
									"postman.setGlobalVariable('prettify', prettify);",
									"postman.setGlobalVariable('getHeader', getHeader);",
									"",
									"/* Usage within other sripts",
									"// i.e.",
									"const expectedUser = { name: \"mark\", age: 50, isAdmin: true };",
									"const actualUser = { name: \"mark\", age: 51, isAdmin: false };",
									"const deepTest = eval(globals.deepTest);",
									"// or const deepTest = eval(postman.getGlobalVariable('deepTest'));",
									"const testFunction = eval(globals.testFunction);",
									"deepTest(expectedUser)(actualUser)('Validate user')(testFunction);",
									"*/",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.get('ENABLE_HELP_MESSAGES') && console.log(`'${pm.info.requestName}' Request Tests`);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "HEAD",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"name\": \"mark\", \n\t\"age\": 51, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n\t\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://www.google.com",
							"protocol": "https",
							"host": [
								"www",
								"google",
								"com"
							]
						}
					},
					"response": []
				},
				{
					"name": "500 Internal Server Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200',",
									"    () => pm.expect(pm.response.code).to.equal(200)",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{POSTMAN_ECHO_URL}}/status/500",
							"host": [
								"{{POSTMAN_ECHO_URL}}"
							],
							"path": [
								"status",
								"500"
							]
						}
					},
					"response": []
				},
				{
					"name": "local IP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200',",
									"    () => pm.response.to.have.status(200)",
									");",
									"",
									"pm.test('Response JSON \"ip\" property matches an IP Regex',",
									"    () => {",
									"        const ip = pm.response.json().ip;",
									"        console.log(`ip: ${ip}`);",
									"",
									"        const ipMatcherRegex = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/;",
									"",
									"        pm.expect(ip).to.match(ipMatcherRegex);",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{POSTMAN_ECHO_URL}}/ip",
							"host": [
								"{{POSTMAN_ECHO_URL}}"
							],
							"path": [
								"ip"
							]
						}
					},
					"response": []
				},
				{
					"name": "JSON body",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const expectedUser = { ",
									"    name: \"Mark Johnson\", ",
									"    age: 50, ",
									"    isAdmin: true, ",
									"    resourceIds: [1111, 1112, 1113] ",
									"    ",
									"}; // wrong age and resourcesIds[1]",
									"",
									"const actualUser = pm.response.json().json;",
									"",
									"// Chai deep equal assertion",
									"pm.test('Validate user', () => pm.expect(expectedUser).to.deep.equal(actualUser));",
									"",
									"// Enhanced verification - one test / value",
									"const deepTest = eval(globals.deepTest);",
									"const testFunction = eval(globals.testFunction);",
									"deepTest(expectedUser)(actualUser)('user')(testFunction);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Mark Johnson\",\n    \"age\": 31,\n    \"isAdmin\": true,\n    \"resourceIds\": [\n        1111,\n        1110,\n        1113\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{POSTMAN_ECHO_URL}}/post",
							"host": [
								"{{POSTMAN_ECHO_URL}}"
							],
							"path": [
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "query string parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const expectedArgs = {",
									"    \"company\": \"nagarro\",",
									"    \"location\": \"timisoara\",",
									"    \"department\": \"qa\"",
									"};",
									"const actualArgs = pm.response.json().args;",
									"",
									"const deepTest = eval(globals.deepTest);",
									"const testFunction = eval(globals.testFunction);",
									"",
									"deepTest(expectedArgs)(actualArgs)('args')(testFunction);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{POSTMAN_ECHO_URL}}/post?company=nagarro&location=timisoara&department=qa",
							"host": [
								"{{POSTMAN_ECHO_URL}}"
							],
							"path": [
								"post"
							],
							"query": [
								{
									"key": "company",
									"value": "nagarro"
								},
								{
									"key": "location",
									"value": "timisoara"
								},
								{
									"key": "department",
									"value": "qa"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "form data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const expectedForm = {",
									"    \"email\": \"danginkgo@yahoo.com\",",
									"    \"username\": \"danrusu\"",
									"};",
									"const actualForm = pm.response.json().form;",
									"",
									"const deepTest = eval(globals.deepTest);",
									"const testFunction = eval(globals.testFunction);",
									"",
									"deepTest(expectedForm)(actualForm)('form')(testFunction);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "danginkgo@yahoo.com",
									"type": "text"
								},
								{
									"key": "username",
									"value": "danrusu",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{POSTMAN_ECHO_URL}}/post",
							"host": [
								"{{POSTMAN_ECHO_URL}}"
							],
							"path": [
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "delay 2s",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const getHeader = eval(globals.getHeader);",
									"const prettify = eval(globals.prettify);",
									"",
									"pm.test('Status code is 200',",
									"    () => pm.response.to.have.statusCode(100)",
									");",
									"",
									"pm.test('Status is OK',",
									"    () => pm.response.to.have.status(\"OK\")",
									");",
									"",
									"pm.test('Response time is above 2000ms',",
									"    () => pm.expect(pm.response.responseTime).to.be.above(2000)",
									");",
									"",
									"pm.test('Response body size is 13 B',",
									"    () => {",
									"        //const bodySize = pm.response.responseSize;",
									"        console.log(`Headers ${prettify(pm.response.headers, null, 2)}`);",
									"        const contentLength = parseInt(getHeader(pm, 'Content-Length'));",
									"        pm.expect(contentLength).to.eql(13);",
									"    }",
									");",
									"",
									"pm.test('Response delay is 2',",
									"    () => pm.expect(pm.response.json().delay).to.eql(\"2\")",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{POSTMAN_ECHO_URL}}/delay/2",
							"host": [
								"{{POSTMAN_ECHO_URL}}"
							],
							"path": [
								"delay",
								"2"
							]
						}
					},
					"response": []
				}
			],
			"description": "https://docs.postman-echo.com/",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('ECHO_SERVICE FOLDER Pre-request Scripts');",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('ECHO_SERVICE Folder Tests');"
						]
					}
				}
			]
		},
		{
			"name": "RESTFUL_BOOKER",
			"item": [
				{
					"name": "health check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.globals.clear();",
									"",
									"pm.test('Status code name is \"Created\"',",
									"    () => pm.expect(pm.response.status).to.equal(\"Created\")",
									");",
									"",
									"pm.test('Response text is \"Created\"',",
									"    () => pm.expect(pm.response.text()).to.equal(\"Created\")",
									");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"type": "text",
								"value": "token=16d2f037531ae80"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{RESTFULL_BOOKER_URL}}/ping",
							"host": [
								"{{RESTFULL_BOOKER_URL}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "create token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Valid token is fetched\", () => {",
									"",
									"    const token = pm.response.json()?.token;        ",
									"    console.log(`token: ${token}`);",
									"",
									"    pm.expect(token).to.be.a('string')",
									"        .and.to.have.lengthOf(15);",
									"",
									"    pm.globals.set(\"token\", token);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}"
						},
						"url": {
							"raw": "{{RESTFULL_BOOKER_URL}}/auth",
							"host": [
								"{{RESTFULL_BOOKER_URL}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "list bookings ids",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{RESTFULL_BOOKER_URL}}/booking",
							"host": [
								"{{RESTFULL_BOOKER_URL}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "create booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const newBookingId = pm.response.json()?.bookingid;",
									"console.log(`New booking id: ${newBookingId}`);",
									"",
									"pm.globals.set('newBookingId', newBookingId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{RESTFULL_BOOKER_URL}}/booking",
							"host": [
								"{{RESTFULL_BOOKER_URL}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "booking by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{RESTFULL_BOOKER_URL}}/booking/{{newBookingId}}",
							"host": [
								"{{RESTFULL_BOOKER_URL}}"
							],
							"path": [
								"booking",
								"{{newBookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update booking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2020-01-01\",\r\n        \"checkout\" : \"2020-01-10\"\r\n    },\r\n    \"additionalneeds\": \"none\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{RESTFULL_BOOKER_URL}}/booking/{{newBookingId}}",
							"host": [
								"{{RESTFULL_BOOKER_URL}}"
							],
							"path": [
								"booking",
								"{{newBookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "partial update booking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"type": "text",
								"value": "token={{token}}"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{RESTFULL_BOOKER_URL}}/booking/{{newBookingId}}",
							"host": [
								"{{RESTFULL_BOOKER_URL}}"
							],
							"path": [
								"booking",
								"{{newBookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete booking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"type": "text",
								"value": "token={{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{RESTFULL_BOOKER_URL}}/booking/{{newBookingId}}",
							"host": [
								"{{RESTFULL_BOOKER_URL}}"
							],
							"path": [
								"booking",
								"{{newBookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "booking does not exist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{RESTFULL_BOOKER_URL}}/booking/{{newBookingId}}",
							"host": [
								"{{RESTFULL_BOOKER_URL}}"
							],
							"path": [
								"booking",
								"{{newBookingId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "https://restful-booker.herokuapp.com/\n\nDOCS: https://restful-booker.herokuapp.com/apidoc/index.html",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Valid status code\", () => {",
							"    console.log(JSON.stringify(pm.info.requestName))",
							"    if (pm.info.requestName === 'booking does not exist') {",
							"        pm.expect(pm.response.code).to.equal(404);",
							"    }",
							"    else {",
							"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"    }",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", () =>",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)",
							");"
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('PLAY_SMART_WITH_THE_BACKEND Collection Pre-request Scripts');",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('PLAY_SMART_WITH_THE_BACKEND Collection Tests');"
				]
			}
		}
	]
}