{
  "collection": {
    "_": {
      "postman_id": "831201cb-16d0-4057-8906-d3b84f38f650"
    },
    "item": [
      {
        "id": "caf14d1a-fa2f-4889-80ec-3b40743b07c8",
        "name": "ECHO_SERVICE",
        "description": {
          "content": "https://docs.postman-echo.com/",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "eb909c52-4a02-4762-94d0-da504ab75d24",
            "name": "setup & utils",
            "request": {
              "url": {
                "protocol": "https",
                "host": [
                  "www",
                  "google",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "HEAD",
              "body": {
                "mode": "raw",
                "raw": "{ \n\t\"name\": \"mark\", \n\t\"age\": 51, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n\t\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                  "type": "text/javascript",
                  "exec": [
                    "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log(`'${pm.info.requestName}' Request Pre-request Script`);",
                    "",
                    "pm.globals.clear();",
                    "",
                    "const deepTest = expected => actual => (prefix = 'object') => testFunction => {        ",
                    "    ",
                    "    if (typeof expected !== 'object' || expected === null){",
                    "        testFunction(expected, actual, prefix);",
                    "        return;",
                    "    }",
                    "",
                    "    if (Array.isArray(expected)){                     ",
                    "        expected.forEach((element, index) => ",
                    "            deepTest(expected[index])(actual[index])(`${prefix}[${index}]`)(testFunction)",
                    "        );",
                    "        return;",
                    "    }",
                    "",
                    "    if (typeof expected === 'object'){          ",
                    "        Object.keys(expected).forEach(key => ",
                    "            deepTest(expected[key])(actual[key])(`${prefix}.${key}`)(testFunction)",
                    "        );            ",
                    "        return;",
                    "    }",
                    "};",
                    "",
                    "const testFunction = (expected, actual, prefix) =>",
                    "    pm.test(`Validate ${prefix}`, () => pm.expect(expected).eql(actual));",
                    "",
                    "const prettify = json => JSON.stringify(json, null, 2);",
                    "",
                    "const getHeader = (pm, headerName) => {",
                    "    const header = pm.response.headers.find(header => header.key == headerName); ",
                    "    return header ? header.value : undefined;",
                    "}",
                    "",
                    "// SAVE FUCTIONALITY FOR REUSE",
                    "postman.setGlobalVariable('deepTest', deepTest);",
                    "//globals.deepTest = deepTest;  // this does not work",
                    "postman.setGlobalVariable('testFunction', testFunction);",
                    "postman.setGlobalVariable('prettify', prettify);",
                    "postman.setGlobalVariable('getHeader', getHeader);",
                    "",
                    "/* Usage within other sripts",
                    "// i.e.",
                    "const expectedUser = { name: \"mark\", age: 50, isAdmin: true };",
                    "const actualUser = { name: \"mark\", age: 51, isAdmin: false };",
                    "const deepTest = eval(globals.deepTest);",
                    "// or const deepTest = eval(postman.getGlobalVariable('deepTest'));",
                    "const testFunction = eval(globals.testFunction);",
                    "deepTest(expectedUser)(actualUser)('Validate user')(testFunction);",
                    "*/",
                    ""
                  ],
                  "_lastExecutionId": "f25e6f36-46a1-4099-9764-a06652372a47"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                  "type": "text/javascript",
                  "exec": [
                    "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log(`'${pm.info.requestName}' Request Tests`);"
                  ],
                  "_lastExecutionId": "2b302092-f511-41a1-84de-afcd77452f28"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          },
          {
            "id": "fa3a44d2-4da1-40dd-ad12-f92f2f166cf5",
            "name": "500 Internal Server Error",
            "request": {
              "url": {
                "path": [
                  "status",
                  "500"
                ],
                "host": [
                  "{{POSTMAN_ECHO_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', ",
                    "    () =>pm.response.to.have.status(200)",
                    ");"
                  ],
                  "_lastExecutionId": "b7e87bec-79da-47d2-9ff9-6e77fe8d6a4b"
                }
              }
            ]
          },
          {
            "id": "10f2d182-a7ab-4436-89e2-299bff346e50",
            "name": "local IP",
            "request": {
              "url": {
                "path": [
                  "ip"
                ],
                "host": [
                  "{{POSTMAN_ECHO_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', ",
                    "    () => pm.response.to.have.status(200)",
                    ");",
                    "",
                    "pm.test('Response JSON \"ip\" property matches an IP Regex',",
                    "    () => {",
                    "        const ip = pm.response.json().ip;",
                    "        console.log(`ip: ${ip}`);",
                    "        ",
                    "        const ipMatcherRegex = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/;",
                    "        ",
                    "        pm.expect(ip).to.match(ipMatcherRegex);",
                    "    }",
                    ");"
                  ],
                  "_lastExecutionId": "176caf6e-1b7c-4f15-8c2a-55b82bedafd2"
                }
              }
            ]
          },
          {
            "id": "f120bbce-4e42-424d-9d46-f3c977f54969",
            "name": "JSON body",
            "request": {
              "url": {
                "path": [
                  "post"
                ],
                "host": [
                  "{{POSTMAN_ECHO_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{ \n\t\"name\": \"Mark Johnson\", \n\t\"age\": 31, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5c0286dd-c9ed-4ac1-87b9-e97974bddd31"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                  "type": "text/javascript",
                  "exec": [
                    "const expectedUser = { ",
                    "    name: \"Mark Johnson\", ",
                    "    age: 50, ",
                    "    isAdmin: true, ",
                    "    resourceIds: [1111, 1112, 1113] ",
                    "    ",
                    "}; // wrong age and resourcesIds[1]",
                    "",
                    "const actualUser = pm.response.json().json;",
                    "",
                    "// Chai deep equal assertion",
                    "pm.test('Validate user (deep equal)', () => pm.expect(expectedUser).to.eql(actualUser));",
                    "",
                    "// Enhanced verification - one test / value",
                    "const deepTest = eval(globals.deepTest);",
                    "const testFunction = eval(globals.testFunction);",
                    "deepTest(expectedUser)(actualUser)('user')(testFunction);",
                    "",
                    "",
                    ""
                  ],
                  "_lastExecutionId": "0744d3a4-d288-4180-821b-4bbc183a3c5d"
                }
              }
            ]
          },
          {
            "id": "fe166fca-9b67-4ba7-a346-4140a37dbff4",
            "name": "query string parameters",
            "request": {
              "url": {
                "protocol": "https",
                "path": [
                  "post"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [
                  {
                    "key": "company",
                    "value": "nagarro"
                  },
                  {
                    "key": "location",
                    "value": "timisoara"
                  },
                  {
                    "key": "department",
                    "value": "qa"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/x-www-form-urlencoded"
                }
              ],
              "method": "POST"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bb2d1149-14fb-48a2-a69a-2821ee927cad"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                  "type": "text/javascript",
                  "exec": [
                    "const expectedArgs = {",
                    "        \"company\": \"nagarro\",",
                    "        \"location\": \"timisoara\",",
                    "        \"department\": \"qa\"",
                    "    };",
                    "const actualArgs = pm.response.json().args;",
                    "",
                    "const deepTest = eval(globals.deepTest);",
                    "const testFunction = eval(globals.testFunction);",
                    "",
                    "deepTest(expectedArgs)(actualArgs)('args')(testFunction);"
                  ],
                  "_lastExecutionId": "9df9aec6-1717-49c5-9f09-cb18cc00d8e7"
                }
              }
            ]
          },
          {
            "id": "21da0627-bf8c-420a-8773-718019c52d6a",
            "name": "form data",
            "request": {
              "url": {
                "path": [
                  "post"
                ],
                "host": [
                  "{{POSTMAN_ECHO_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/x-www-form-urlencoded"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "email",
                    "value": "danginkgo@yahoo.com",
                    "type": "text"
                  },
                  {
                    "key": "username",
                    "value": "danrusu",
                    "type": "text"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ad8ccfae-382e-4b84-b9a2-261cbb9ea113"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                  "type": "text/javascript",
                  "exec": [
                    "const expectedForm = {",
                    "    \"email\": \"danginkgo@yahoo.com\",",
                    "    \"username\": \"danrusu\"",
                    "};",
                    "const actualForm = pm.response.json().form;",
                    "",
                    "const deepTest = eval(globals.deepTest);",
                    "const testFunction = eval(globals.testFunction);",
                    "",
                    "deepTest(expectedForm)(actualForm)('form')(testFunction);"
                  ],
                  "_lastExecutionId": "f3d43edb-3d34-4fd6-8ba6-fc06ce32da14"
                }
              }
            ]
          },
          {
            "id": "6640c4f8-deb4-4fb6-b4dd-3ec97e005511",
            "name": "delay 2s",
            "request": {
              "url": {
                "path": [
                  "delay",
                  "2"
                ],
                "host": [
                  "{{POSTMAN_ECHO_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                  "type": "text/javascript",
                  "exec": [
                    "const getHeader = eval(globals.getHeader);",
                    "const prettify = eval(globals.prettify);",
                    "",
                    "pm.test('Status code is 200', ",
                    "    () =>pm.response.to.have.status(200)",
                    ");",
                    "",
                    "pm.test('Status code name is OK',",
                    "    () => pm.response.to.have.status(\"OK\")",
                    ");",
                    "",
                    "pm.test('Response time is above 2000ms', ",
                    "    () => pm.expect(pm.response.responseTime).to.be.above(2000)",
                    ");",
                    "",
                    "pm.test('Response body size is 13 B',",
                    "    () => {",
                    "        //const bodySize = pm.response.responseSize;",
                    "        console.log(`Headers ${prettify(pm.response.headers, null, 2)}`);",
                    "        const contentLength = parseInt(getHeader(pm, 'Content-Length'));",
                    "        pm.expect(contentLength).to.eql(13);",
                    "    }",
                    ");",
                    "",
                    "pm.test('Response delay is 2', ",
                    "    () =>  pm.expect(pm.response.json().delay).to.eql(\"2\")",
                    ");",
                    ""
                  ],
                  "_lastExecutionId": "71c71f88-209f-4780-ae83-44c5fb397297"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "95db2334-dde7-4ab9-844d-addde171276c",
              "type": "text/javascript",
              "exec": [
                "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('ECHO_SERVICE FOLDER Pre-request Scripts');",
                ""
              ],
              "_lastExecutionId": "96f1c171-e024-4c63-b7d0-9fcad89e1f4d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bdadc87d-58fe-4342-bf95-793beec688c0",
              "type": "text/javascript",
              "exec": [
                "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('ECHO_SERVICE Folder Tests');"
              ],
              "_lastExecutionId": "39fed8c6-3483-4e45-a3b8-18262ef1ad69"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disableBodyPruning": true
        }
      },
      {
        "id": "33e1f092-b1de-495b-83a9-051e18053e9d",
        "name": "RESTFUL_BOOKER",
        "description": {
          "content": "https://restful-booker.herokuapp.com/\n\nDOCS: https://restful-booker.herokuapp.com/apidoc/index.html",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "f7239e32-ae80-4ed2-96d0-3a9b94810935",
            "name": "health check",
            "request": {
              "url": {
                "path": [
                  "ping"
                ],
                "host": [
                  "{{RESTFULL_BOOKER_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Cookie",
                  "value": "token=16d2f037531ae80"
                },
                {
                  "key": "Accept",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "27133bf9-421e-4b0b-9bf1-74c59e4a5505",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.clear();",
                    "",
                    "pm.test('Status code name is \"Created\"', ",
                    "    () => pm.response.to.have.status(\"Created\")",
                    ");",
                    "",
                    "pm.test('Response text is \"Created\"', ",
                    "    () => pm.expect(pm.response.text()).to.eql(\"Created\")",
                    ");",
                    ""
                  ],
                  "_lastExecutionId": "8d4407f9-796b-42a7-b7a4-893b0cba77aa"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "50a64363-0e4a-443c-abab-1edcafa9600a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cb9269d5-a790-400f-9731-5f5e009f1551"
                }
              }
            ]
          },
          {
            "id": "73414c3a-527a-4670-9c44-76dd64ac83b2",
            "name": "create token",
            "request": {
              "url": {
                "path": [
                  "auth"
                ],
                "host": [
                  "{{RESTFULL_BOOKER_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "22426ed2-1321-48be-9010-2e89e3f7e9f4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Token is retrieven as a string\", function () {",
                    "    ",
                    "    var jsonData = pm.response.json(); // parse JSON from body",
                    "    ",
                    "    console.log(jsonData);",
                    "    console.log(JSON.stringify(jsonData, null, 2));",
                    "    console.log(`jsonData.token: ${jsonData.token}`);",
                    "    ",
                    "    console.log(`jsonData.value ${jsonData.value}`); // should be undefined",
                    "    pm.expect(jsonData.token).to.be.a('string');",
                    "    ",
                    "    // auto generated snipet - Set an environment variable",
                    "    // pm.globals.set(\"variable_key\", \"variable_value\");",
                    "    pm.globals.set(\"token\", jsonData.token);",
                    "});",
                    ""
                  ],
                  "_lastExecutionId": "7ec9a614-e390-4b9d-a847-13462af54a4b"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "32067d93-e91f-48e8-b3fc-f741a9502537",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e7308ccf-aff3-49d2-bb14-099265a1b171"
                }
              }
            ]
          },
          {
            "id": "9ba7f924-0c7f-4489-8f59-5894f02288ce",
            "name": "bookings ids",
            "request": {
              "url": {
                "path": [
                  "booking"
                ],
                "host": [
                  "{{RESTFULL_BOOKER_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4d64b293-208a-4f86-a466-9d18c4f0195f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2dfd52d7-1110-48d9-a39c-640a4d1cafe2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a13a1fc3-bb5c-4cac-9357-a717dea1b3f9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e9116e50-ff0a-4ef4-b1dc-2c09d20df9cf"
                }
              }
            ]
          },
          {
            "id": "30cdc59c-86e1-46d1-a7fa-725fe61f8815",
            "name": "create booking",
            "request": {
              "url": {
                "path": [
                  "booking"
                ],
                "host": [
                  "{{RESTFULL_BOOKER_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f243060f-fb2a-4756-b1f8-11f833fd62db",
                  "type": "text/javascript",
                  "exec": [
                    "const newBookingId = pm.response.json().bookingid;",
                    "console.log(`New booking id: ${newBookingId}`);",
                    "",
                    "pm.globals.set('newBookingId', newBookingId);"
                  ],
                  "_lastExecutionId": "9c7982ab-621e-4ad4-834b-cf8211bcfbbc"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "bca49a6c-bf22-443e-b6b8-27c9684a46f9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e0e3b7dc-ee73-485b-b127-9151bb720cd2"
                }
              }
            ]
          },
          {
            "id": "65a2bd72-8b41-403f-bedb-0d89d7277dad",
            "name": "booking by id",
            "request": {
              "url": {
                "path": [
                  "booking",
                  "{{newBookingId}}"
                ],
                "host": [
                  "{{RESTFULL_BOOKER_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e676f020-1592-41c5-9bb2-a209f776b2a8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "913b668d-f1f5-4c5f-8fe1-8edec502a9f8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "eef0023a-9454-4ef2-be7e-6df7edab294b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "678893e2-c7dd-43bd-a125-8f1b7d67c215"
                }
              }
            ]
          },
          {
            "id": "878d1402-585d-4e9d-a527-dcd785cb226c",
            "name": "update booking",
            "request": {
              "url": {
                "path": [
                  "booking",
                  "{{newBookingId}}"
                ],
                "host": [
                  "{{RESTFULL_BOOKER_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Cookie",
                  "value": "token={{token}}"
                },
                {
                  "key": "Accept",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2020-01-01\",\r\n        \"checkout\" : \"2020-01-10\"\r\n    },\r\n    \"additionalneeds\": \"none\"\r\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "74710eec-6fac-4f4e-9bf3-b18a2593595a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5f30e881-aa54-4e30-8ff8-7d25221861ca"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f4276e33-94a1-4d6c-a44f-b16be39655f7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9af16739-b619-4b7e-8e60-8965f323b814"
                }
              }
            ]
          },
          {
            "id": "b7859255-30ed-4c27-9de3-464330dc2147",
            "name": "partial update booking",
            "request": {
              "url": {
                "path": [
                  "booking",
                  "{{newBookingId}}"
                ],
                "host": [
                  "{{RESTFULL_BOOKER_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Cookie",
                  "value": "token={{token}}"
                },
                {
                  "key": "Accept",
                  "value": "application/json"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\"\r\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e9de7d4f-41da-441f-ada1-8aab933530fd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "94851d39-f8b9-47e9-89b7-7b1446fa9e7b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0820127e-398c-47f2-9eb7-89afa0762f3f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e4ad032f-e95a-495a-b697-7c36a8ebd642"
                }
              }
            ]
          },
          {
            "id": "e424ede3-6bc3-4fef-8ab8-6af8d3f30708",
            "name": "delete booking",
            "request": {
              "url": {
                "path": [
                  "booking",
                  "{{newBookingId}}"
                ],
                "host": [
                  "{{RESTFULL_BOOKER_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Cookie",
                  "value": "token={{token}}"
                }
              ],
              "method": "DELETE",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2020-01-01\",\r\n        \"checkout\" : \"2020-01-10\"\r\n    }\r\n}"
              },
              "auth": {
                "type": "basic",
                "basic": [
                  {
                    "type": "string",
                    "value": "admin@rms.com",
                    "key": "username"
                  },
                  {
                    "type": "string",
                    "value": "P@ssword1",
                    "key": "password"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ff17718e-e2fe-400a-9ed7-be1b58e0129d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "322d5b44-12e0-45fd-b424-990bba72a11f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "edb1bea6-7b3a-4152-a8ad-c01e4a4b5d17",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4e8f4d04-8555-43f9-ab14-5df96437ac2f"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f8ec0231-dcc6-4037-be5a-4795cbf69b0f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d0d05cab-0457-44e7-8124-abbf6cb3284f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b2426a45-2ba3-4fa2-abce-3a1354bb364b",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"Status code is 200 or 201\", function () {",
                "   pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                "});",
                "",
                "pm.test(\"Response time is less than 1000ms\", function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                "});"
              ],
              "_lastExecutionId": "718bb95c-52c5-4316-bc19-5bce78df59c1"
            }
          }
        ],
        "protocolProfileBehavior": []
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "bea5ca71-8b10-425c-a11c-2bf12948a719",
          "type": "text/javascript",
          "exec": [
            "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('PLAY_SMART_WITH_THE_BACKEND Collection Pre-request Scripts');",
            "",
            ""
          ],
          "_lastExecutionId": "291f2e2a-97ef-4625-8a3d-23340e632c46"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "7c286389-5948-462f-ae79-637b5d683051",
          "type": "text/javascript",
          "exec": [
            "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('PLAY_SMART_WITH_THE_BACKEND Collection Tests');"
          ],
          "_lastExecutionId": "6321e7c9-eb90-4248-96be-2852fb3fcdad"
        }
      }
    ],
    "protocolProfileBehavior": {
      "disableBodyPruning": true
    },
    "variable": [],
    "info": {
      "_postman_id": "831201cb-16d0-4057-8906-d3b84f38f650",
      "name": "PLAY_SMART_WITH_THE_BACKEND",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2019-12-09T14:50:33.680Z",
      "postman_exported_using": "Postman/7.13.0"
    },
    "id": "5450fdff-035f-42fd-8ae5-0141fd4b5c34",
    "name": "PLAY_SMART_WITH_THE_BACKEND",
    "values": [
      {
        "type": "any",
        "value": "https://restful-booker.herokuapp.com",
        "key": "RESTFULL_BOOKER_URL"
      },
      {
        "type": "any",
        "value": "true",
        "key": "ENABLE_HELP_MESSAGES"
      },
      {
        "type": "any",
        "value": "https://postman-echo.com",
        "key": "POSTMAN_ECHO_URL"
      }
    ]
  },
  "globals": {
    "id": "16b1d02c-3a3b-4acc-b53f-8b552d988a3d",
    "values": [
      {
        "type": "any",
        "value": "e91a572fbe3710b",
        "key": "token"
      },
      {
        "type": "any",
        "value": 11,
        "key": "newBookingId"
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 87,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 39,
        "pending": 0,
        "failed": 4
      },
      "testScripts": {
        "total": 45,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 42,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 399.46666666666664,
      "responseMin": 131,
      "responseMax": 2176,
      "responseSd": 531.7713627323516,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1575965749803,
      "completed": 1575965756500
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "46e0a7ae-c8a5-4a0e-ac70-1d8073ae2042",
          "httpRequestId": "04621525-69cc-4aa0-9557-a56589b581fc"
        },
        "item": {
          "id": "eb909c52-4a02-4762-94d0-da504ab75d24",
          "name": "setup & utils",
          "request": {
            "url": {
              "protocol": "https",
              "host": [
                "www",
                "google",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "HEAD",
            "body": {
              "mode": "raw",
              "raw": "{ \n\t\"name\": \"mark\", \n\t\"age\": 51, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n\t\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log(`'${pm.info.requestName}' Request Pre-request Script`);",
                  "",
                  "pm.globals.clear();",
                  "",
                  "const deepTest = expected => actual => (prefix = 'object') => testFunction => {        ",
                  "    ",
                  "    if (typeof expected !== 'object' || expected === null){",
                  "        testFunction(expected, actual, prefix);",
                  "        return;",
                  "    }",
                  "",
                  "    if (Array.isArray(expected)){                     ",
                  "        expected.forEach((element, index) => ",
                  "            deepTest(expected[index])(actual[index])(`${prefix}[${index}]`)(testFunction)",
                  "        );",
                  "        return;",
                  "    }",
                  "",
                  "    if (typeof expected === 'object'){          ",
                  "        Object.keys(expected).forEach(key => ",
                  "            deepTest(expected[key])(actual[key])(`${prefix}.${key}`)(testFunction)",
                  "        );            ",
                  "        return;",
                  "    }",
                  "};",
                  "",
                  "const testFunction = (expected, actual, prefix) =>",
                  "    pm.test(`Validate ${prefix}`, () => pm.expect(expected).eql(actual));",
                  "",
                  "const prettify = json => JSON.stringify(json, null, 2);",
                  "",
                  "const getHeader = (pm, headerName) => {",
                  "    const header = pm.response.headers.find(header => header.key == headerName); ",
                  "    return header ? header.value : undefined;",
                  "}",
                  "",
                  "// SAVE FUCTIONALITY FOR REUSE",
                  "postman.setGlobalVariable('deepTest', deepTest);",
                  "//globals.deepTest = deepTest;  // this does not work",
                  "postman.setGlobalVariable('testFunction', testFunction);",
                  "postman.setGlobalVariable('prettify', prettify);",
                  "postman.setGlobalVariable('getHeader', getHeader);",
                  "",
                  "/* Usage within other sripts",
                  "// i.e.",
                  "const expectedUser = { name: \"mark\", age: 50, isAdmin: true };",
                  "const actualUser = { name: \"mark\", age: 51, isAdmin: false };",
                  "const deepTest = eval(globals.deepTest);",
                  "// or const deepTest = eval(postman.getGlobalVariable('deepTest'));",
                  "const testFunction = eval(globals.testFunction);",
                  "deepTest(expectedUser)(actualUser)('Validate user')(testFunction);",
                  "*/",
                  ""
                ],
                "_lastExecutionId": "f25e6f36-46a1-4099-9764-a06652372a47"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log(`'${pm.info.requestName}' Request Tests`);"
                ],
                "_lastExecutionId": "2b302092-f511-41a1-84de-afcd77452f28"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "https",
            "host": [
              "www",
              "google",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "553fefed-c767-4ae9-8da1-8aa94e65dc42",
              "system": true
            },
            {
              "key": "Host",
              "value": "www.google.com",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "content-length",
              "value": 103,
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "HEAD",
          "body": {
            "mode": "raw",
            "raw": "{ \n\t\"name\": \"mark\", \n\t\"age\": 51, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n\t\n}"
          }
        },
        "response": {
          "id": "7e4f813a-47e4-4bf5-a22a-0ffe31662cb5",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/html; charset=UTF-8"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "Content-Length",
              "value": "1555"
            },
            {
              "key": "Date",
              "value": "Tue, 10 Dec 2019 08:15:50 GMT"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 864,
          "responseSize": 0
        },
        "id": "eb909c52-4a02-4762-94d0-da504ab75d24"
      },
      {
        "cursor": {
          "ref": "6437a5e3-1954-4e2f-a413-88c81771c82c",
          "length": 15,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d5cb9fdb-ced5-4bba-aebe-cf9cb78259f4"
        },
        "item": {
          "id": "fa3a44d2-4da1-40dd-ad12-f92f2f166cf5",
          "name": "500 Internal Server Error",
          "request": {
            "url": {
              "path": [
                "status",
                "500"
              ],
              "host": [
                "{{POSTMAN_ECHO_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', ",
                  "    () =>pm.response.to.have.status(200)",
                  ");"
                ],
                "_lastExecutionId": "b7e87bec-79da-47d2-9ff9-6e77fe8d6a4b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "status",
              "500"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a4d420de-1e9f-4b09-b3ab-b317d0f9c1ca",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "d076a03b-866d-414c-9a47-0d5537bc377f",
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 10 Dec 2019 08:15:51 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"e-DRyKmU8iz/Q1q0KRLR2p1AvGGqo\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AqWI814wsnlWo-AAwWyehhstEx_j4c3vP.kv4WVmJ6yzmz1D2PXgvdDxOzaPgvkHCwfVT3zahCImM; Path=/; HttpOnly"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "14"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              53,
              48,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 668,
          "responseSize": 14
        },
        "id": "fa3a44d2-4da1-40dd-ad12-f92f2f166cf5",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "a4de9aab-8abd-4d43-828b-deb39d1700b9",
          "length": 15,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8c59e1f4-41a2-4e86-ac64-708bcab85ac1"
        },
        "item": {
          "id": "10f2d182-a7ab-4436-89e2-299bff346e50",
          "name": "local IP",
          "request": {
            "url": {
              "path": [
                "ip"
              ],
              "host": [
                "{{POSTMAN_ECHO_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', ",
                  "    () => pm.response.to.have.status(200)",
                  ");",
                  "",
                  "pm.test('Response JSON \"ip\" property matches an IP Regex',",
                  "    () => {",
                  "        const ip = pm.response.json().ip;",
                  "        console.log(`ip: ${ip}`);",
                  "        ",
                  "        const ipMatcherRegex = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/;",
                  "        ",
                  "        pm.expect(ip).to.match(ipMatcherRegex);",
                  "    }",
                  ");"
                ],
                "_lastExecutionId": "176caf6e-1b7c-4f15-8c2a-55b82bedafd2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "ip"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7e6538f9-acd8-4acb-8bca-ed6f7ba96ee2",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3AqWI814wsnlWo-AAwWyehhstEx_j4c3vP.kv4WVmJ6yzmz1D2PXgvdDxOzaPgvkHCwfVT3zahCImM",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "2e1ebb27-b2f4-464f-ae85-4f10761bb908",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Encoding",
              "value": "gzip"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 10 Dec 2019 08:15:51 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"18-6N1gdoRHwyuW8UAEb4XgUHaQrTs\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "44"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              112,
              34,
              58,
              34,
              49,
              57,
              51,
              46,
              49,
              48,
              52,
              46,
              49,
              53,
              48,
              46,
              50,
              48,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 142,
          "responseSize": 24
        },
        "id": "10f2d182-a7ab-4436-89e2-299bff346e50",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response JSON \"ip\" property matches an IP Regex",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "40d39659-27cb-43e2-9721-59a0ea9d1c2d",
          "length": 15,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d8eece50-ac92-42c2-9004-5ae59b4eb133"
        },
        "item": {
          "id": "f120bbce-4e42-424d-9d46-f3c977f54969",
          "name": "JSON body",
          "request": {
            "url": {
              "path": [
                "post"
              ],
              "host": [
                "{{POSTMAN_ECHO_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{ \n\t\"name\": \"Mark Johnson\", \n\t\"age\": 31, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "5c0286dd-c9ed-4ac1-87b9-e97974bddd31"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                "type": "text/javascript",
                "exec": [
                  "const expectedUser = { ",
                  "    name: \"Mark Johnson\", ",
                  "    age: 50, ",
                  "    isAdmin: true, ",
                  "    resourceIds: [1111, 1112, 1113] ",
                  "    ",
                  "}; // wrong age and resourcesIds[1]",
                  "",
                  "const actualUser = pm.response.json().json;",
                  "",
                  "// Chai deep equal assertion",
                  "pm.test('Validate user (deep equal)', () => pm.expect(expectedUser).to.eql(actualUser));",
                  "",
                  "// Enhanced verification - one test / value",
                  "const deepTest = eval(globals.deepTest);",
                  "const testFunction = eval(globals.testFunction);",
                  "deepTest(expectedUser)(actualUser)('user')(testFunction);",
                  "",
                  "",
                  ""
                ],
                "_lastExecutionId": "0744d3a4-d288-4180-821b-4bbc183a3c5d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "post"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "45c194e4-f95f-4e0a-82c7-747a30f95288",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3AqWI814wsnlWo-AAwWyehhstEx_j4c3vP.kv4WVmJ6yzmz1D2PXgvdDxOzaPgvkHCwfVT3zahCImM",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "content-length",
              "value": 109,
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{ \n\t\"name\": \"Mark Johnson\", \n\t\"age\": 31, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n}"
          }
        },
        "response": {
          "id": "47049fb5-1b4c-463a-9ed0-702cde852efa",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Encoding",
              "value": "gzip"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 10 Dec 2019 08:15:51 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"294-+ECSv7pz8SkdmsZ/SMz7TD72J1I\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "419"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              97,
              114,
              103,
              115,
              34,
              58,
              123,
              125,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              97,
              114,
              107,
              32,
              74,
              111,
              104,
              110,
              115,
              111,
              110,
              34,
              44,
              34,
              97,
              103,
              101,
              34,
              58,
              51,
              49,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              73,
              100,
              115,
              34,
              58,
              91,
              49,
              49,
              49,
              49,
              44,
              49,
              49,
              49,
              48,
              44,
              49,
              49,
              49,
              51,
              93,
              125,
              44,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              58,
              123,
              125,
              44,
              34,
              102,
              111,
              114,
              109,
              34,
              58,
              123,
              125,
              44,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              123,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              58,
              34,
              49,
              48,
              57,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              34,
              42,
              47,
              42,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              34,
              44,
              34,
              99,
              97,
              99,
              104,
              101,
              45,
              99,
              111,
              110,
              116,
              114,
              111,
              108,
              34,
              58,
              34,
              110,
              111,
              45,
              99,
              97,
              99,
              104,
              101,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              47,
              106,
              115,
              111,
              110,
              34,
              44,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              34,
              58,
              34,
              115,
              97,
              105,
              108,
              115,
              46,
              115,
              105,
              100,
              61,
              115,
              37,
              51,
              65,
              113,
              87,
              73,
              56,
              49,
              52,
              119,
              115,
              110,
              108,
              87,
              111,
              45,
              65,
              65,
              119,
              87,
              121,
              101,
              104,
              104,
              115,
              116,
              69,
              120,
              95,
              106,
              52,
              99,
              51,
              118,
              80,
              46,
              107,
              118,
              52,
              87,
              86,
              109,
              74,
              54,
              121,
              122,
              109,
              122,
              49,
              68,
              50,
              80,
              88,
              103,
              118,
              100,
              68,
              120,
              79,
              122,
              97,
              80,
              103,
              118,
              107,
              72,
              67,
              119,
              102,
              86,
              84,
              51,
              122,
              97,
              104,
              67,
              73,
              109,
              77,
              34,
              44,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              52,
              53,
              99,
              49,
              57,
              52,
              101,
              52,
              45,
              102,
              57,
              53,
              102,
              45,
              52,
              101,
              48,
              97,
              45,
              56,
              50,
              99,
              55,
              45,
              55,
              52,
              55,
              97,
              51,
              48,
              102,
              57,
              53,
              50,
              56,
              56,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              55,
              46,
              49,
              52,
              46,
              48,
              34,
              44,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              34,
              52,
              52,
              51,
              34,
              125,
              44,
              34,
              106,
              115,
              111,
              110,
              34,
              58,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              97,
              114,
              107,
              32,
              74,
              111,
              104,
              110,
              115,
              111,
              110,
              34,
              44,
              34,
              97,
              103,
              101,
              34,
              58,
              51,
              49,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              73,
              100,
              115,
              34,
              58,
              91,
              49,
              49,
              49,
              49,
              44,
              49,
              49,
              49,
              48,
              44,
              49,
              49,
              49,
              51,
              93,
              125,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              47,
              112,
              111,
              115,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 176,
          "responseSize": 660
        },
        "id": "f120bbce-4e42-424d-9d46-f3c977f54969",
        "assertions": [
          {
            "assertion": "Validate user (deep equal)",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Validate user (deep equal)",
              "message": "expected { Object (name, age, ...) } to deeply equal { Object (name, age, ...) }",
              "stack": "AssertionError: expected { Object (name, age, ...) } to deeply equal { Object (name, age, ...) }\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "Validate user.name",
            "skipped": false
          },
          {
            "assertion": "Validate user.age",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Validate user.age",
              "message": "expected 50 to deeply equal 31",
              "stack": "AssertionError: expected 50 to deeply equal 31\n   at Object.eval sandbox-script.js:3:4)"
            }
          },
          {
            "assertion": "Validate user.isAdmin",
            "skipped": false
          },
          {
            "assertion": "Validate user.resourceIds[0]",
            "skipped": false
          },
          {
            "assertion": "Validate user.resourceIds[1]",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 5,
              "test": "Validate user.resourceIds[1]",
              "message": "expected 1112 to deeply equal 1110",
              "stack": "AssertionError: expected 1112 to deeply equal 1110\n   at Object.eval sandbox-script.js:6:4)"
            }
          },
          {
            "assertion": "Validate user.resourceIds[2]",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "bc8ae2f7-fbb6-4022-87c4-c81b952964f6",
          "length": 15,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a8c8d3ca-8ae7-4e59-af60-efd7229bb7db"
        },
        "item": {
          "id": "fe166fca-9b67-4ba7-a346-4140a37dbff4",
          "name": "query string parameters",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "post"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [
                {
                  "key": "company",
                  "value": "nagarro"
                },
                {
                  "key": "location",
                  "value": "timisoara"
                },
                {
                  "key": "department",
                  "value": "qa"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "bb2d1149-14fb-48a2-a69a-2821ee927cad"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                "type": "text/javascript",
                "exec": [
                  "const expectedArgs = {",
                  "        \"company\": \"nagarro\",",
                  "        \"location\": \"timisoara\",",
                  "        \"department\": \"qa\"",
                  "    };",
                  "const actualArgs = pm.response.json().args;",
                  "",
                  "const deepTest = eval(globals.deepTest);",
                  "const testFunction = eval(globals.testFunction);",
                  "",
                  "deepTest(expectedArgs)(actualArgs)('args')(testFunction);"
                ],
                "_lastExecutionId": "9df9aec6-1717-49c5-9f09-cb18cc00d8e7"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "post"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [
              {
                "key": "company",
                "value": "nagarro"
              },
              {
                "key": "location",
                "value": "timisoara"
              },
              {
                "key": "department",
                "value": "qa"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/x-www-form-urlencoded"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1aa86395-f8bc-46f4-ad71-12da3b996f35",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3AqWI814wsnlWo-AAwWyehhstEx_j4c3vP.kv4WVmJ6yzmz1D2PXgvdDxOzaPgvkHCwfVT3zahCImM",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "content-length",
              "value": "",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST"
        },
        "response": {
          "id": "b224318b-72da-409a-912a-7d8e2ef28c8a",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Encoding",
              "value": "gzip"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 10 Dec 2019 08:15:51 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"27a-wQqIaTZgr5/SeDXhPJFJJpDZ7Jk\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AjaDZ-VB7NKZfT1Xc5eXGMB1nmkXvlsXY.qcYuDrUj%2F3Ab5ueAqqpIrRZ%2FJvjNkyTe1XvW1PbELeg; Path=/; HttpOnly"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "430"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              97,
              114,
              103,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              110,
              97,
              103,
              97,
              114,
              114,
              111,
              34,
              44,
              34,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              116,
              105,
              109,
              105,
              115,
              111,
              97,
              114,
              97,
              34,
              44,
              34,
              100,
              101,
              112,
              97,
              114,
              116,
              109,
              101,
              110,
              116,
              34,
              58,
              34,
              113,
              97,
              34,
              125,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              34,
              34,
              44,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              58,
              123,
              125,
              44,
              34,
              102,
              111,
              114,
              109,
              34,
              58,
              123,
              125,
              44,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              123,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              34,
              42,
              47,
              42,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              34,
              44,
              34,
              99,
              97,
              99,
              104,
              101,
              45,
              99,
              111,
              110,
              116,
              114,
              111,
              108,
              34,
              58,
              34,
              110,
              111,
              45,
              99,
              97,
              99,
              104,
              101,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              47,
              120,
              45,
              119,
              119,
              119,
              45,
              102,
              111,
              114,
              109,
              45,
              117,
              114,
              108,
              101,
              110,
              99,
              111,
              100,
              101,
              100,
              34,
              44,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              34,
              58,
              34,
              115,
              97,
              105,
              108,
              115,
              46,
              115,
              105,
              100,
              61,
              115,
              37,
              51,
              65,
              113,
              87,
              73,
              56,
              49,
              52,
              119,
              115,
              110,
              108,
              87,
              111,
              45,
              65,
              65,
              119,
              87,
              121,
              101,
              104,
              104,
              115,
              116,
              69,
              120,
              95,
              106,
              52,
              99,
              51,
              118,
              80,
              46,
              107,
              118,
              52,
              87,
              86,
              109,
              74,
              54,
              121,
              122,
              109,
              122,
              49,
              68,
              50,
              80,
              88,
              103,
              118,
              100,
              68,
              120,
              79,
              122,
              97,
              80,
              103,
              118,
              107,
              72,
              67,
              119,
              102,
              86,
              84,
              51,
              122,
              97,
              104,
              67,
              73,
              109,
              77,
              34,
              44,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              49,
              97,
              97,
              56,
              54,
              51,
              57,
              53,
              45,
              102,
              56,
              98,
              99,
              45,
              52,
              54,
              102,
              52,
              45,
              97,
              100,
              55,
              49,
              45,
              49,
              50,
              100,
              97,
              51,
              98,
              57,
              57,
              54,
              102,
              51,
              53,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              55,
              46,
              49,
              52,
              46,
              48,
              34,
              44,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              34,
              52,
              52,
              51,
              34,
              125,
              44,
              34,
              106,
              115,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              47,
              112,
              111,
              115,
              116,
              63,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              61,
              110,
              97,
              103,
              97,
              114,
              114,
              111,
              38,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              61,
              116,
              105,
              109,
              105,
              115,
              111,
              97,
              114,
              97,
              38,
              100,
              101,
              112,
              97,
              114,
              116,
              109,
              101,
              110,
              116,
              61,
              113,
              97,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 134,
          "responseSize": 634
        },
        "id": "fe166fca-9b67-4ba7-a346-4140a37dbff4",
        "assertions": [
          {
            "assertion": "Validate args.company",
            "skipped": false
          },
          {
            "assertion": "Validate args.location",
            "skipped": false
          },
          {
            "assertion": "Validate args.department",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "0a18426b-217d-4fd8-ad9a-933f39a6152d",
          "length": 15,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0b95880b-4367-4b03-80eb-4a22f0ec4e9a"
        },
        "item": {
          "id": "21da0627-bf8c-420a-8773-718019c52d6a",
          "name": "form data",
          "request": {
            "url": {
              "path": [
                "post"
              ],
              "host": [
                "{{POSTMAN_ECHO_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "email",
                  "value": "danginkgo@yahoo.com",
                  "type": "text"
                },
                {
                  "key": "username",
                  "value": "danrusu",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "ad8ccfae-382e-4b84-b9a2-261cbb9ea113"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                "type": "text/javascript",
                "exec": [
                  "const expectedForm = {",
                  "    \"email\": \"danginkgo@yahoo.com\",",
                  "    \"username\": \"danrusu\"",
                  "};",
                  "const actualForm = pm.response.json().form;",
                  "",
                  "const deepTest = eval(globals.deepTest);",
                  "const testFunction = eval(globals.testFunction);",
                  "",
                  "deepTest(expectedForm)(actualForm)('form')(testFunction);"
                ],
                "_lastExecutionId": "f3d43edb-3d34-4fd6-8ba6-fc06ce32da14"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "post"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/x-www-form-urlencoded"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c1062086-3168-4328-afc8-0aa3b3e060ac",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3AjaDZ-VB7NKZfT1Xc5eXGMB1nmkXvlsXY.qcYuDrUj%2F3Ab5ueAqqpIrRZ%2FJvjNkyTe1XvW1PbELeg",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "content-length",
              "value": 293,
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "email",
                "value": "danginkgo@yahoo.com",
                "type": "text"
              },
              {
                "key": "username",
                "value": "danrusu",
                "type": "text"
              }
            ]
          }
        },
        "response": {
          "id": "ae667182-7e2f-42ea-a012-862a7052e2ff",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Encoding",
              "value": "gzip"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 10 Dec 2019 08:15:52 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"274-v9FAqXxPly++j995yyeHXdwR0rs\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AN9LisRvDbPZGDMrQacmAsQ_MqQU4ScUV.llu8x2SB%2FpJIypCYMQtNU4Jo4%2B2OL6PkDuXhubvREXY; Path=/; HttpOnly"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "433"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              97,
              114,
              103,
              115,
              34,
              58,
              123,
              125,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              125,
              44,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              58,
              123,
              125,
              44,
              34,
              102,
              111,
              114,
              109,
              34,
              58,
              123,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              100,
              97,
              110,
              103,
              105,
              110,
              107,
              103,
              111,
              64,
              121,
              97,
              104,
              111,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              100,
              97,
              110,
              114,
              117,
              115,
              117,
              34,
              125,
              44,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              123,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              58,
              34,
              50,
              57,
              51,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              34,
              42,
              47,
              42,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              34,
              44,
              34,
              99,
              97,
              99,
              104,
              101,
              45,
              99,
              111,
              110,
              116,
              114,
              111,
              108,
              34,
              58,
              34,
              110,
              111,
              45,
              99,
              97,
              99,
              104,
              101,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              117,
              108,
              116,
              105,
              112,
              97,
              114,
              116,
              47,
              102,
              111,
              114,
              109,
              45,
              100,
              97,
              116,
              97,
              59,
              32,
              98,
              111,
              117,
              110,
              100,
              97,
              114,
              121,
              61,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              51,
              56,
              48,
              55,
              51,
              56,
              55,
              48,
              52,
              56,
              56,
              50,
              48,
              57,
              54,
              53,
              57,
              55,
              56,
              48,
              49,
              49,
              48,
              55,
              34,
              44,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              34,
              58,
              34,
              115,
              97,
              105,
              108,
              115,
              46,
              115,
              105,
              100,
              61,
              115,
              37,
              51,
              65,
              106,
              97,
              68,
              90,
              45,
              86,
              66,
              55,
              78,
              75,
              90,
              102,
              84,
              49,
              88,
              99,
              53,
              101,
              88,
              71,
              77,
              66,
              49,
              110,
              109,
              107,
              88,
              118,
              108,
              115,
              88,
              89,
              46,
              113,
              99,
              89,
              117,
              68,
              114,
              85,
              106,
              37,
              50,
              70,
              51,
              65,
              98,
              53,
              117,
              101,
              65,
              113,
              113,
              112,
              73,
              114,
              82,
              90,
              37,
              50,
              70,
              74,
              118,
              106,
              78,
              107,
              121,
              84,
              101,
              49,
              88,
              118,
              87,
              49,
              80,
              98,
              69,
              76,
              101,
              103,
              34,
              44,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              99,
              49,
              48,
              54,
              50,
              48,
              56,
              54,
              45,
              51,
              49,
              54,
              56,
              45,
              52,
              51,
              50,
              56,
              45,
              97,
              102,
              99,
              56,
              45,
              48,
              97,
              97,
              51,
              98,
              51,
              101,
              48,
              54,
              48,
              97,
              99,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              55,
              46,
              49,
              52,
              46,
              48,
              34,
              44,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              34,
              52,
              52,
              51,
              34,
              125,
              44,
              34,
              106,
              115,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              47,
              112,
              111,
              115,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 131,
          "responseSize": 628
        },
        "id": "21da0627-bf8c-420a-8773-718019c52d6a",
        "assertions": [
          {
            "assertion": "Validate form.email",
            "skipped": false
          },
          {
            "assertion": "Validate form.username",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e7561c96-de9f-4e1a-966e-4e6b34b956e4",
          "length": 15,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "9618f7d5-c0fa-4be5-93f7-226240eebc3f"
        },
        "item": {
          "id": "6640c4f8-deb4-4fb6-b4dd-3ec97e005511",
          "name": "delay 2s",
          "request": {
            "url": {
              "path": [
                "delay",
                "2"
              ],
              "host": [
                "{{POSTMAN_ECHO_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                "type": "text/javascript",
                "exec": [
                  "const getHeader = eval(globals.getHeader);",
                  "const prettify = eval(globals.prettify);",
                  "",
                  "pm.test('Status code is 200', ",
                  "    () =>pm.response.to.have.status(200)",
                  ");",
                  "",
                  "pm.test('Status code name is OK',",
                  "    () => pm.response.to.have.status(\"OK\")",
                  ");",
                  "",
                  "pm.test('Response time is above 2000ms', ",
                  "    () => pm.expect(pm.response.responseTime).to.be.above(2000)",
                  ");",
                  "",
                  "pm.test('Response body size is 13 B',",
                  "    () => {",
                  "        //const bodySize = pm.response.responseSize;",
                  "        console.log(`Headers ${prettify(pm.response.headers, null, 2)}`);",
                  "        const contentLength = parseInt(getHeader(pm, 'Content-Length'));",
                  "        pm.expect(contentLength).to.eql(13);",
                  "    }",
                  ");",
                  "",
                  "pm.test('Response delay is 2', ",
                  "    () =>  pm.expect(pm.response.json().delay).to.eql(\"2\")",
                  ");",
                  ""
                ],
                "_lastExecutionId": "71c71f88-209f-4780-ae83-44c5fb397297"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "delay",
              "2"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "77769abd-4015-468e-ba05-1d9988f8d971",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3AN9LisRvDbPZGDMrQacmAsQ_MqQU4ScUV.llu8x2SB%2FpJIypCYMQtNU4Jo4%2B2OL6PkDuXhubvREXY",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "74745300-45a2-4f31-82bc-0951a0424b34",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 10 Dec 2019 08:15:54 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"d-vb8pS8uHJYunqF73qADGxcv0Je8\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3Agx1tdG2--hlWdKy5A_I7VZlZ5lbflhm6.ON3U0IfJlbtWnE%2Bb5KWD1K0XHAWuYL5nCRYgBauh8UU; Path=/; HttpOnly"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "13"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              108,
              97,
              121,
              34,
              58,
              34,
              50,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2176,
          "responseSize": 13
        },
        "id": "6640c4f8-deb4-4fb6-b4dd-3ec97e005511",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Status code name is OK",
            "skipped": false
          },
          {
            "assertion": "Response time is above 2000ms",
            "skipped": false
          },
          {
            "assertion": "Response body size is 13 B",
            "skipped": false
          },
          {
            "assertion": "Response delay is 2",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ab9a7c7a-5716-4bb2-bc74-3ef05f21a7e0",
          "length": 15,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "bfe89fcd-85f9-4e28-9387-ed050681d2e4"
        },
        "item": {
          "id": "f7239e32-ae80-4ed2-96d0-3a9b94810935",
          "name": "health check",
          "request": {
            "url": {
              "path": [
                "ping"
              ],
              "host": [
                "{{RESTFULL_BOOKER_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "token=16d2f037531ae80"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "27133bf9-421e-4b0b-9bf1-74c59e4a5505",
                "type": "text/javascript",
                "exec": [
                  "pm.globals.clear();",
                  "",
                  "pm.test('Status code name is \"Created\"', ",
                  "    () => pm.response.to.have.status(\"Created\")",
                  ");",
                  "",
                  "pm.test('Response text is \"Created\"', ",
                  "    () => pm.expect(pm.response.text()).to.eql(\"Created\")",
                  ");",
                  ""
                ],
                "_lastExecutionId": "8d4407f9-796b-42a7-b7a4-893b0cba77aa"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "50a64363-0e4a-443c-abab-1edcafa9600a",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "cb9269d5-a790-400f-9731-5f5e009f1551"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "ping"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Cookie",
              "value": "token=16d2f037531ae80"
            },
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8e9c133f-8480-4152-9be3-1f7053dc297c",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "2297377a-09e9-453f-a731-5750859d9466",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Server",
              "value": "Cowboy"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "text/plain; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "7"
            },
            {
              "key": "Etag",
              "value": "W/\"7-rM9AyJuqT6iOan/xHh+AW+7K/T8\""
            },
            {
              "key": "Date",
              "value": "Tue, 10 Dec 2019 08:15:54 GMT"
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              67,
              114,
              101,
              97,
              116,
              101,
              100
            ]
          },
          "cookie": [],
          "responseTime": 689,
          "responseSize": 7
        },
        "id": "f7239e32-ae80-4ed2-96d0-3a9b94810935",
        "assertions": [
          {
            "assertion": "Status code is 200 or 201",
            "skipped": false
          },
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false
          },
          {
            "assertion": "Status code name is \"Created\"",
            "skipped": false
          },
          {
            "assertion": "Response text is \"Created\"",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "9018f82e-85f3-43d4-8295-5420941ed1b5",
          "length": 15,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "885fc952-489a-4f90-bb3f-1c023cb57ea1"
        },
        "item": {
          "id": "73414c3a-527a-4670-9c44-76dd64ac83b2",
          "name": "create token",
          "request": {
            "url": {
              "path": [
                "auth"
              ],
              "host": [
                "{{RESTFULL_BOOKER_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "22426ed2-1321-48be-9010-2e89e3f7e9f4",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Token is retrieven as a string\", function () {",
                  "    ",
                  "    var jsonData = pm.response.json(); // parse JSON from body",
                  "    ",
                  "    console.log(jsonData);",
                  "    console.log(JSON.stringify(jsonData, null, 2));",
                  "    console.log(`jsonData.token: ${jsonData.token}`);",
                  "    ",
                  "    console.log(`jsonData.value ${jsonData.value}`); // should be undefined",
                  "    pm.expect(jsonData.token).to.be.a('string');",
                  "    ",
                  "    // auto generated snipet - Set an environment variable",
                  "    // pm.globals.set(\"variable_key\", \"variable_value\");",
                  "    pm.globals.set(\"token\", jsonData.token);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "7ec9a614-e390-4b9d-a847-13462af54a4b"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "32067d93-e91f-48e8-b3fc-f741a9502537",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "e7308ccf-aff3-49d2-bb14-099265a1b171"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "auth"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "324f9e23-f793-43ac-90b4-1edd21d38acd",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "content-length",
              "value": 63,
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}"
          }
        },
        "response": {
          "id": "27cf85eb-9bfc-443e-a344-fc435c73e730",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Cowboy"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "27"
            },
            {
              "key": "Etag",
              "value": "W/\"1b-vE5V3vu8B7+dN9/pl5XmjTgpRzA\""
            },
            {
              "key": "Date",
              "value": "Tue, 10 Dec 2019 08:15:55 GMT"
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              101,
              57,
              49,
              97,
              53,
              55,
              50,
              102,
              98,
              101,
              51,
              55,
              49,
              48,
              98,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 142,
          "responseSize": 27
        },
        "id": "73414c3a-527a-4670-9c44-76dd64ac83b2",
        "assertions": [
          {
            "assertion": "Status code is 200 or 201",
            "skipped": false
          },
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false
          },
          {
            "assertion": "Token is retrieven as a string",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "58c4e3a4-842e-4776-8725-7c9bf06d8732",
          "length": 15,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7910be9d-233e-4375-9212-36c9869c26b1"
        },
        "item": {
          "id": "9ba7f924-0c7f-4489-8f59-5894f02288ce",
          "name": "bookings ids",
          "request": {
            "url": {
              "path": [
                "booking"
              ],
              "host": [
                "{{RESTFULL_BOOKER_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "4d64b293-208a-4f86-a466-9d18c4f0195f",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "2dfd52d7-1110-48d9-a39c-640a4d1cafe2"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a13a1fc3-bb5c-4cac-9357-a717dea1b3f9",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "e9116e50-ff0a-4ef4-b1dc-2c09d20df9cf"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "booking"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d71b9e93-71bb-4790-bcc6-40deee90642c",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "c005c8e0-27e9-4830-8a87-4ae2bb4a4f02",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Cowboy"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "162"
            },
            {
              "key": "Etag",
              "value": "W/\"a2-efrw4z4oDznkUy176es+xrNxfG0\""
            },
            {
              "key": "Date",
              "value": "Tue, 10 Dec 2019 08:15:55 GMT"
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              55,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              54,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              48,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              56,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 142,
          "responseSize": 162
        },
        "id": "9ba7f924-0c7f-4489-8f59-5894f02288ce",
        "assertions": [
          {
            "assertion": "Status code is 200 or 201",
            "skipped": false
          },
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "be9b574d-1345-4aff-b499-398b45186826",
          "length": 15,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "bf1c2faa-6ba1-4d7a-91c2-d9858e940c75"
        },
        "item": {
          "id": "30cdc59c-86e1-46d1-a7fa-725fe61f8815",
          "name": "create booking",
          "request": {
            "url": {
              "path": [
                "booking"
              ],
              "host": [
                "{{RESTFULL_BOOKER_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f243060f-fb2a-4756-b1f8-11f833fd62db",
                "type": "text/javascript",
                "exec": [
                  "const newBookingId = pm.response.json().bookingid;",
                  "console.log(`New booking id: ${newBookingId}`);",
                  "",
                  "pm.globals.set('newBookingId', newBookingId);"
                ],
                "_lastExecutionId": "9c7982ab-621e-4ad4-834b-cf8211bcfbbc"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "bca49a6c-bf22-443e-b6b8-27c9684a46f9",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "e0e3b7dc-ee73-485b-b127-9151bb720cd2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "booking"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d1bcb8c8-52eb-4da1-ac38-56ff88c2f9c3",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "content-length",
              "value": 248,
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
          }
        },
        "response": {
          "id": "7d07bc5d-6240-48e4-9af4-6823a5e1642c",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Cowboy"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "195"
            },
            {
              "key": "Etag",
              "value": "W/\"c3-mr+ToVU3dK7bNqxVpsnhD1SC7cM\""
            },
            {
              "key": "Date",
              "value": "Tue, 10 Dec 2019 08:15:55 GMT"
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              49,
              44,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              34,
              58,
              123,
              34,
              102,
              105,
              114,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              105,
              109,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              114,
              111,
              119,
              110,
              34,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              49,
              49,
              44,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              112,
              97,
              105,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              100,
              97,
              116,
              101,
              115,
              34,
              58,
              123,
              34,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              49,
              56,
              45,
              48,
              49,
              45,
              48,
              49,
              34,
              44,
              34,
              99,
              104,
              101,
              99,
              107,
              111,
              117,
              116,
              34,
              58,
              34,
              50,
              48,
              49,
              57,
              45,
              48,
              49,
              45,
              48,
              49,
              34,
              125,
              44,
              34,
              97,
              100,
              100,
              105,
              116,
              105,
              111,
              110,
              97,
              108,
              110,
              101,
              101,
              100,
              115,
              34,
              58,
              34,
              66,
              114,
              101,
              97,
              107,
              102,
              97,
              115,
              116,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 140,
          "responseSize": 195
        },
        "id": "30cdc59c-86e1-46d1-a7fa-725fe61f8815",
        "assertions": [
          {
            "assertion": "Status code is 200 or 201",
            "skipped": false
          },
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "dee60bb5-b2a7-42bf-9bd6-6cecd442f0b0",
          "length": 15,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "3be92c74-fee8-4bdd-a52e-b3177086b1d1"
        },
        "item": {
          "id": "65a2bd72-8b41-403f-bedb-0d89d7277dad",
          "name": "booking by id",
          "request": {
            "url": {
              "path": [
                "booking",
                "{{newBookingId}}"
              ],
              "host": [
                "{{RESTFULL_BOOKER_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e676f020-1592-41c5-9bb2-a209f776b2a8",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "913b668d-f1f5-4c5f-8fe1-8edec502a9f8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "eef0023a-9454-4ef2-be7e-6df7edab294b",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "678893e2-c7dd-43bd-a125-8f1b7d67c215"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "booking",
              "11"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "eb73af21-38f2-4988-9be5-ebc6a3d5296f",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "4dc448ca-4717-411b-941a-7ae6727678f7",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Cowboy"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "168"
            },
            {
              "key": "Etag",
              "value": "W/\"a8-p5uB2C7mxZA3HXJZF+tJCDJr8VE\""
            },
            {
              "key": "Date",
              "value": "Tue, 10 Dec 2019 08:15:55 GMT"
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              102,
              105,
              114,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              105,
              109,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              114,
              111,
              119,
              110,
              34,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              49,
              49,
              44,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              112,
              97,
              105,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              100,
              97,
              116,
              101,
              115,
              34,
              58,
              123,
              34,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              49,
              56,
              45,
              48,
              49,
              45,
              48,
              49,
              34,
              44,
              34,
              99,
              104,
              101,
              99,
              107,
              111,
              117,
              116,
              34,
              58,
              34,
              50,
              48,
              49,
              57,
              45,
              48,
              49,
              45,
              48,
              49,
              34,
              125,
              44,
              34,
              97,
              100,
              100,
              105,
              116,
              105,
              111,
              110,
              97,
              108,
              110,
              101,
              101,
              100,
              115,
              34,
              58,
              34,
              66,
              114,
              101,
              97,
              107,
              102,
              97,
              115,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 150,
          "responseSize": 168
        },
        "id": "65a2bd72-8b41-403f-bedb-0d89d7277dad",
        "assertions": [
          {
            "assertion": "Status code is 200 or 201",
            "skipped": false
          },
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "05829848-59cf-4d97-97cd-be687a11b3f0",
          "length": 15,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "1933b23c-92a0-4f14-90cb-5ba4a5670af3"
        },
        "item": {
          "id": "878d1402-585d-4e9d-a527-dcd785cb226c",
          "name": "update booking",
          "request": {
            "url": {
              "path": [
                "booking",
                "{{newBookingId}}"
              ],
              "host": [
                "{{RESTFULL_BOOKER_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "token={{token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2020-01-01\",\r\n        \"checkout\" : \"2020-01-10\"\r\n    },\r\n    \"additionalneeds\": \"none\"\r\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "74710eec-6fac-4f4e-9bf3-b18a2593595a",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "5f30e881-aa54-4e30-8ff8-7d25221861ca"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f4276e33-94a1-4d6c-a44f-b16be39655f7",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "9af16739-b619-4b7e-8e60-8965f323b814"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "booking",
              "11"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Cookie",
              "value": "token=e91a572fbe3710b"
            },
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c06d66a1-e922-4c83-90ba-c680df7ba694",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "content-length",
              "value": 243,
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2020-01-01\",\r\n        \"checkout\" : \"2020-01-10\"\r\n    },\r\n    \"additionalneeds\": \"none\"\r\n}"
          }
        },
        "response": {
          "id": "ce2dc676-022f-46eb-8674-b00711ae3314",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Cowboy"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "164"
            },
            {
              "key": "Etag",
              "value": "W/\"a4-yjpo4Io7He0qWi9HlIhkc365B84\""
            },
            {
              "key": "Date",
              "value": "Tue, 10 Dec 2019 08:15:55 GMT"
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              102,
              105,
              114,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              105,
              109,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              114,
              111,
              119,
              110,
              34,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              49,
              49,
              44,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              112,
              97,
              105,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              100,
              97,
              116,
              101,
              115,
              34,
              58,
              123,
              34,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              48,
              45,
              48,
              49,
              45,
              48,
              49,
              34,
              44,
              34,
              99,
              104,
              101,
              99,
              107,
              111,
              117,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              48,
              45,
              48,
              49,
              45,
              49,
              48,
              34,
              125,
              44,
              34,
              97,
              100,
              100,
              105,
              116,
              105,
              111,
              110,
              97,
              108,
              110,
              101,
              101,
              100,
              115,
              34,
              58,
              34,
              110,
              111,
              110,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 150,
          "responseSize": 164
        },
        "id": "878d1402-585d-4e9d-a527-dcd785cb226c",
        "assertions": [
          {
            "assertion": "Status code is 200 or 201",
            "skipped": false
          },
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "f0cef2e3-b083-43c8-bab7-ca282d0f89e5",
          "length": 15,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "9e10c957-a97a-4a40-a2d9-50a3bbb345c1"
        },
        "item": {
          "id": "b7859255-30ed-4c27-9de3-464330dc2147",
          "name": "partial update booking",
          "request": {
            "url": {
              "path": [
                "booking",
                "{{newBookingId}}"
              ],
              "host": [
                "{{RESTFULL_BOOKER_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "token={{token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\"\r\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e9de7d4f-41da-441f-ada1-8aab933530fd",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "94851d39-f8b9-47e9-89b7-7b1446fa9e7b"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "0820127e-398c-47f2-9eb7-89afa0762f3f",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "e4ad032f-e95a-495a-b697-7c36a8ebd642"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "booking",
              "11"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Cookie",
              "value": "token=e91a572fbe3710b"
            },
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2f2bd5d6-2227-46a8-9f53-8c890e3cc8ec",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "content-length",
              "value": 56,
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\"\r\n}"
          }
        },
        "response": {
          "id": "93cd60ca-b68c-4ef1-a63c-639f0ff244c6",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Cowboy"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "164"
            },
            {
              "key": "Etag",
              "value": "W/\"a4-yjpo4Io7He0qWi9HlIhkc365B84\""
            },
            {
              "key": "Date",
              "value": "Tue, 10 Dec 2019 08:15:56 GMT"
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              102,
              105,
              114,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              105,
              109,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              114,
              111,
              119,
              110,
              34,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              49,
              49,
              44,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              112,
              97,
              105,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              100,
              97,
              116,
              101,
              115,
              34,
              58,
              123,
              34,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              48,
              45,
              48,
              49,
              45,
              48,
              49,
              34,
              44,
              34,
              99,
              104,
              101,
              99,
              107,
              111,
              117,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              48,
              45,
              48,
              49,
              45,
              49,
              48,
              34,
              125,
              44,
              34,
              97,
              100,
              100,
              105,
              116,
              105,
              111,
              110,
              97,
              108,
              110,
              101,
              101,
              100,
              115,
              34,
              58,
              34,
              110,
              111,
              110,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 133,
          "responseSize": 164
        },
        "id": "b7859255-30ed-4c27-9de3-464330dc2147",
        "assertions": [
          {
            "assertion": "Status code is 200 or 201",
            "skipped": false
          },
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "1ab22b2b-b3c2-4a99-9912-a3b1f901321d",
          "length": 15,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "47ba10c8-d6f4-4c76-bb4d-d80f1e5a8c28"
        },
        "item": {
          "id": "e424ede3-6bc3-4fef-8ab8-6af8d3f30708",
          "name": "delete booking",
          "request": {
            "url": {
              "path": [
                "booking",
                "{{newBookingId}}"
              ],
              "host": [
                "{{RESTFULL_BOOKER_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "token={{token}}"
              }
            ],
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2020-01-01\",\r\n        \"checkout\" : \"2020-01-10\"\r\n    }\r\n}"
            },
            "auth": {
              "type": "basic",
              "basic": [
                {
                  "type": "string",
                  "value": "admin@rms.com",
                  "key": "username"
                },
                {
                  "type": "string",
                  "value": "P@ssword1",
                  "key": "password"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ff17718e-e2fe-400a-9ed7-be1b58e0129d",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "322d5b44-12e0-45fd-b424-990bba72a11f"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "edb1bea6-7b3a-4152-a8ad-c01e4a4b5d17",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "4e8f4d04-8555-43f9-ab14-5df96437ac2f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "booking",
              "11"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Cookie",
              "value": "token=e91a572fbe3710b"
            },
            {
              "key": "Authorization",
              "value": "Basic YWRtaW5Acm1zLmNvbTpQQHNzd29yZDE=",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6932873c-0bbc-42a0-a29f-c6b0958219e8",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "content-length",
              "value": 210,
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2020-01-01\",\r\n        \"checkout\" : \"2020-01-10\"\r\n    }\r\n}"
          },
          "auth": {
            "type": "basic",
            "basic": [
              {
                "type": "string",
                "value": "admin@rms.com",
                "key": "username"
              },
              {
                "type": "string",
                "value": "P@ssword1",
                "key": "password"
              }
            ]
          }
        },
        "response": {
          "id": "7cbcbb9c-b5af-4f32-bcd2-2cba3216fbc8",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Server",
              "value": "Cowboy"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "text/plain; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "7"
            },
            {
              "key": "Etag",
              "value": "W/\"7-rM9AyJuqT6iOan/xHh+AW+7K/T8\""
            },
            {
              "key": "Date",
              "value": "Tue, 10 Dec 2019 08:15:56 GMT"
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              67,
              114,
              101,
              97,
              116,
              101,
              100
            ]
          },
          "cookie": [],
          "responseTime": 155,
          "responseSize": 7
        },
        "id": "e424ede3-6bc3-4fef-8ab8-6af8d3f30708",
        "assertions": [
          {
            "assertion": "Status code is 200 or 201",
            "skipped": false
          },
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 2247
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 500",
          "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "2ece2f5d7ed84fcfaec0aac892fc236c",
          "id": "f7296f98-5a96-43a7-bfc8-e03795b8e655",
          "timestamp": 1575965751448,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "fa3a44d2-4da1-40dd-ad12-f92f2f166cf5",
          "name": "500 Internal Server Error",
          "request": {
            "url": {
              "path": [
                "status",
                "500"
              ],
              "host": [
                "{{POSTMAN_ECHO_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', ",
                  "    () =>pm.response.to.have.status(200)",
                  ");"
                ],
                "_lastExecutionId": "b7e87bec-79da-47d2-9ff9-6e77fe8d6a4b"
              }
            }
          ]
        },
        "parent": {
          "id": "caf14d1a-fa2f-4889-80ec-3b40743b07c8",
          "name": "ECHO_SERVICE",
          "description": {
            "content": "https://docs.postman-echo.com/",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "eb909c52-4a02-4762-94d0-da504ab75d24",
              "name": "setup & utils",
              "request": {
                "url": {
                  "protocol": "https",
                  "host": [
                    "www",
                    "google",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "HEAD",
                "body": {
                  "mode": "raw",
                  "raw": "{ \n\t\"name\": \"mark\", \n\t\"age\": 51, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n\t\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log(`'${pm.info.requestName}' Request Pre-request Script`);",
                      "",
                      "pm.globals.clear();",
                      "",
                      "const deepTest = expected => actual => (prefix = 'object') => testFunction => {        ",
                      "    ",
                      "    if (typeof expected !== 'object' || expected === null){",
                      "        testFunction(expected, actual, prefix);",
                      "        return;",
                      "    }",
                      "",
                      "    if (Array.isArray(expected)){                     ",
                      "        expected.forEach((element, index) => ",
                      "            deepTest(expected[index])(actual[index])(`${prefix}[${index}]`)(testFunction)",
                      "        );",
                      "        return;",
                      "    }",
                      "",
                      "    if (typeof expected === 'object'){          ",
                      "        Object.keys(expected).forEach(key => ",
                      "            deepTest(expected[key])(actual[key])(`${prefix}.${key}`)(testFunction)",
                      "        );            ",
                      "        return;",
                      "    }",
                      "};",
                      "",
                      "const testFunction = (expected, actual, prefix) =>",
                      "    pm.test(`Validate ${prefix}`, () => pm.expect(expected).eql(actual));",
                      "",
                      "const prettify = json => JSON.stringify(json, null, 2);",
                      "",
                      "const getHeader = (pm, headerName) => {",
                      "    const header = pm.response.headers.find(header => header.key == headerName); ",
                      "    return header ? header.value : undefined;",
                      "}",
                      "",
                      "// SAVE FUCTIONALITY FOR REUSE",
                      "postman.setGlobalVariable('deepTest', deepTest);",
                      "//globals.deepTest = deepTest;  // this does not work",
                      "postman.setGlobalVariable('testFunction', testFunction);",
                      "postman.setGlobalVariable('prettify', prettify);",
                      "postman.setGlobalVariable('getHeader', getHeader);",
                      "",
                      "/* Usage within other sripts",
                      "// i.e.",
                      "const expectedUser = { name: \"mark\", age: 50, isAdmin: true };",
                      "const actualUser = { name: \"mark\", age: 51, isAdmin: false };",
                      "const deepTest = eval(globals.deepTest);",
                      "// or const deepTest = eval(postman.getGlobalVariable('deepTest'));",
                      "const testFunction = eval(globals.testFunction);",
                      "deepTest(expectedUser)(actualUser)('Validate user')(testFunction);",
                      "*/",
                      ""
                    ],
                    "_lastExecutionId": "f25e6f36-46a1-4099-9764-a06652372a47"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log(`'${pm.info.requestName}' Request Tests`);"
                    ],
                    "_lastExecutionId": "2b302092-f511-41a1-84de-afcd77452f28"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "fa3a44d2-4da1-40dd-ad12-f92f2f166cf5",
              "name": "500 Internal Server Error",
              "request": {
                "url": {
                  "path": [
                    "status",
                    "500"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', ",
                      "    () =>pm.response.to.have.status(200)",
                      ");"
                    ],
                    "_lastExecutionId": "b7e87bec-79da-47d2-9ff9-6e77fe8d6a4b"
                  }
                }
              ]
            },
            {
              "id": "10f2d182-a7ab-4436-89e2-299bff346e50",
              "name": "local IP",
              "request": {
                "url": {
                  "path": [
                    "ip"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', ",
                      "    () => pm.response.to.have.status(200)",
                      ");",
                      "",
                      "pm.test('Response JSON \"ip\" property matches an IP Regex',",
                      "    () => {",
                      "        const ip = pm.response.json().ip;",
                      "        console.log(`ip: ${ip}`);",
                      "        ",
                      "        const ipMatcherRegex = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/;",
                      "        ",
                      "        pm.expect(ip).to.match(ipMatcherRegex);",
                      "    }",
                      ");"
                    ],
                    "_lastExecutionId": "176caf6e-1b7c-4f15-8c2a-55b82bedafd2"
                  }
                }
              ]
            },
            {
              "id": "f120bbce-4e42-424d-9d46-f3c977f54969",
              "name": "JSON body",
              "request": {
                "url": {
                  "path": [
                    "post"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \n\t\"name\": \"Mark Johnson\", \n\t\"age\": 31, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "5c0286dd-c9ed-4ac1-87b9-e97974bddd31"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "const expectedUser = { ",
                      "    name: \"Mark Johnson\", ",
                      "    age: 50, ",
                      "    isAdmin: true, ",
                      "    resourceIds: [1111, 1112, 1113] ",
                      "    ",
                      "}; // wrong age and resourcesIds[1]",
                      "",
                      "const actualUser = pm.response.json().json;",
                      "",
                      "// Chai deep equal assertion",
                      "pm.test('Validate user (deep equal)', () => pm.expect(expectedUser).to.eql(actualUser));",
                      "",
                      "// Enhanced verification - one test / value",
                      "const deepTest = eval(globals.deepTest);",
                      "const testFunction = eval(globals.testFunction);",
                      "deepTest(expectedUser)(actualUser)('user')(testFunction);",
                      "",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "0744d3a4-d288-4180-821b-4bbc183a3c5d"
                  }
                }
              ]
            },
            {
              "id": "fe166fca-9b67-4ba7-a346-4140a37dbff4",
              "name": "query string parameters",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "post"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "company",
                      "value": "nagarro"
                    },
                    {
                      "key": "location",
                      "value": "timisoara"
                    },
                    {
                      "key": "department",
                      "value": "qa"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "bb2d1149-14fb-48a2-a69a-2821ee927cad"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "const expectedArgs = {",
                      "        \"company\": \"nagarro\",",
                      "        \"location\": \"timisoara\",",
                      "        \"department\": \"qa\"",
                      "    };",
                      "const actualArgs = pm.response.json().args;",
                      "",
                      "const deepTest = eval(globals.deepTest);",
                      "const testFunction = eval(globals.testFunction);",
                      "",
                      "deepTest(expectedArgs)(actualArgs)('args')(testFunction);"
                    ],
                    "_lastExecutionId": "9df9aec6-1717-49c5-9f09-cb18cc00d8e7"
                  }
                }
              ]
            },
            {
              "id": "21da0627-bf8c-420a-8773-718019c52d6a",
              "name": "form data",
              "request": {
                "url": {
                  "path": [
                    "post"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "email",
                      "value": "danginkgo@yahoo.com",
                      "type": "text"
                    },
                    {
                      "key": "username",
                      "value": "danrusu",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "ad8ccfae-382e-4b84-b9a2-261cbb9ea113"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "const expectedForm = {",
                      "    \"email\": \"danginkgo@yahoo.com\",",
                      "    \"username\": \"danrusu\"",
                      "};",
                      "const actualForm = pm.response.json().form;",
                      "",
                      "const deepTest = eval(globals.deepTest);",
                      "const testFunction = eval(globals.testFunction);",
                      "",
                      "deepTest(expectedForm)(actualForm)('form')(testFunction);"
                    ],
                    "_lastExecutionId": "f3d43edb-3d34-4fd6-8ba6-fc06ce32da14"
                  }
                }
              ]
            },
            {
              "id": "6640c4f8-deb4-4fb6-b4dd-3ec97e005511",
              "name": "delay 2s",
              "request": {
                "url": {
                  "path": [
                    "delay",
                    "2"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                    "type": "text/javascript",
                    "exec": [
                      "const getHeader = eval(globals.getHeader);",
                      "const prettify = eval(globals.prettify);",
                      "",
                      "pm.test('Status code is 200', ",
                      "    () =>pm.response.to.have.status(200)",
                      ");",
                      "",
                      "pm.test('Status code name is OK',",
                      "    () => pm.response.to.have.status(\"OK\")",
                      ");",
                      "",
                      "pm.test('Response time is above 2000ms', ",
                      "    () => pm.expect(pm.response.responseTime).to.be.above(2000)",
                      ");",
                      "",
                      "pm.test('Response body size is 13 B',",
                      "    () => {",
                      "        //const bodySize = pm.response.responseSize;",
                      "        console.log(`Headers ${prettify(pm.response.headers, null, 2)}`);",
                      "        const contentLength = parseInt(getHeader(pm, 'Content-Length'));",
                      "        pm.expect(contentLength).to.eql(13);",
                      "    }",
                      ");",
                      "",
                      "pm.test('Response delay is 2', ",
                      "    () =>  pm.expect(pm.response.json().delay).to.eql(\"2\")",
                      ");",
                      ""
                    ],
                    "_lastExecutionId": "71c71f88-209f-4780-ae83-44c5fb397297"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "95db2334-dde7-4ab9-844d-addde171276c",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('ECHO_SERVICE FOLDER Pre-request Scripts');",
                  ""
                ],
                "_lastExecutionId": "96f1c171-e024-4c63-b7d0-9fcad89e1f4d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "bdadc87d-58fe-4342-bf95-793beec688c0",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('ECHO_SERVICE Folder Tests');"
                ],
                "_lastExecutionId": "39fed8c6-3483-4e45-a3b8-18262ef1ad69"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "cursor": {
          "ref": "6437a5e3-1954-4e2f-a413-88c81771c82c",
          "length": 15,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d5cb9fdb-ced5-4bba-aebe-cf9cb78259f4",
          "scriptId": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
          "execution": "b7e87bec-79da-47d2-9ff9-6e77fe8d6a4b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Validate user (deep equal)",
          "message": "expected { Object (name, age, ...) } to deeply equal { Object (name, age, ...) }",
          "stack": "AssertionError: expected { Object (name, age, ...) } to deeply equal { Object (name, age, ...) }\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "8794bdd570c4db9732c5dd86af478df1",
          "id": "01ee88ca-bd90-4cd8-b412-68eecf362e93",
          "timestamp": 1575965751886,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "f120bbce-4e42-424d-9d46-f3c977f54969",
          "name": "JSON body",
          "request": {
            "url": {
              "path": [
                "post"
              ],
              "host": [
                "{{POSTMAN_ECHO_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{ \n\t\"name\": \"Mark Johnson\", \n\t\"age\": 31, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "5c0286dd-c9ed-4ac1-87b9-e97974bddd31"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                "type": "text/javascript",
                "exec": [
                  "const expectedUser = { ",
                  "    name: \"Mark Johnson\", ",
                  "    age: 50, ",
                  "    isAdmin: true, ",
                  "    resourceIds: [1111, 1112, 1113] ",
                  "    ",
                  "}; // wrong age and resourcesIds[1]",
                  "",
                  "const actualUser = pm.response.json().json;",
                  "",
                  "// Chai deep equal assertion",
                  "pm.test('Validate user (deep equal)', () => pm.expect(expectedUser).to.eql(actualUser));",
                  "",
                  "// Enhanced verification - one test / value",
                  "const deepTest = eval(globals.deepTest);",
                  "const testFunction = eval(globals.testFunction);",
                  "deepTest(expectedUser)(actualUser)('user')(testFunction);",
                  "",
                  "",
                  ""
                ],
                "_lastExecutionId": "0744d3a4-d288-4180-821b-4bbc183a3c5d"
              }
            }
          ]
        },
        "parent": {
          "id": "caf14d1a-fa2f-4889-80ec-3b40743b07c8",
          "name": "ECHO_SERVICE",
          "description": {
            "content": "https://docs.postman-echo.com/",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "eb909c52-4a02-4762-94d0-da504ab75d24",
              "name": "setup & utils",
              "request": {
                "url": {
                  "protocol": "https",
                  "host": [
                    "www",
                    "google",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "HEAD",
                "body": {
                  "mode": "raw",
                  "raw": "{ \n\t\"name\": \"mark\", \n\t\"age\": 51, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n\t\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log(`'${pm.info.requestName}' Request Pre-request Script`);",
                      "",
                      "pm.globals.clear();",
                      "",
                      "const deepTest = expected => actual => (prefix = 'object') => testFunction => {        ",
                      "    ",
                      "    if (typeof expected !== 'object' || expected === null){",
                      "        testFunction(expected, actual, prefix);",
                      "        return;",
                      "    }",
                      "",
                      "    if (Array.isArray(expected)){                     ",
                      "        expected.forEach((element, index) => ",
                      "            deepTest(expected[index])(actual[index])(`${prefix}[${index}]`)(testFunction)",
                      "        );",
                      "        return;",
                      "    }",
                      "",
                      "    if (typeof expected === 'object'){          ",
                      "        Object.keys(expected).forEach(key => ",
                      "            deepTest(expected[key])(actual[key])(`${prefix}.${key}`)(testFunction)",
                      "        );            ",
                      "        return;",
                      "    }",
                      "};",
                      "",
                      "const testFunction = (expected, actual, prefix) =>",
                      "    pm.test(`Validate ${prefix}`, () => pm.expect(expected).eql(actual));",
                      "",
                      "const prettify = json => JSON.stringify(json, null, 2);",
                      "",
                      "const getHeader = (pm, headerName) => {",
                      "    const header = pm.response.headers.find(header => header.key == headerName); ",
                      "    return header ? header.value : undefined;",
                      "}",
                      "",
                      "// SAVE FUCTIONALITY FOR REUSE",
                      "postman.setGlobalVariable('deepTest', deepTest);",
                      "//globals.deepTest = deepTest;  // this does not work",
                      "postman.setGlobalVariable('testFunction', testFunction);",
                      "postman.setGlobalVariable('prettify', prettify);",
                      "postman.setGlobalVariable('getHeader', getHeader);",
                      "",
                      "/* Usage within other sripts",
                      "// i.e.",
                      "const expectedUser = { name: \"mark\", age: 50, isAdmin: true };",
                      "const actualUser = { name: \"mark\", age: 51, isAdmin: false };",
                      "const deepTest = eval(globals.deepTest);",
                      "// or const deepTest = eval(postman.getGlobalVariable('deepTest'));",
                      "const testFunction = eval(globals.testFunction);",
                      "deepTest(expectedUser)(actualUser)('Validate user')(testFunction);",
                      "*/",
                      ""
                    ],
                    "_lastExecutionId": "f25e6f36-46a1-4099-9764-a06652372a47"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log(`'${pm.info.requestName}' Request Tests`);"
                    ],
                    "_lastExecutionId": "2b302092-f511-41a1-84de-afcd77452f28"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "fa3a44d2-4da1-40dd-ad12-f92f2f166cf5",
              "name": "500 Internal Server Error",
              "request": {
                "url": {
                  "path": [
                    "status",
                    "500"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', ",
                      "    () =>pm.response.to.have.status(200)",
                      ");"
                    ],
                    "_lastExecutionId": "b7e87bec-79da-47d2-9ff9-6e77fe8d6a4b"
                  }
                }
              ]
            },
            {
              "id": "10f2d182-a7ab-4436-89e2-299bff346e50",
              "name": "local IP",
              "request": {
                "url": {
                  "path": [
                    "ip"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', ",
                      "    () => pm.response.to.have.status(200)",
                      ");",
                      "",
                      "pm.test('Response JSON \"ip\" property matches an IP Regex',",
                      "    () => {",
                      "        const ip = pm.response.json().ip;",
                      "        console.log(`ip: ${ip}`);",
                      "        ",
                      "        const ipMatcherRegex = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/;",
                      "        ",
                      "        pm.expect(ip).to.match(ipMatcherRegex);",
                      "    }",
                      ");"
                    ],
                    "_lastExecutionId": "176caf6e-1b7c-4f15-8c2a-55b82bedafd2"
                  }
                }
              ]
            },
            {
              "id": "f120bbce-4e42-424d-9d46-f3c977f54969",
              "name": "JSON body",
              "request": {
                "url": {
                  "path": [
                    "post"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \n\t\"name\": \"Mark Johnson\", \n\t\"age\": 31, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "5c0286dd-c9ed-4ac1-87b9-e97974bddd31"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "const expectedUser = { ",
                      "    name: \"Mark Johnson\", ",
                      "    age: 50, ",
                      "    isAdmin: true, ",
                      "    resourceIds: [1111, 1112, 1113] ",
                      "    ",
                      "}; // wrong age and resourcesIds[1]",
                      "",
                      "const actualUser = pm.response.json().json;",
                      "",
                      "// Chai deep equal assertion",
                      "pm.test('Validate user (deep equal)', () => pm.expect(expectedUser).to.eql(actualUser));",
                      "",
                      "// Enhanced verification - one test / value",
                      "const deepTest = eval(globals.deepTest);",
                      "const testFunction = eval(globals.testFunction);",
                      "deepTest(expectedUser)(actualUser)('user')(testFunction);",
                      "",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "0744d3a4-d288-4180-821b-4bbc183a3c5d"
                  }
                }
              ]
            },
            {
              "id": "fe166fca-9b67-4ba7-a346-4140a37dbff4",
              "name": "query string parameters",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "post"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "company",
                      "value": "nagarro"
                    },
                    {
                      "key": "location",
                      "value": "timisoara"
                    },
                    {
                      "key": "department",
                      "value": "qa"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "bb2d1149-14fb-48a2-a69a-2821ee927cad"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "const expectedArgs = {",
                      "        \"company\": \"nagarro\",",
                      "        \"location\": \"timisoara\",",
                      "        \"department\": \"qa\"",
                      "    };",
                      "const actualArgs = pm.response.json().args;",
                      "",
                      "const deepTest = eval(globals.deepTest);",
                      "const testFunction = eval(globals.testFunction);",
                      "",
                      "deepTest(expectedArgs)(actualArgs)('args')(testFunction);"
                    ],
                    "_lastExecutionId": "9df9aec6-1717-49c5-9f09-cb18cc00d8e7"
                  }
                }
              ]
            },
            {
              "id": "21da0627-bf8c-420a-8773-718019c52d6a",
              "name": "form data",
              "request": {
                "url": {
                  "path": [
                    "post"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "email",
                      "value": "danginkgo@yahoo.com",
                      "type": "text"
                    },
                    {
                      "key": "username",
                      "value": "danrusu",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "ad8ccfae-382e-4b84-b9a2-261cbb9ea113"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "const expectedForm = {",
                      "    \"email\": \"danginkgo@yahoo.com\",",
                      "    \"username\": \"danrusu\"",
                      "};",
                      "const actualForm = pm.response.json().form;",
                      "",
                      "const deepTest = eval(globals.deepTest);",
                      "const testFunction = eval(globals.testFunction);",
                      "",
                      "deepTest(expectedForm)(actualForm)('form')(testFunction);"
                    ],
                    "_lastExecutionId": "f3d43edb-3d34-4fd6-8ba6-fc06ce32da14"
                  }
                }
              ]
            },
            {
              "id": "6640c4f8-deb4-4fb6-b4dd-3ec97e005511",
              "name": "delay 2s",
              "request": {
                "url": {
                  "path": [
                    "delay",
                    "2"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                    "type": "text/javascript",
                    "exec": [
                      "const getHeader = eval(globals.getHeader);",
                      "const prettify = eval(globals.prettify);",
                      "",
                      "pm.test('Status code is 200', ",
                      "    () =>pm.response.to.have.status(200)",
                      ");",
                      "",
                      "pm.test('Status code name is OK',",
                      "    () => pm.response.to.have.status(\"OK\")",
                      ");",
                      "",
                      "pm.test('Response time is above 2000ms', ",
                      "    () => pm.expect(pm.response.responseTime).to.be.above(2000)",
                      ");",
                      "",
                      "pm.test('Response body size is 13 B',",
                      "    () => {",
                      "        //const bodySize = pm.response.responseSize;",
                      "        console.log(`Headers ${prettify(pm.response.headers, null, 2)}`);",
                      "        const contentLength = parseInt(getHeader(pm, 'Content-Length'));",
                      "        pm.expect(contentLength).to.eql(13);",
                      "    }",
                      ");",
                      "",
                      "pm.test('Response delay is 2', ",
                      "    () =>  pm.expect(pm.response.json().delay).to.eql(\"2\")",
                      ");",
                      ""
                    ],
                    "_lastExecutionId": "71c71f88-209f-4780-ae83-44c5fb397297"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "95db2334-dde7-4ab9-844d-addde171276c",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('ECHO_SERVICE FOLDER Pre-request Scripts');",
                  ""
                ],
                "_lastExecutionId": "96f1c171-e024-4c63-b7d0-9fcad89e1f4d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "bdadc87d-58fe-4342-bf95-793beec688c0",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('ECHO_SERVICE Folder Tests');"
                ],
                "_lastExecutionId": "39fed8c6-3483-4e45-a3b8-18262ef1ad69"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "cursor": {
          "ref": "40d39659-27cb-43e2-9721-59a0ea9d1c2d",
          "length": 15,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d8eece50-ac92-42c2-9004-5ae59b4eb133",
          "scriptId": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
          "execution": "0744d3a4-d288-4180-821b-4bbc183a3c5d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Validate user.age",
          "message": "expected 50 to deeply equal 31",
          "stack": "AssertionError: expected 50 to deeply equal 31\n   at Object.eval sandbox-script.js:3:4)",
          "checksum": "d6336bc9ea95cefa7599e7966465deee",
          "id": "289ffdfc-4cfb-46af-b9d8-64e33517fe99",
          "timestamp": 1575965751887,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "f120bbce-4e42-424d-9d46-f3c977f54969",
          "name": "JSON body",
          "request": {
            "url": {
              "path": [
                "post"
              ],
              "host": [
                "{{POSTMAN_ECHO_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{ \n\t\"name\": \"Mark Johnson\", \n\t\"age\": 31, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "5c0286dd-c9ed-4ac1-87b9-e97974bddd31"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                "type": "text/javascript",
                "exec": [
                  "const expectedUser = { ",
                  "    name: \"Mark Johnson\", ",
                  "    age: 50, ",
                  "    isAdmin: true, ",
                  "    resourceIds: [1111, 1112, 1113] ",
                  "    ",
                  "}; // wrong age and resourcesIds[1]",
                  "",
                  "const actualUser = pm.response.json().json;",
                  "",
                  "// Chai deep equal assertion",
                  "pm.test('Validate user (deep equal)', () => pm.expect(expectedUser).to.eql(actualUser));",
                  "",
                  "// Enhanced verification - one test / value",
                  "const deepTest = eval(globals.deepTest);",
                  "const testFunction = eval(globals.testFunction);",
                  "deepTest(expectedUser)(actualUser)('user')(testFunction);",
                  "",
                  "",
                  ""
                ],
                "_lastExecutionId": "0744d3a4-d288-4180-821b-4bbc183a3c5d"
              }
            }
          ]
        },
        "parent": {
          "id": "caf14d1a-fa2f-4889-80ec-3b40743b07c8",
          "name": "ECHO_SERVICE",
          "description": {
            "content": "https://docs.postman-echo.com/",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "eb909c52-4a02-4762-94d0-da504ab75d24",
              "name": "setup & utils",
              "request": {
                "url": {
                  "protocol": "https",
                  "host": [
                    "www",
                    "google",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "HEAD",
                "body": {
                  "mode": "raw",
                  "raw": "{ \n\t\"name\": \"mark\", \n\t\"age\": 51, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n\t\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log(`'${pm.info.requestName}' Request Pre-request Script`);",
                      "",
                      "pm.globals.clear();",
                      "",
                      "const deepTest = expected => actual => (prefix = 'object') => testFunction => {        ",
                      "    ",
                      "    if (typeof expected !== 'object' || expected === null){",
                      "        testFunction(expected, actual, prefix);",
                      "        return;",
                      "    }",
                      "",
                      "    if (Array.isArray(expected)){                     ",
                      "        expected.forEach((element, index) => ",
                      "            deepTest(expected[index])(actual[index])(`${prefix}[${index}]`)(testFunction)",
                      "        );",
                      "        return;",
                      "    }",
                      "",
                      "    if (typeof expected === 'object'){          ",
                      "        Object.keys(expected).forEach(key => ",
                      "            deepTest(expected[key])(actual[key])(`${prefix}.${key}`)(testFunction)",
                      "        );            ",
                      "        return;",
                      "    }",
                      "};",
                      "",
                      "const testFunction = (expected, actual, prefix) =>",
                      "    pm.test(`Validate ${prefix}`, () => pm.expect(expected).eql(actual));",
                      "",
                      "const prettify = json => JSON.stringify(json, null, 2);",
                      "",
                      "const getHeader = (pm, headerName) => {",
                      "    const header = pm.response.headers.find(header => header.key == headerName); ",
                      "    return header ? header.value : undefined;",
                      "}",
                      "",
                      "// SAVE FUCTIONALITY FOR REUSE",
                      "postman.setGlobalVariable('deepTest', deepTest);",
                      "//globals.deepTest = deepTest;  // this does not work",
                      "postman.setGlobalVariable('testFunction', testFunction);",
                      "postman.setGlobalVariable('prettify', prettify);",
                      "postman.setGlobalVariable('getHeader', getHeader);",
                      "",
                      "/* Usage within other sripts",
                      "// i.e.",
                      "const expectedUser = { name: \"mark\", age: 50, isAdmin: true };",
                      "const actualUser = { name: \"mark\", age: 51, isAdmin: false };",
                      "const deepTest = eval(globals.deepTest);",
                      "// or const deepTest = eval(postman.getGlobalVariable('deepTest'));",
                      "const testFunction = eval(globals.testFunction);",
                      "deepTest(expectedUser)(actualUser)('Validate user')(testFunction);",
                      "*/",
                      ""
                    ],
                    "_lastExecutionId": "f25e6f36-46a1-4099-9764-a06652372a47"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log(`'${pm.info.requestName}' Request Tests`);"
                    ],
                    "_lastExecutionId": "2b302092-f511-41a1-84de-afcd77452f28"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "fa3a44d2-4da1-40dd-ad12-f92f2f166cf5",
              "name": "500 Internal Server Error",
              "request": {
                "url": {
                  "path": [
                    "status",
                    "500"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', ",
                      "    () =>pm.response.to.have.status(200)",
                      ");"
                    ],
                    "_lastExecutionId": "b7e87bec-79da-47d2-9ff9-6e77fe8d6a4b"
                  }
                }
              ]
            },
            {
              "id": "10f2d182-a7ab-4436-89e2-299bff346e50",
              "name": "local IP",
              "request": {
                "url": {
                  "path": [
                    "ip"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', ",
                      "    () => pm.response.to.have.status(200)",
                      ");",
                      "",
                      "pm.test('Response JSON \"ip\" property matches an IP Regex',",
                      "    () => {",
                      "        const ip = pm.response.json().ip;",
                      "        console.log(`ip: ${ip}`);",
                      "        ",
                      "        const ipMatcherRegex = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/;",
                      "        ",
                      "        pm.expect(ip).to.match(ipMatcherRegex);",
                      "    }",
                      ");"
                    ],
                    "_lastExecutionId": "176caf6e-1b7c-4f15-8c2a-55b82bedafd2"
                  }
                }
              ]
            },
            {
              "id": "f120bbce-4e42-424d-9d46-f3c977f54969",
              "name": "JSON body",
              "request": {
                "url": {
                  "path": [
                    "post"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \n\t\"name\": \"Mark Johnson\", \n\t\"age\": 31, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "5c0286dd-c9ed-4ac1-87b9-e97974bddd31"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "const expectedUser = { ",
                      "    name: \"Mark Johnson\", ",
                      "    age: 50, ",
                      "    isAdmin: true, ",
                      "    resourceIds: [1111, 1112, 1113] ",
                      "    ",
                      "}; // wrong age and resourcesIds[1]",
                      "",
                      "const actualUser = pm.response.json().json;",
                      "",
                      "// Chai deep equal assertion",
                      "pm.test('Validate user (deep equal)', () => pm.expect(expectedUser).to.eql(actualUser));",
                      "",
                      "// Enhanced verification - one test / value",
                      "const deepTest = eval(globals.deepTest);",
                      "const testFunction = eval(globals.testFunction);",
                      "deepTest(expectedUser)(actualUser)('user')(testFunction);",
                      "",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "0744d3a4-d288-4180-821b-4bbc183a3c5d"
                  }
                }
              ]
            },
            {
              "id": "fe166fca-9b67-4ba7-a346-4140a37dbff4",
              "name": "query string parameters",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "post"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "company",
                      "value": "nagarro"
                    },
                    {
                      "key": "location",
                      "value": "timisoara"
                    },
                    {
                      "key": "department",
                      "value": "qa"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "bb2d1149-14fb-48a2-a69a-2821ee927cad"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "const expectedArgs = {",
                      "        \"company\": \"nagarro\",",
                      "        \"location\": \"timisoara\",",
                      "        \"department\": \"qa\"",
                      "    };",
                      "const actualArgs = pm.response.json().args;",
                      "",
                      "const deepTest = eval(globals.deepTest);",
                      "const testFunction = eval(globals.testFunction);",
                      "",
                      "deepTest(expectedArgs)(actualArgs)('args')(testFunction);"
                    ],
                    "_lastExecutionId": "9df9aec6-1717-49c5-9f09-cb18cc00d8e7"
                  }
                }
              ]
            },
            {
              "id": "21da0627-bf8c-420a-8773-718019c52d6a",
              "name": "form data",
              "request": {
                "url": {
                  "path": [
                    "post"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "email",
                      "value": "danginkgo@yahoo.com",
                      "type": "text"
                    },
                    {
                      "key": "username",
                      "value": "danrusu",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "ad8ccfae-382e-4b84-b9a2-261cbb9ea113"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "const expectedForm = {",
                      "    \"email\": \"danginkgo@yahoo.com\",",
                      "    \"username\": \"danrusu\"",
                      "};",
                      "const actualForm = pm.response.json().form;",
                      "",
                      "const deepTest = eval(globals.deepTest);",
                      "const testFunction = eval(globals.testFunction);",
                      "",
                      "deepTest(expectedForm)(actualForm)('form')(testFunction);"
                    ],
                    "_lastExecutionId": "f3d43edb-3d34-4fd6-8ba6-fc06ce32da14"
                  }
                }
              ]
            },
            {
              "id": "6640c4f8-deb4-4fb6-b4dd-3ec97e005511",
              "name": "delay 2s",
              "request": {
                "url": {
                  "path": [
                    "delay",
                    "2"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                    "type": "text/javascript",
                    "exec": [
                      "const getHeader = eval(globals.getHeader);",
                      "const prettify = eval(globals.prettify);",
                      "",
                      "pm.test('Status code is 200', ",
                      "    () =>pm.response.to.have.status(200)",
                      ");",
                      "",
                      "pm.test('Status code name is OK',",
                      "    () => pm.response.to.have.status(\"OK\")",
                      ");",
                      "",
                      "pm.test('Response time is above 2000ms', ",
                      "    () => pm.expect(pm.response.responseTime).to.be.above(2000)",
                      ");",
                      "",
                      "pm.test('Response body size is 13 B',",
                      "    () => {",
                      "        //const bodySize = pm.response.responseSize;",
                      "        console.log(`Headers ${prettify(pm.response.headers, null, 2)}`);",
                      "        const contentLength = parseInt(getHeader(pm, 'Content-Length'));",
                      "        pm.expect(contentLength).to.eql(13);",
                      "    }",
                      ");",
                      "",
                      "pm.test('Response delay is 2', ",
                      "    () =>  pm.expect(pm.response.json().delay).to.eql(\"2\")",
                      ");",
                      ""
                    ],
                    "_lastExecutionId": "71c71f88-209f-4780-ae83-44c5fb397297"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "95db2334-dde7-4ab9-844d-addde171276c",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('ECHO_SERVICE FOLDER Pre-request Scripts');",
                  ""
                ],
                "_lastExecutionId": "96f1c171-e024-4c63-b7d0-9fcad89e1f4d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "bdadc87d-58fe-4342-bf95-793beec688c0",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('ECHO_SERVICE Folder Tests');"
                ],
                "_lastExecutionId": "39fed8c6-3483-4e45-a3b8-18262ef1ad69"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "cursor": {
          "ref": "40d39659-27cb-43e2-9721-59a0ea9d1c2d",
          "length": 15,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d8eece50-ac92-42c2-9004-5ae59b4eb133",
          "scriptId": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
          "execution": "0744d3a4-d288-4180-821b-4bbc183a3c5d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 5,
          "test": "Validate user.resourceIds[1]",
          "message": "expected 1112 to deeply equal 1110",
          "stack": "AssertionError: expected 1112 to deeply equal 1110\n   at Object.eval sandbox-script.js:6:4)",
          "checksum": "38ce7dcc7dab442081096af6de7b8fbf",
          "id": "c2f9a913-048e-4baa-864d-61b94d57a9e8",
          "timestamp": 1575965751888,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 6,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:5 in test-script",
        "source": {
          "id": "f120bbce-4e42-424d-9d46-f3c977f54969",
          "name": "JSON body",
          "request": {
            "url": {
              "path": [
                "post"
              ],
              "host": [
                "{{POSTMAN_ECHO_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{ \n\t\"name\": \"Mark Johnson\", \n\t\"age\": 31, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "5c0286dd-c9ed-4ac1-87b9-e97974bddd31"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                "type": "text/javascript",
                "exec": [
                  "const expectedUser = { ",
                  "    name: \"Mark Johnson\", ",
                  "    age: 50, ",
                  "    isAdmin: true, ",
                  "    resourceIds: [1111, 1112, 1113] ",
                  "    ",
                  "}; // wrong age and resourcesIds[1]",
                  "",
                  "const actualUser = pm.response.json().json;",
                  "",
                  "// Chai deep equal assertion",
                  "pm.test('Validate user (deep equal)', () => pm.expect(expectedUser).to.eql(actualUser));",
                  "",
                  "// Enhanced verification - one test / value",
                  "const deepTest = eval(globals.deepTest);",
                  "const testFunction = eval(globals.testFunction);",
                  "deepTest(expectedUser)(actualUser)('user')(testFunction);",
                  "",
                  "",
                  ""
                ],
                "_lastExecutionId": "0744d3a4-d288-4180-821b-4bbc183a3c5d"
              }
            }
          ]
        },
        "parent": {
          "id": "caf14d1a-fa2f-4889-80ec-3b40743b07c8",
          "name": "ECHO_SERVICE",
          "description": {
            "content": "https://docs.postman-echo.com/",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "eb909c52-4a02-4762-94d0-da504ab75d24",
              "name": "setup & utils",
              "request": {
                "url": {
                  "protocol": "https",
                  "host": [
                    "www",
                    "google",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "HEAD",
                "body": {
                  "mode": "raw",
                  "raw": "{ \n\t\"name\": \"mark\", \n\t\"age\": 51, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n\t\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log(`'${pm.info.requestName}' Request Pre-request Script`);",
                      "",
                      "pm.globals.clear();",
                      "",
                      "const deepTest = expected => actual => (prefix = 'object') => testFunction => {        ",
                      "    ",
                      "    if (typeof expected !== 'object' || expected === null){",
                      "        testFunction(expected, actual, prefix);",
                      "        return;",
                      "    }",
                      "",
                      "    if (Array.isArray(expected)){                     ",
                      "        expected.forEach((element, index) => ",
                      "            deepTest(expected[index])(actual[index])(`${prefix}[${index}]`)(testFunction)",
                      "        );",
                      "        return;",
                      "    }",
                      "",
                      "    if (typeof expected === 'object'){          ",
                      "        Object.keys(expected).forEach(key => ",
                      "            deepTest(expected[key])(actual[key])(`${prefix}.${key}`)(testFunction)",
                      "        );            ",
                      "        return;",
                      "    }",
                      "};",
                      "",
                      "const testFunction = (expected, actual, prefix) =>",
                      "    pm.test(`Validate ${prefix}`, () => pm.expect(expected).eql(actual));",
                      "",
                      "const prettify = json => JSON.stringify(json, null, 2);",
                      "",
                      "const getHeader = (pm, headerName) => {",
                      "    const header = pm.response.headers.find(header => header.key == headerName); ",
                      "    return header ? header.value : undefined;",
                      "}",
                      "",
                      "// SAVE FUCTIONALITY FOR REUSE",
                      "postman.setGlobalVariable('deepTest', deepTest);",
                      "//globals.deepTest = deepTest;  // this does not work",
                      "postman.setGlobalVariable('testFunction', testFunction);",
                      "postman.setGlobalVariable('prettify', prettify);",
                      "postman.setGlobalVariable('getHeader', getHeader);",
                      "",
                      "/* Usage within other sripts",
                      "// i.e.",
                      "const expectedUser = { name: \"mark\", age: 50, isAdmin: true };",
                      "const actualUser = { name: \"mark\", age: 51, isAdmin: false };",
                      "const deepTest = eval(globals.deepTest);",
                      "// or const deepTest = eval(postman.getGlobalVariable('deepTest'));",
                      "const testFunction = eval(globals.testFunction);",
                      "deepTest(expectedUser)(actualUser)('Validate user')(testFunction);",
                      "*/",
                      ""
                    ],
                    "_lastExecutionId": "f25e6f36-46a1-4099-9764-a06652372a47"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log(`'${pm.info.requestName}' Request Tests`);"
                    ],
                    "_lastExecutionId": "2b302092-f511-41a1-84de-afcd77452f28"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "fa3a44d2-4da1-40dd-ad12-f92f2f166cf5",
              "name": "500 Internal Server Error",
              "request": {
                "url": {
                  "path": [
                    "status",
                    "500"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', ",
                      "    () =>pm.response.to.have.status(200)",
                      ");"
                    ],
                    "_lastExecutionId": "b7e87bec-79da-47d2-9ff9-6e77fe8d6a4b"
                  }
                }
              ]
            },
            {
              "id": "10f2d182-a7ab-4436-89e2-299bff346e50",
              "name": "local IP",
              "request": {
                "url": {
                  "path": [
                    "ip"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', ",
                      "    () => pm.response.to.have.status(200)",
                      ");",
                      "",
                      "pm.test('Response JSON \"ip\" property matches an IP Regex',",
                      "    () => {",
                      "        const ip = pm.response.json().ip;",
                      "        console.log(`ip: ${ip}`);",
                      "        ",
                      "        const ipMatcherRegex = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/;",
                      "        ",
                      "        pm.expect(ip).to.match(ipMatcherRegex);",
                      "    }",
                      ");"
                    ],
                    "_lastExecutionId": "176caf6e-1b7c-4f15-8c2a-55b82bedafd2"
                  }
                }
              ]
            },
            {
              "id": "f120bbce-4e42-424d-9d46-f3c977f54969",
              "name": "JSON body",
              "request": {
                "url": {
                  "path": [
                    "post"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \n\t\"name\": \"Mark Johnson\", \n\t\"age\": 31, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "5c0286dd-c9ed-4ac1-87b9-e97974bddd31"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "const expectedUser = { ",
                      "    name: \"Mark Johnson\", ",
                      "    age: 50, ",
                      "    isAdmin: true, ",
                      "    resourceIds: [1111, 1112, 1113] ",
                      "    ",
                      "}; // wrong age and resourcesIds[1]",
                      "",
                      "const actualUser = pm.response.json().json;",
                      "",
                      "// Chai deep equal assertion",
                      "pm.test('Validate user (deep equal)', () => pm.expect(expectedUser).to.eql(actualUser));",
                      "",
                      "// Enhanced verification - one test / value",
                      "const deepTest = eval(globals.deepTest);",
                      "const testFunction = eval(globals.testFunction);",
                      "deepTest(expectedUser)(actualUser)('user')(testFunction);",
                      "",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "0744d3a4-d288-4180-821b-4bbc183a3c5d"
                  }
                }
              ]
            },
            {
              "id": "fe166fca-9b67-4ba7-a346-4140a37dbff4",
              "name": "query string parameters",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "post"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "company",
                      "value": "nagarro"
                    },
                    {
                      "key": "location",
                      "value": "timisoara"
                    },
                    {
                      "key": "department",
                      "value": "qa"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "bb2d1149-14fb-48a2-a69a-2821ee927cad"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "const expectedArgs = {",
                      "        \"company\": \"nagarro\",",
                      "        \"location\": \"timisoara\",",
                      "        \"department\": \"qa\"",
                      "    };",
                      "const actualArgs = pm.response.json().args;",
                      "",
                      "const deepTest = eval(globals.deepTest);",
                      "const testFunction = eval(globals.testFunction);",
                      "",
                      "deepTest(expectedArgs)(actualArgs)('args')(testFunction);"
                    ],
                    "_lastExecutionId": "9df9aec6-1717-49c5-9f09-cb18cc00d8e7"
                  }
                }
              ]
            },
            {
              "id": "21da0627-bf8c-420a-8773-718019c52d6a",
              "name": "form data",
              "request": {
                "url": {
                  "path": [
                    "post"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "email",
                      "value": "danginkgo@yahoo.com",
                      "type": "text"
                    },
                    {
                      "key": "username",
                      "value": "danrusu",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "ad8ccfae-382e-4b84-b9a2-261cbb9ea113"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "const expectedForm = {",
                      "    \"email\": \"danginkgo@yahoo.com\",",
                      "    \"username\": \"danrusu\"",
                      "};",
                      "const actualForm = pm.response.json().form;",
                      "",
                      "const deepTest = eval(globals.deepTest);",
                      "const testFunction = eval(globals.testFunction);",
                      "",
                      "deepTest(expectedForm)(actualForm)('form')(testFunction);"
                    ],
                    "_lastExecutionId": "f3d43edb-3d34-4fd6-8ba6-fc06ce32da14"
                  }
                }
              ]
            },
            {
              "id": "6640c4f8-deb4-4fb6-b4dd-3ec97e005511",
              "name": "delay 2s",
              "request": {
                "url": {
                  "path": [
                    "delay",
                    "2"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                    "type": "text/javascript",
                    "exec": [
                      "const getHeader = eval(globals.getHeader);",
                      "const prettify = eval(globals.prettify);",
                      "",
                      "pm.test('Status code is 200', ",
                      "    () =>pm.response.to.have.status(200)",
                      ");",
                      "",
                      "pm.test('Status code name is OK',",
                      "    () => pm.response.to.have.status(\"OK\")",
                      ");",
                      "",
                      "pm.test('Response time is above 2000ms', ",
                      "    () => pm.expect(pm.response.responseTime).to.be.above(2000)",
                      ");",
                      "",
                      "pm.test('Response body size is 13 B',",
                      "    () => {",
                      "        //const bodySize = pm.response.responseSize;",
                      "        console.log(`Headers ${prettify(pm.response.headers, null, 2)}`);",
                      "        const contentLength = parseInt(getHeader(pm, 'Content-Length'));",
                      "        pm.expect(contentLength).to.eql(13);",
                      "    }",
                      ");",
                      "",
                      "pm.test('Response delay is 2', ",
                      "    () =>  pm.expect(pm.response.json().delay).to.eql(\"2\")",
                      ");",
                      ""
                    ],
                    "_lastExecutionId": "71c71f88-209f-4780-ae83-44c5fb397297"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "95db2334-dde7-4ab9-844d-addde171276c",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('ECHO_SERVICE FOLDER Pre-request Scripts');",
                  ""
                ],
                "_lastExecutionId": "96f1c171-e024-4c63-b7d0-9fcad89e1f4d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "bdadc87d-58fe-4342-bf95-793beec688c0",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('ECHO_SERVICE Folder Tests');"
                ],
                "_lastExecutionId": "39fed8c6-3483-4e45-a3b8-18262ef1ad69"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "cursor": {
          "ref": "40d39659-27cb-43e2-9721-59a0ea9d1c2d",
          "length": 15,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d8eece50-ac92-42c2-9004-5ae59b4eb133",
          "scriptId": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
          "execution": "0744d3a4-d288-4180-821b-4bbc183a3c5d"
        }
      }
    ],
    "error": null
  }
}