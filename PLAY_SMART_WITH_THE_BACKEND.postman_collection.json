{
	"info": {
		"_postman_id": "831201cb-16d0-4057-8906-d3b84f38f650",
		"name": "PLAY_SMART_WITH_THE_BACKEND",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "ECHO_SERVICE",
			"item": [
				{
					"name": "setup & utils",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
								"exec": [
									"pm.environment.get('ENABLE_HELP_MESSAGES') && console.log(`'${pm.info.requestName}' Request Pre-request Script`);",
									"",
									"pm.globals.clear();",
									"",
									"const deepTest = expected => actual => (prefix = 'object') => testFunction => {        ",
									"    ",
									"    if (typeof expected !== 'object' || expected === null){",
									"        testFunction(expected, actual, prefix);",
									"        return;",
									"    }",
									"",
									"    if (Array.isArray(expected)){                     ",
									"        expected.forEach((element, index) => ",
									"            deepTest(expected[index])(actual[index])(`${prefix}[${index}]`)(testFunction)",
									"        );",
									"        return;",
									"    }",
									"",
									"    if (typeof expected === 'object'){          ",
									"        Object.keys(expected).forEach(key => ",
									"            deepTest(expected[key])(actual[key])(`${prefix}.${key}`)(testFunction)",
									"        );            ",
									"        return;",
									"    }",
									"};",
									"",
									"const testFunction = (expected, actual, prefix) =>",
									"    pm.test(`Validate ${prefix}`, () => pm.expect(expected).eql(actual));",
									"",
									"const prettify = json => JSON.stringify(json, null, 2);",
									"",
									"const getHeader = (pm, headerName) => {",
									"    const header = pm.response.headers.find(header => header.key == headerName); ",
									"    return header ? header.value : undefined;",
									"}",
									"",
									"// SAVE FUCTIONALITY FOR REUSE",
									"postman.setGlobalVariable('deepTest', deepTest);",
									"//globals.deepTest = deepTest;  // this does not work",
									"postman.setGlobalVariable('testFunction', testFunction);",
									"postman.setGlobalVariable('prettify', prettify);",
									"postman.setGlobalVariable('getHeader', getHeader);",
									"",
									"/* Usage within other sripts",
									"// i.e.",
									"const expectedUser = { name: \"mark\", age: 50, isAdmin: true };",
									"const actualUser = { name: \"mark\", age: 51, isAdmin: false };",
									"const deepTest = eval(globals.deepTest);",
									"// or const deepTest = eval(postman.getGlobalVariable('deepTest'));",
									"const testFunction = eval(globals.testFunction);",
									"deepTest(expectedUser)(actualUser)('Validate user')(testFunction);",
									"*/",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
								"exec": [
									"pm.environment.get('ENABLE_HELP_MESSAGES') && console.log(`'${pm.info.requestName}' Request Tests`);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "HEAD",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"name\": \"mark\", \n\t\"age\": 51, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n\t\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://www.google.com",
							"protocol": "https",
							"host": [
								"www",
								"google",
								"com"
							]
						}
					},
					"response": []
				},
				{
					"name": "JSON body",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
								"exec": [
									"const expectedUser = { ",
									"    name: \"Mark Johnson\", ",
									"    age: 50, ",
									"    isAdmin: true, ",
									"    resourceIds: [1111, 1112, 1113] ",
									"    ",
									"}; // wrong age and resourcesIds[1]",
									"",
									"const actualUser = pm.response.json().json;",
									"",
									"// Chai deep equal assertion",
									"pm.test('Validate user (deep equal)', () => pm.expect(expectedUser).to.eql(actualUser));",
									"",
									"// Enhanced verification - one test / value",
									"const deepTest = eval(globals.deepTest);",
									"const testFunction = eval(globals.testFunction);",
									"deepTest(expectedUser)(actualUser)('user')(testFunction);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"name\": \"Mark Johnson\", \n\t\"age\": 31, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{POSTMAN_ECHO_URL}}/post",
							"host": [
								"{{POSTMAN_ECHO_URL}}"
							],
							"path": [
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "query string parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
								"exec": [
									"const expectedArgs = {",
									"        \"company\": \"nagarro\",",
									"        \"location\": \"timisoara\",",
									"        \"department\": \"qa\"",
									"    };",
									"const actualArgs = pm.response.json().args;",
									"",
									"const deepTest = eval(globals.deepTest);",
									"const testFunction = eval(globals.testFunction);",
									"",
									"deepTest(expectedArgs)(actualArgs)('args')(testFunction);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://postman-echo.com/post?company=nagarro&location=timisoara&department=qa",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							],
							"query": [
								{
									"key": "company",
									"value": "nagarro"
								},
								{
									"key": "location",
									"value": "timisoara"
								},
								{
									"key": "department",
									"value": "qa"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "form data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
								"exec": [
									"const expectedForm = {",
									"    \"email\": \"danginkgo@yahoo.com\",",
									"    \"username\": \"danrusu\"",
									"};",
									"const actualForm = pm.response.json().form;",
									"",
									"const deepTest = eval(globals.deepTest);",
									"const testFunction = eval(globals.testFunction);",
									"",
									"deepTest(expectedForm)(actualForm)('form')(testFunction);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "danginkgo@yahoo.com",
									"type": "text"
								},
								{
									"key": "username",
									"value": "danrusu",
									"type": "text"
								}
							],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://postman-echo.com/post?user=100",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							],
							"query": [
								{
									"key": "user",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delay 2s",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
								"exec": [
									"const getHeader = eval(globals.getHeader);",
									"const prettify = eval(globals.prettify);",
									"",
									"pm.test('Status code is 200', ",
									"    () =>pm.response.to.have.status(200)",
									");",
									"",
									"pm.test('Status code name is OK',",
									"    () => pm.response.to.have.status(\"OK\")",
									");",
									"",
									"pm.test('Response time is above 2000ms', ",
									"    () => pm.expect(pm.response.responseTime).to.be.above(2000)",
									");",
									"",
									"pm.test('Response body size is 13 B',",
									"    () => {",
									"        //const bodySize = pm.response.responseSize;",
									"        console.log(`Headers ${prettify(pm.response.headers, null, 2)}`);",
									"        const contentLength = parseInt(getHeader(pm, 'Content-Length'));",
									"        pm.expect(contentLength).to.eql(13);",
									"    }",
									");",
									"",
									"pm.test('Response delay is 2', ",
									"    () =>  pm.expect(pm.response.json().delay).to.eql(\"2\")",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{POSTMAN_ECHO_URL}}/delay/2",
							"host": [
								"{{POSTMAN_ECHO_URL}}"
							],
							"path": [
								"delay",
								"2"
							]
						}
					},
					"response": []
				}
			],
			"description": "https://docs.postman-echo.com/",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "95db2334-dde7-4ab9-844d-addde171276c",
						"type": "text/javascript",
						"exec": [
							"pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('ECHO_SERVICE FOLDER Pre-request Scripts');",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "bdadc87d-58fe-4342-bf95-793beec688c0",
						"type": "text/javascript",
						"exec": [
							"pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('ECHO_SERVICE Folder Tests');"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "RESTFUL_BOOKER",
			"item": [
				{
					"name": "health check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "27133bf9-421e-4b0b-9bf1-74c59e4a5505",
								"exec": [
									"pm.globals.clear();",
									"",
									"pm.test('Status code name is \"Created\"', ",
									"    () => pm.response.to.have.status(\"Created\")",
									");",
									"",
									"pm.test('Response text is \"Created\"', ",
									"    () => pm.expect(pm.response.text()).to.eql(\"Created\")",
									");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "50a64363-0e4a-443c-abab-1edcafa9600a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"type": "text",
								"value": "token=16d2f037531ae80"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{RESTFULL_BOOKER_URL}}/ping",
							"host": [
								"{{RESTFULL_BOOKER_URL}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "create token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "22426ed2-1321-48be-9010-2e89e3f7e9f4",
								"exec": [
									"pm.test(\"Token is retrieven as a string\", function () {",
									"    ",
									"    var jsonData = pm.response.json(); // parse JSON from body",
									"    ",
									"    console.log(jsonData);",
									"    console.log(JSON.stringify(jsonData, null, 2));",
									"    console.log(`jsonData.token: ${jsonData.token}`);",
									"    ",
									"    console.log(`jsonData.value ${jsonData.value}`); // should be undefined",
									"    pm.expect(jsonData.token).to.be.a('string');",
									"    ",
									"    // auto generated snipet - Set an environment variable",
									"    // pm.globals.set(\"variable_key\", \"variable_value\");",
									"    pm.globals.set(\"token\", jsonData.token);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "32067d93-e91f-48e8-b3fc-f741a9502537",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}"
						},
						"url": {
							"raw": "{{RESTFULL_BOOKER_URL}}/auth",
							"host": [
								"{{RESTFULL_BOOKER_URL}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "bookings ids",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4d64b293-208a-4f86-a466-9d18c4f0195f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a13a1fc3-bb5c-4cac-9357-a717dea1b3f9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{RESTFULL_BOOKER_URL}}/booking",
							"host": [
								"{{RESTFULL_BOOKER_URL}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "create booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f243060f-fb2a-4756-b1f8-11f833fd62db",
								"exec": [
									"const newBookingId = pm.response.json().bookingid;",
									"console.log(`New booking id: ${newBookingId}`);",
									"",
									"pm.globals.set('newBookingId', newBookingId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bca49a6c-bf22-443e-b6b8-27c9684a46f9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{RESTFULL_BOOKER_URL}}/booking",
							"host": [
								"{{RESTFULL_BOOKER_URL}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "booking by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e676f020-1592-41c5-9bb2-a209f776b2a8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "eef0023a-9454-4ef2-be7e-6df7edab294b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{RESTFULL_BOOKER_URL}}/booking/{{newBookingId}}",
							"host": [
								"{{RESTFULL_BOOKER_URL}}"
							],
							"path": [
								"booking",
								"{{newBookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update booking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "74710eec-6fac-4f4e-9bf3-b18a2593595a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f4276e33-94a1-4d6c-a44f-b16be39655f7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2020-01-01\",\r\n        \"checkout\" : \"2020-01-10\"\r\n    },\r\n    \"additionalneeds\": \"none\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{RESTFULL_BOOKER_URL}}/booking/{{newBookingId}}",
							"host": [
								"{{RESTFULL_BOOKER_URL}}"
							],
							"path": [
								"booking",
								"{{newBookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "partial update booking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e9de7d4f-41da-441f-ada1-8aab933530fd",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0820127e-398c-47f2-9eb7-89afa0762f3f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"type": "text",
								"value": "token={{token}}"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{RESTFULL_BOOKER_URL}}/booking/{{newBookingId}}",
							"host": [
								"{{RESTFULL_BOOKER_URL}}"
							],
							"path": [
								"booking",
								"{{newBookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete booking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ff17718e-e2fe-400a-9ed7-be1b58e0129d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "edb1bea6-7b3a-4152-a8ad-c01e4a4b5d17",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@rms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "P@ssword1",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"type": "text",
								"value": "token={{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2020-01-01\",\r\n        \"checkout\" : \"2020-01-10\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{RESTFULL_BOOKER_URL}}/booking/{{newBookingId}}",
							"host": [
								"{{RESTFULL_BOOKER_URL}}"
							],
							"path": [
								"booking",
								"{{newBookingId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "https://restful-booker.herokuapp.com/\n\nDOCS: https://restful-booker.herokuapp.com/apidoc/index.html",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f8ec0231-dcc6-4037-be5a-4795cbf69b0f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b2426a45-2ba3-4fa2-abce-3a1354bb364b",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200 or 201\", function () {",
							"   pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});"
						]
					}
				}
			],
			"protocolProfileBehavior": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "bea5ca71-8b10-425c-a11c-2bf12948a719",
				"type": "text/javascript",
				"exec": [
					"pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('PLAY_SMART_WITH_THE_BACKEND Collection Pre-request Scripts');",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "7c286389-5948-462f-ae79-637b5d683051",
				"type": "text/javascript",
				"exec": [
					"pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('PLAY_SMART_WITH_THE_BACKEND Collection Tests');"
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}