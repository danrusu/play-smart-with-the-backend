{
  "collection": {
    "_": {
      "postman_id": "831201cb-16d0-4057-8906-d3b84f38f650"
    },
    "item": [
      {
        "id": "6108698b-59a3-446f-9fe6-8ca228ee643d",
        "name": "ECHO_SERVICE",
        "description": {
          "content": "https://docs.postman-echo.com/",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "d272c139-bc51-4311-b82a-79eb0c61531a",
            "name": "setup & utils",
            "request": {
              "url": {
                "protocol": "https",
                "host": [
                  "www",
                  "google",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "HEAD",
              "body": {
                "mode": "raw",
                "raw": "{ \n\t\"name\": \"mark\", \n\t\"age\": 51, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n\t\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                  "type": "text/javascript",
                  "exec": [
                    "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log(`'${pm.info.requestName}' Request Pre-request Script`);",
                    "",
                    "pm.globals.clear();",
                    "",
                    "const deepTest = expected => actual => (prefix = 'object') => testFunction => {        ",
                    "    ",
                    "    if (typeof expected !== 'object' || expected === null){",
                    "        testFunction(expected, actual, prefix);",
                    "        return;",
                    "    }",
                    "",
                    "    if (Array.isArray(expected)){                     ",
                    "        expected.forEach((element, index) => ",
                    "            deepTest(expected[index])(actual[index])(`${prefix}[${index}]`)(testFunction)",
                    "        );",
                    "        return;",
                    "    }",
                    "",
                    "    if (typeof expected === 'object'){          ",
                    "        Object.keys(expected).forEach(key => ",
                    "            deepTest(expected[key])(actual[key])(`${prefix}.${key}`)(testFunction)",
                    "        );            ",
                    "        return;",
                    "    }",
                    "};",
                    "",
                    "const testFunction = (expected, actual, prefix) =>",
                    "    pm.test(`Validate ${prefix}`, () => pm.expect(expected).eql(actual));",
                    "",
                    "const prettify = json => JSON.stringify(json, null, 2);",
                    "",
                    "const getHeader = (pm, headerName) => {",
                    "    const header = pm.response.headers.find(header => header.key == headerName); ",
                    "    return header ? header.value : undefined;",
                    "}",
                    "",
                    "// SAVE FUCTIONALITY FOR REUSE",
                    "postman.setGlobalVariable('deepTest', deepTest);",
                    "//globals.deepTest = deepTest;  // this does not work",
                    "postman.setGlobalVariable('testFunction', testFunction);",
                    "postman.setGlobalVariable('prettify', prettify);",
                    "postman.setGlobalVariable('getHeader', getHeader);",
                    "",
                    "/* Usage within other sripts",
                    "// i.e.",
                    "const expectedUser = { name: \"mark\", age: 50, isAdmin: true };",
                    "const actualUser = { name: \"mark\", age: 51, isAdmin: false };",
                    "const deepTest = eval(globals.deepTest);",
                    "// or const deepTest = eval(postman.getGlobalVariable('deepTest'));",
                    "const testFunction = eval(globals.testFunction);",
                    "deepTest(expectedUser)(actualUser)('Validate user')(testFunction);",
                    "*/",
                    ""
                  ],
                  "_lastExecutionId": "332e624f-ac55-4357-9927-858bd1a5a3ce"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                  "type": "text/javascript",
                  "exec": [
                    "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log(`'${pm.info.requestName}' Request Tests`);"
                  ],
                  "_lastExecutionId": "09afdf49-8eb1-4789-b524-cc214ded430b"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          },
          {
            "id": "ada83bc3-1659-48a8-a8f5-afecc729cc06",
            "name": "500 Internal Server Error",
            "request": {
              "url": {
                "path": [
                  "status",
                  "500"
                ],
                "host": [
                  "{{POSTMAN_ECHO_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', ",
                    "    () =>pm.response.to.have.status(200)",
                    ");"
                  ],
                  "_lastExecutionId": "f1c5b79a-59e1-4d52-bad6-bccf5a4d1b56"
                }
              }
            ]
          },
          {
            "id": "b55dcdfc-1b10-4cc0-851f-8a782dfa1cb7",
            "name": "local IP",
            "request": {
              "url": {
                "path": [
                  "ip"
                ],
                "host": [
                  "{{POSTMAN_ECHO_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', ",
                    "    () => pm.response.to.have.status(200)",
                    ");",
                    "",
                    "pm.test('Response JSON \"ip\" property matches an IP Regex',",
                    "    () => {",
                    "        const ip = pm.response.json().ip;",
                    "        console.log(`ip: ${ip}`);",
                    "        ",
                    "        const ipMatcherRegex = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/;",
                    "        ",
                    "        pm.expect(ip).to.match(ipMatcherRegex);",
                    "    }",
                    ");"
                  ],
                  "_lastExecutionId": "15f5bbcf-c31d-48d2-8107-7cc8a2b28ed8"
                }
              }
            ]
          },
          {
            "id": "a6a5e079-b472-42f8-b8ca-a6c4e9bc8c42",
            "name": "JSON body",
            "request": {
              "url": {
                "path": [
                  "post"
                ],
                "host": [
                  "{{POSTMAN_ECHO_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{ \n\t\"name\": \"Mark Johnson\", \n\t\"age\": 31, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a2dc4027-5131-46a2-8e6e-b958d221419a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                  "type": "text/javascript",
                  "exec": [
                    "const expectedUser = { ",
                    "    name: \"Mark Johnson\", ",
                    "    age: 50, ",
                    "    isAdmin: true, ",
                    "    resourceIds: [1111, 1112, 1113] ",
                    "    ",
                    "}; // wrong age and resourcesIds[1]",
                    "",
                    "const actualUser = pm.response.json().json;",
                    "",
                    "// Chai deep equal assertion",
                    "pm.test('Validate user (deep equal)', () => pm.expect(expectedUser).to.eql(actualUser));",
                    "",
                    "// Enhanced verification - one test / value",
                    "const deepTest = eval(globals.deepTest);",
                    "const testFunction = eval(globals.testFunction);",
                    "deepTest(expectedUser)(actualUser)('user')(testFunction);",
                    "",
                    "",
                    ""
                  ],
                  "_lastExecutionId": "f995c6a2-e25c-4bcc-909b-63f3a2f570e7"
                }
              }
            ]
          },
          {
            "id": "aa53828e-d3fd-46c1-b5f7-43614e16271a",
            "name": "query string parameters",
            "request": {
              "url": {
                "protocol": "https",
                "path": [
                  "post"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [
                  {
                    "key": "company",
                    "value": "nagarro"
                  },
                  {
                    "key": "location",
                    "value": "timisoara"
                  },
                  {
                    "key": "department",
                    "value": "qa"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/x-www-form-urlencoded"
                }
              ],
              "method": "POST"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "794e673c-b258-408b-bd91-575ee6f4d5eb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                  "type": "text/javascript",
                  "exec": [
                    "const expectedArgs = {",
                    "        \"company\": \"nagarro\",",
                    "        \"location\": \"timisoara\",",
                    "        \"department\": \"qa\"",
                    "    };",
                    "const actualArgs = pm.response.json().args;",
                    "",
                    "const deepTest = eval(globals.deepTest);",
                    "const testFunction = eval(globals.testFunction);",
                    "",
                    "deepTest(expectedArgs)(actualArgs)('args')(testFunction);"
                  ],
                  "_lastExecutionId": "710c28fc-fcbf-43d6-8652-d03528dd8628"
                }
              }
            ]
          },
          {
            "id": "531a7f20-53c9-4830-9763-29f356d95e9e",
            "name": "form data",
            "request": {
              "url": {
                "path": [
                  "post"
                ],
                "host": [
                  "{{POSTMAN_ECHO_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/x-www-form-urlencoded"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "email",
                    "value": "danginkgo@yahoo.com",
                    "type": "text"
                  },
                  {
                    "key": "username",
                    "value": "danrusu",
                    "type": "text"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e624c6af-2bc1-4b91-b819-07b7a971c883"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                  "type": "text/javascript",
                  "exec": [
                    "const expectedForm = {",
                    "    \"email\": \"danginkgo@yahoo.com\",",
                    "    \"username\": \"danrusu\"",
                    "};",
                    "const actualForm = pm.response.json().form;",
                    "",
                    "const deepTest = eval(globals.deepTest);",
                    "const testFunction = eval(globals.testFunction);",
                    "",
                    "deepTest(expectedForm)(actualForm)('form')(testFunction);"
                  ],
                  "_lastExecutionId": "7e9aad82-dd76-43f9-a995-508a402e5e81"
                }
              }
            ]
          },
          {
            "id": "18a17cde-464c-4257-8733-167b3138a2df",
            "name": "delay 2s",
            "request": {
              "url": {
                "path": [
                  "delay",
                  "2"
                ],
                "host": [
                  "{{POSTMAN_ECHO_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                  "type": "text/javascript",
                  "exec": [
                    "const getHeader = eval(globals.getHeader);",
                    "const prettify = eval(globals.prettify);",
                    "",
                    "pm.test('Status code is 200', ",
                    "    () =>pm.response.to.have.status(200)",
                    ");",
                    "",
                    "pm.test('Status code name is OK',",
                    "    () => pm.response.to.have.status(\"OK\")",
                    ");",
                    "",
                    "pm.test('Response time is above 2000ms', ",
                    "    () => pm.expect(pm.response.responseTime).to.be.above(2000)",
                    ");",
                    "",
                    "pm.test('Response body size is 13 B',",
                    "    () => {",
                    "        //const bodySize = pm.response.responseSize;",
                    "        console.log(`Headers ${prettify(pm.response.headers, null, 2)}`);",
                    "        const contentLength = parseInt(getHeader(pm, 'Content-Length'));",
                    "        pm.expect(contentLength).to.eql(13);",
                    "    }",
                    ");",
                    "",
                    "pm.test('Response delay is 2', ",
                    "    () =>  pm.expect(pm.response.json().delay).to.eql(\"2\")",
                    ");",
                    ""
                  ],
                  "_lastExecutionId": "c29afb31-87dd-4f99-9a63-269551adc130"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "95db2334-dde7-4ab9-844d-addde171276c",
              "type": "text/javascript",
              "exec": [
                "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('ECHO_SERVICE FOLDER Pre-request Scripts');",
                ""
              ],
              "_lastExecutionId": "6cdbfcaf-0395-4936-89d3-2b15df9b9f89"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bdadc87d-58fe-4342-bf95-793beec688c0",
              "type": "text/javascript",
              "exec": [
                "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('ECHO_SERVICE Folder Tests');"
              ],
              "_lastExecutionId": "cdcbdac9-3c73-4c3c-81ea-adada102773a"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disableBodyPruning": true
        }
      },
      {
        "id": "9b7bfd78-a56c-414c-b010-8b53fafb07ed",
        "name": "RESTFUL_BOOKER",
        "description": {
          "content": "https://restful-booker.herokuapp.com/\n\nDOCS: https://restful-booker.herokuapp.com/apidoc/index.html",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "aea9afbc-96bf-4fe6-a128-508e41efd0cb",
            "name": "health check",
            "request": {
              "url": {
                "path": [
                  "ping"
                ],
                "host": [
                  "{{RESTFULL_BOOKER_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Cookie",
                  "value": "token=16d2f037531ae80"
                },
                {
                  "key": "Accept",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "27133bf9-421e-4b0b-9bf1-74c59e4a5505",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.clear();",
                    "",
                    "pm.test('Status code name is \"Created\"', ",
                    "    () => pm.response.to.have.status(\"Created\")",
                    ");",
                    "",
                    "pm.test('Response text is \"Created\"', ",
                    "    () => pm.expect(pm.response.text()).to.eql(\"Created\")",
                    ");",
                    ""
                  ],
                  "_lastExecutionId": "f950f765-c9f6-4dee-9976-a9a9ebcb27d7"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "50a64363-0e4a-443c-abab-1edcafa9600a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c1ad6672-3b45-4667-9bea-f139629ac550"
                }
              }
            ]
          },
          {
            "id": "c4f53160-439c-4662-97cc-78453aeaabc4",
            "name": "create token",
            "request": {
              "url": {
                "path": [
                  "auth"
                ],
                "host": [
                  "{{RESTFULL_BOOKER_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "22426ed2-1321-48be-9010-2e89e3f7e9f4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Token is retrieven as a string\", function () {",
                    "    ",
                    "    var jsonData = pm.response.json(); // parse JSON from body",
                    "    ",
                    "    console.log(jsonData);",
                    "    console.log(JSON.stringify(jsonData, null, 2));",
                    "    console.log(`jsonData.token: ${jsonData.token}`);",
                    "    ",
                    "    console.log(`jsonData.value ${jsonData.value}`); // should be undefined",
                    "    pm.expect(jsonData.token).to.be.a('string');",
                    "    ",
                    "    // auto generated snipet - Set an environment variable",
                    "    // pm.globals.set(\"variable_key\", \"variable_value\");",
                    "    pm.globals.set(\"token\", jsonData.token);",
                    "});",
                    ""
                  ],
                  "_lastExecutionId": "7d4ff71c-b5d1-4416-b04f-19dfa2bea05e"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "32067d93-e91f-48e8-b3fc-f741a9502537",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "611d9ca3-2628-4ac7-bb54-9222ce0cc721"
                }
              }
            ]
          },
          {
            "id": "3c54661b-188f-4713-b91a-1a0018f83097",
            "name": "bookings ids",
            "request": {
              "url": {
                "path": [
                  "booking"
                ],
                "host": [
                  "{{RESTFULL_BOOKER_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4d64b293-208a-4f86-a466-9d18c4f0195f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9f9149d0-59eb-4bd2-a9a9-c7be484fd6a6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a13a1fc3-bb5c-4cac-9357-a717dea1b3f9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "09acc56c-bd23-4f42-a9ea-56cbfe858f07"
                }
              }
            ]
          },
          {
            "id": "937a658d-0121-4ec3-80fa-bd06deaa32db",
            "name": "create booking",
            "request": {
              "url": {
                "path": [
                  "booking"
                ],
                "host": [
                  "{{RESTFULL_BOOKER_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f243060f-fb2a-4756-b1f8-11f833fd62db",
                  "type": "text/javascript",
                  "exec": [
                    "const newBookingId = pm.response.json().bookingid;",
                    "console.log(`New booking id: ${newBookingId}`);",
                    "",
                    "pm.globals.set('newBookingId', newBookingId);"
                  ],
                  "_lastExecutionId": "c92ec7ad-f7fc-42e4-9a1b-54b1aa43a0c1"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "bca49a6c-bf22-443e-b6b8-27c9684a46f9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dc1a0359-ce8d-43da-89b0-d76991fecd82"
                }
              }
            ]
          },
          {
            "id": "0db50bc2-7aef-46a4-9b9a-d9bad645e3d0",
            "name": "booking by id",
            "request": {
              "url": {
                "path": [
                  "booking",
                  "{{newBookingId}}"
                ],
                "host": [
                  "{{RESTFULL_BOOKER_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e676f020-1592-41c5-9bb2-a209f776b2a8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "36d9d47d-97fa-46b2-82f2-0adf20dfa461"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "eef0023a-9454-4ef2-be7e-6df7edab294b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2d2afb8b-5855-4edb-a569-30d244cf5c96"
                }
              }
            ]
          },
          {
            "id": "2114270d-2933-4acc-a514-8a3f4ee94afb",
            "name": "update booking",
            "request": {
              "url": {
                "path": [
                  "booking",
                  "{{newBookingId}}"
                ],
                "host": [
                  "{{RESTFULL_BOOKER_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Cookie",
                  "value": "token={{token}}"
                },
                {
                  "key": "Accept",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2020-01-01\",\r\n        \"checkout\" : \"2020-01-10\"\r\n    },\r\n    \"additionalneeds\": \"none\"\r\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "74710eec-6fac-4f4e-9bf3-b18a2593595a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c8c839b3-10de-4e8d-8113-3ab3b7b54133"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f4276e33-94a1-4d6c-a44f-b16be39655f7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "385ed620-1898-4385-be0b-fd7c9e2f1558"
                }
              }
            ]
          },
          {
            "id": "fab094b4-b769-4d92-8353-dcb2ad68447f",
            "name": "partial update booking",
            "request": {
              "url": {
                "path": [
                  "booking",
                  "{{newBookingId}}"
                ],
                "host": [
                  "{{RESTFULL_BOOKER_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Cookie",
                  "value": "token={{token}}"
                },
                {
                  "key": "Accept",
                  "value": "application/json"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\"\r\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e9de7d4f-41da-441f-ada1-8aab933530fd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9d0f090c-a174-4c54-9b98-9a46e2e39bda"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0820127e-398c-47f2-9eb7-89afa0762f3f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5fb93ace-dc50-45b6-abf3-d6548de881f1"
                }
              }
            ]
          },
          {
            "id": "b6869dc5-048b-4884-83d8-a45b4e6508ad",
            "name": "delete booking",
            "request": {
              "url": {
                "path": [
                  "booking",
                  "{{newBookingId}}"
                ],
                "host": [
                  "{{RESTFULL_BOOKER_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Cookie",
                  "value": "token={{token}}"
                }
              ],
              "method": "DELETE",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2020-01-01\",\r\n        \"checkout\" : \"2020-01-10\"\r\n    }\r\n}"
              },
              "auth": {
                "type": "basic",
                "basic": [
                  {
                    "type": "string",
                    "value": "admin@rms.com",
                    "key": "username"
                  },
                  {
                    "type": "string",
                    "value": "P@ssword1",
                    "key": "password"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ff17718e-e2fe-400a-9ed7-be1b58e0129d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2aa79c48-80da-4ad3-b8b7-f28d41395042"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "edb1bea6-7b3a-4152-a8ad-c01e4a4b5d17",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a7fa2af7-7d51-4819-8b9f-aff14732d409"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f8ec0231-dcc6-4037-be5a-4795cbf69b0f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f6742888-3b34-4bde-9aee-329fdbfcd31e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b2426a45-2ba3-4fa2-abce-3a1354bb364b",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"Status code is 200 or 201\", function () {",
                "   pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                "});",
                "",
                "pm.test(\"Response time is less than 1000ms\", function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                "});"
              ],
              "_lastExecutionId": "9ec8fbbf-2dfa-4040-ac0d-225826032af5"
            }
          }
        ],
        "protocolProfileBehavior": []
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "bea5ca71-8b10-425c-a11c-2bf12948a719",
          "type": "text/javascript",
          "exec": [
            "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('PLAY_SMART_WITH_THE_BACKEND Collection Pre-request Scripts');",
            "",
            ""
          ],
          "_lastExecutionId": "4ed87f9b-c321-40ae-95f5-241c5a09073b"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "7c286389-5948-462f-ae79-637b5d683051",
          "type": "text/javascript",
          "exec": [
            "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('PLAY_SMART_WITH_THE_BACKEND Collection Tests');"
          ],
          "_lastExecutionId": "1decf96f-c50b-4782-99bd-afa87d4aae88"
        }
      }
    ],
    "protocolProfileBehavior": {
      "disableBodyPruning": true
    },
    "variable": [],
    "info": {
      "_postman_id": "831201cb-16d0-4057-8906-d3b84f38f650",
      "name": "PLAY_SMART_WITH_THE_BACKEND",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2019-12-09T14:50:33.680Z",
      "postman_exported_using": "Postman/7.13.0"
    },
    "id": "5450fdff-035f-42fd-8ae5-0141fd4b5c34",
    "name": "PLAY_SMART_WITH_THE_BACKEND",
    "values": [
      {
        "type": "any",
        "value": "https://restful-booker.herokuapp.com",
        "key": "RESTFULL_BOOKER_URL"
      },
      {
        "type": "any",
        "value": "true",
        "key": "ENABLE_HELP_MESSAGES"
      },
      {
        "type": "any",
        "value": "https://postman-echo.com",
        "key": "POSTMAN_ECHO_URL"
      }
    ]
  },
  "globals": {
    "id": "20e9069c-94c2-4765-aec9-1ef90a55e85d",
    "values": [
      {
        "type": "any",
        "value": "6c61e843847bb22",
        "key": "token"
      },
      {
        "type": "any",
        "value": 11,
        "key": "newBookingId"
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 87,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 39,
        "pending": 0,
        "failed": 4
      },
      "testScripts": {
        "total": 45,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 42,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 353.06666666666666,
      "responseMin": 127,
      "responseMax": 2120,
      "responseSd": 509.20270576220975,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1575912109862,
      "completed": 1575912115898
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "7703d63a-9123-414e-9c8a-324f97da0bc2",
          "httpRequestId": "ec5d29d1-e37e-4de8-ab9e-a799f921a2a8"
        },
        "item": {
          "id": "d272c139-bc51-4311-b82a-79eb0c61531a",
          "name": "setup & utils",
          "request": {
            "url": {
              "protocol": "https",
              "host": [
                "www",
                "google",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "HEAD",
            "body": {
              "mode": "raw",
              "raw": "{ \n\t\"name\": \"mark\", \n\t\"age\": 51, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n\t\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log(`'${pm.info.requestName}' Request Pre-request Script`);",
                  "",
                  "pm.globals.clear();",
                  "",
                  "const deepTest = expected => actual => (prefix = 'object') => testFunction => {        ",
                  "    ",
                  "    if (typeof expected !== 'object' || expected === null){",
                  "        testFunction(expected, actual, prefix);",
                  "        return;",
                  "    }",
                  "",
                  "    if (Array.isArray(expected)){                     ",
                  "        expected.forEach((element, index) => ",
                  "            deepTest(expected[index])(actual[index])(`${prefix}[${index}]`)(testFunction)",
                  "        );",
                  "        return;",
                  "    }",
                  "",
                  "    if (typeof expected === 'object'){          ",
                  "        Object.keys(expected).forEach(key => ",
                  "            deepTest(expected[key])(actual[key])(`${prefix}.${key}`)(testFunction)",
                  "        );            ",
                  "        return;",
                  "    }",
                  "};",
                  "",
                  "const testFunction = (expected, actual, prefix) =>",
                  "    pm.test(`Validate ${prefix}`, () => pm.expect(expected).eql(actual));",
                  "",
                  "const prettify = json => JSON.stringify(json, null, 2);",
                  "",
                  "const getHeader = (pm, headerName) => {",
                  "    const header = pm.response.headers.find(header => header.key == headerName); ",
                  "    return header ? header.value : undefined;",
                  "}",
                  "",
                  "// SAVE FUCTIONALITY FOR REUSE",
                  "postman.setGlobalVariable('deepTest', deepTest);",
                  "//globals.deepTest = deepTest;  // this does not work",
                  "postman.setGlobalVariable('testFunction', testFunction);",
                  "postman.setGlobalVariable('prettify', prettify);",
                  "postman.setGlobalVariable('getHeader', getHeader);",
                  "",
                  "/* Usage within other sripts",
                  "// i.e.",
                  "const expectedUser = { name: \"mark\", age: 50, isAdmin: true };",
                  "const actualUser = { name: \"mark\", age: 51, isAdmin: false };",
                  "const deepTest = eval(globals.deepTest);",
                  "// or const deepTest = eval(postman.getGlobalVariable('deepTest'));",
                  "const testFunction = eval(globals.testFunction);",
                  "deepTest(expectedUser)(actualUser)('Validate user')(testFunction);",
                  "*/",
                  ""
                ],
                "_lastExecutionId": "332e624f-ac55-4357-9927-858bd1a5a3ce"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log(`'${pm.info.requestName}' Request Tests`);"
                ],
                "_lastExecutionId": "09afdf49-8eb1-4789-b524-cc214ded430b"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "https",
            "host": [
              "www",
              "google",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "73e67c15-8167-4ae1-8bf6-531602247292",
              "system": true
            },
            {
              "key": "Host",
              "value": "www.google.com",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "content-length",
              "value": 103,
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "HEAD",
          "body": {
            "mode": "raw",
            "raw": "{ \n\t\"name\": \"mark\", \n\t\"age\": 51, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n\t\n}"
          }
        },
        "response": {
          "id": "930657bc-d1c2-47c0-88c9-5c381f26125d",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/html; charset=UTF-8"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "Content-Length",
              "value": "1555"
            },
            {
              "key": "Date",
              "value": "Mon, 09 Dec 2019 17:21:50 GMT"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 348,
          "responseSize": 0
        },
        "id": "d272c139-bc51-4311-b82a-79eb0c61531a"
      },
      {
        "cursor": {
          "ref": "4d6fd988-c75a-4fa1-b132-bdb88527a9ab",
          "length": 15,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "755feaca-63d2-4aec-97f1-14bf5583c8e7"
        },
        "item": {
          "id": "ada83bc3-1659-48a8-a8f5-afecc729cc06",
          "name": "500 Internal Server Error",
          "request": {
            "url": {
              "path": [
                "status",
                "500"
              ],
              "host": [
                "{{POSTMAN_ECHO_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', ",
                  "    () =>pm.response.to.have.status(200)",
                  ");"
                ],
                "_lastExecutionId": "f1c5b79a-59e1-4d52-bad6-bccf5a4d1b56"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "status",
              "500"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5d9e80d3-ca60-45ca-a345-196521672d99",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "4f9b6b90-fee4-4e67-bcaf-15429d1a1b88",
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Mon, 09 Dec 2019 17:21:50 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"e-DRyKmU8iz/Q1q0KRLR2p1AvGGqo\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3A2P1s4LT2AMiqAz4Ajwy-v5UDesYnOwPU.2xS%2B%2Bhoe5qWM6zQYeVBGUlkaBmcc6N5OxOj7Q4Pfes8; Path=/; HttpOnly"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "14"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              53,
              48,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 747,
          "responseSize": 14
        },
        "id": "ada83bc3-1659-48a8-a8f5-afecc729cc06",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ce936b2d-078e-46da-9708-b4501edf1a1e",
          "length": 15,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b47188ae-dc4a-4c60-9170-db050b5dcb1e"
        },
        "item": {
          "id": "b55dcdfc-1b10-4cc0-851f-8a782dfa1cb7",
          "name": "local IP",
          "request": {
            "url": {
              "path": [
                "ip"
              ],
              "host": [
                "{{POSTMAN_ECHO_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', ",
                  "    () => pm.response.to.have.status(200)",
                  ");",
                  "",
                  "pm.test('Response JSON \"ip\" property matches an IP Regex',",
                  "    () => {",
                  "        const ip = pm.response.json().ip;",
                  "        console.log(`ip: ${ip}`);",
                  "        ",
                  "        const ipMatcherRegex = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/;",
                  "        ",
                  "        pm.expect(ip).to.match(ipMatcherRegex);",
                  "    }",
                  ");"
                ],
                "_lastExecutionId": "15f5bbcf-c31d-48d2-8107-7cc8a2b28ed8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "ip"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ec6e3eab-de52-4763-838d-1ddb7cc2e640",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3A2P1s4LT2AMiqAz4Ajwy-v5UDesYnOwPU.2xS%2B%2Bhoe5qWM6zQYeVBGUlkaBmcc6N5OxOj7Q4Pfes8",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "2dcee709-036e-42fe-b080-a26a838e2dd0",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Encoding",
              "value": "gzip"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Mon, 09 Dec 2019 17:21:51 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"18-6N1gdoRHwyuW8UAEb4XgUHaQrTs\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "44"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              112,
              34,
              58,
              34,
              49,
              57,
              51,
              46,
              49,
              48,
              52,
              46,
              49,
              53,
              48,
              46,
              50,
              48,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 134,
          "responseSize": 24
        },
        "id": "b55dcdfc-1b10-4cc0-851f-8a782dfa1cb7",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response JSON \"ip\" property matches an IP Regex",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "1d246e83-ebe6-4747-b424-ece67427d1ee",
          "length": 15,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7c288e44-fa28-41f1-8dc7-1db020413f1e"
        },
        "item": {
          "id": "a6a5e079-b472-42f8-b8ca-a6c4e9bc8c42",
          "name": "JSON body",
          "request": {
            "url": {
              "path": [
                "post"
              ],
              "host": [
                "{{POSTMAN_ECHO_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{ \n\t\"name\": \"Mark Johnson\", \n\t\"age\": 31, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "a2dc4027-5131-46a2-8e6e-b958d221419a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                "type": "text/javascript",
                "exec": [
                  "const expectedUser = { ",
                  "    name: \"Mark Johnson\", ",
                  "    age: 50, ",
                  "    isAdmin: true, ",
                  "    resourceIds: [1111, 1112, 1113] ",
                  "    ",
                  "}; // wrong age and resourcesIds[1]",
                  "",
                  "const actualUser = pm.response.json().json;",
                  "",
                  "// Chai deep equal assertion",
                  "pm.test('Validate user (deep equal)', () => pm.expect(expectedUser).to.eql(actualUser));",
                  "",
                  "// Enhanced verification - one test / value",
                  "const deepTest = eval(globals.deepTest);",
                  "const testFunction = eval(globals.testFunction);",
                  "deepTest(expectedUser)(actualUser)('user')(testFunction);",
                  "",
                  "",
                  ""
                ],
                "_lastExecutionId": "f995c6a2-e25c-4bcc-909b-63f3a2f570e7"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "post"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "bab69572-f27f-4abd-b905-f90a65371ebf",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3A2P1s4LT2AMiqAz4Ajwy-v5UDesYnOwPU.2xS%2B%2Bhoe5qWM6zQYeVBGUlkaBmcc6N5OxOj7Q4Pfes8",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "content-length",
              "value": 109,
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{ \n\t\"name\": \"Mark Johnson\", \n\t\"age\": 31, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n}"
          }
        },
        "response": {
          "id": "94d73e41-baa7-494c-a2b9-56dc944bca62",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Encoding",
              "value": "gzip"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Mon, 09 Dec 2019 17:21:51 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"298-Ddf5yvygo9Y+zgHOU15Jvgd1xgo\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AfKRo95ciIyk3w9OGrwWd5BNvjWx8tmuZ.P3G8rzjOr3f2ovBmPyLDwOmDZwS8NZ5O%2Ba%2FG1RnfOmI; Path=/; HttpOnly"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "425"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              97,
              114,
              103,
              115,
              34,
              58,
              123,
              125,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              97,
              114,
              107,
              32,
              74,
              111,
              104,
              110,
              115,
              111,
              110,
              34,
              44,
              34,
              97,
              103,
              101,
              34,
              58,
              51,
              49,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              73,
              100,
              115,
              34,
              58,
              91,
              49,
              49,
              49,
              49,
              44,
              49,
              49,
              49,
              48,
              44,
              49,
              49,
              49,
              51,
              93,
              125,
              44,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              58,
              123,
              125,
              44,
              34,
              102,
              111,
              114,
              109,
              34,
              58,
              123,
              125,
              44,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              123,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              58,
              34,
              49,
              48,
              57,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              34,
              42,
              47,
              42,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              34,
              44,
              34,
              99,
              97,
              99,
              104,
              101,
              45,
              99,
              111,
              110,
              116,
              114,
              111,
              108,
              34,
              58,
              34,
              110,
              111,
              45,
              99,
              97,
              99,
              104,
              101,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              47,
              106,
              115,
              111,
              110,
              34,
              44,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              34,
              58,
              34,
              115,
              97,
              105,
              108,
              115,
              46,
              115,
              105,
              100,
              61,
              115,
              37,
              51,
              65,
              50,
              80,
              49,
              115,
              52,
              76,
              84,
              50,
              65,
              77,
              105,
              113,
              65,
              122,
              52,
              65,
              106,
              119,
              121,
              45,
              118,
              53,
              85,
              68,
              101,
              115,
              89,
              110,
              79,
              119,
              80,
              85,
              46,
              50,
              120,
              83,
              37,
              50,
              66,
              37,
              50,
              66,
              104,
              111,
              101,
              53,
              113,
              87,
              77,
              54,
              122,
              81,
              89,
              101,
              86,
              66,
              71,
              85,
              108,
              107,
              97,
              66,
              109,
              99,
              99,
              54,
              78,
              53,
              79,
              120,
              79,
              106,
              55,
              81,
              52,
              80,
              102,
              101,
              115,
              56,
              34,
              44,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              98,
              97,
              98,
              54,
              57,
              53,
              55,
              50,
              45,
              102,
              50,
              55,
              102,
              45,
              52,
              97,
              98,
              100,
              45,
              98,
              57,
              48,
              53,
              45,
              102,
              57,
              48,
              97,
              54,
              53,
              51,
              55,
              49,
              101,
              98,
              102,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              55,
              46,
              49,
              52,
              46,
              48,
              34,
              44,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              34,
              52,
              52,
              51,
              34,
              125,
              44,
              34,
              106,
              115,
              111,
              110,
              34,
              58,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              97,
              114,
              107,
              32,
              74,
              111,
              104,
              110,
              115,
              111,
              110,
              34,
              44,
              34,
              97,
              103,
              101,
              34,
              58,
              51,
              49,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              73,
              100,
              115,
              34,
              58,
              91,
              49,
              49,
              49,
              49,
              44,
              49,
              49,
              49,
              48,
              44,
              49,
              49,
              49,
              51,
              93,
              125,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              47,
              112,
              111,
              115,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 127,
          "responseSize": 664
        },
        "id": "a6a5e079-b472-42f8-b8ca-a6c4e9bc8c42",
        "assertions": [
          {
            "assertion": "Validate user (deep equal)",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Validate user (deep equal)",
              "message": "expected { Object (name, age, ...) } to deeply equal { Object (name, age, ...) }",
              "stack": "AssertionError: expected { Object (name, age, ...) } to deeply equal { Object (name, age, ...) }\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "Validate user.name",
            "skipped": false
          },
          {
            "assertion": "Validate user.age",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Validate user.age",
              "message": "expected 50 to deeply equal 31",
              "stack": "AssertionError: expected 50 to deeply equal 31\n   at Object.eval sandbox-script.js:3:4)"
            }
          },
          {
            "assertion": "Validate user.isAdmin",
            "skipped": false
          },
          {
            "assertion": "Validate user.resourceIds[0]",
            "skipped": false
          },
          {
            "assertion": "Validate user.resourceIds[1]",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 5,
              "test": "Validate user.resourceIds[1]",
              "message": "expected 1112 to deeply equal 1110",
              "stack": "AssertionError: expected 1112 to deeply equal 1110\n   at Object.eval sandbox-script.js:6:4)"
            }
          },
          {
            "assertion": "Validate user.resourceIds[2]",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "7af6d8d0-aa5d-428c-b1d5-3741adf06d84",
          "length": 15,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "28fd6e28-3ed4-4eb2-aba5-c4295e6a2f5b"
        },
        "item": {
          "id": "aa53828e-d3fd-46c1-b5f7-43614e16271a",
          "name": "query string parameters",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "post"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [
                {
                  "key": "company",
                  "value": "nagarro"
                },
                {
                  "key": "location",
                  "value": "timisoara"
                },
                {
                  "key": "department",
                  "value": "qa"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "794e673c-b258-408b-bd91-575ee6f4d5eb"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                "type": "text/javascript",
                "exec": [
                  "const expectedArgs = {",
                  "        \"company\": \"nagarro\",",
                  "        \"location\": \"timisoara\",",
                  "        \"department\": \"qa\"",
                  "    };",
                  "const actualArgs = pm.response.json().args;",
                  "",
                  "const deepTest = eval(globals.deepTest);",
                  "const testFunction = eval(globals.testFunction);",
                  "",
                  "deepTest(expectedArgs)(actualArgs)('args')(testFunction);"
                ],
                "_lastExecutionId": "710c28fc-fcbf-43d6-8652-d03528dd8628"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "post"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [
              {
                "key": "company",
                "value": "nagarro"
              },
              {
                "key": "location",
                "value": "timisoara"
              },
              {
                "key": "department",
                "value": "qa"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/x-www-form-urlencoded"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "81adc6bc-c590-479a-b1c9-7b8b06092e3f",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3AfKRo95ciIyk3w9OGrwWd5BNvjWx8tmuZ.P3G8rzjOr3f2ovBmPyLDwOmDZwS8NZ5O%2Ba%2FG1RnfOmI",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "content-length",
              "value": "",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST"
        },
        "response": {
          "id": "07537a92-104a-4af5-987b-d7eaa8b9b955",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Encoding",
              "value": "gzip"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Mon, 09 Dec 2019 17:21:51 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"27e-zEZvYmtVVfZZ7+4rbVJq14DMQCo\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AESqWipJDOdWoUscgBcb7lPi31hi4Jgrv.9vXPJ4P9rn6DL9pqhTM5%2FqR3RTsKqqCHLyoGR0NaxTk; Path=/; HttpOnly"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "435"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              97,
              114,
              103,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              110,
              97,
              103,
              97,
              114,
              114,
              111,
              34,
              44,
              34,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              116,
              105,
              109,
              105,
              115,
              111,
              97,
              114,
              97,
              34,
              44,
              34,
              100,
              101,
              112,
              97,
              114,
              116,
              109,
              101,
              110,
              116,
              34,
              58,
              34,
              113,
              97,
              34,
              125,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              34,
              34,
              44,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              58,
              123,
              125,
              44,
              34,
              102,
              111,
              114,
              109,
              34,
              58,
              123,
              125,
              44,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              123,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              34,
              42,
              47,
              42,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              34,
              44,
              34,
              99,
              97,
              99,
              104,
              101,
              45,
              99,
              111,
              110,
              116,
              114,
              111,
              108,
              34,
              58,
              34,
              110,
              111,
              45,
              99,
              97,
              99,
              104,
              101,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              47,
              120,
              45,
              119,
              119,
              119,
              45,
              102,
              111,
              114,
              109,
              45,
              117,
              114,
              108,
              101,
              110,
              99,
              111,
              100,
              101,
              100,
              34,
              44,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              34,
              58,
              34,
              115,
              97,
              105,
              108,
              115,
              46,
              115,
              105,
              100,
              61,
              115,
              37,
              51,
              65,
              102,
              75,
              82,
              111,
              57,
              53,
              99,
              105,
              73,
              121,
              107,
              51,
              119,
              57,
              79,
              71,
              114,
              119,
              87,
              100,
              53,
              66,
              78,
              118,
              106,
              87,
              120,
              56,
              116,
              109,
              117,
              90,
              46,
              80,
              51,
              71,
              56,
              114,
              122,
              106,
              79,
              114,
              51,
              102,
              50,
              111,
              118,
              66,
              109,
              80,
              121,
              76,
              68,
              119,
              79,
              109,
              68,
              90,
              119,
              83,
              56,
              78,
              90,
              53,
              79,
              37,
              50,
              66,
              97,
              37,
              50,
              70,
              71,
              49,
              82,
              110,
              102,
              79,
              109,
              73,
              34,
              44,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              56,
              49,
              97,
              100,
              99,
              54,
              98,
              99,
              45,
              99,
              53,
              57,
              48,
              45,
              52,
              55,
              57,
              97,
              45,
              98,
              49,
              99,
              57,
              45,
              55,
              98,
              56,
              98,
              48,
              54,
              48,
              57,
              50,
              101,
              51,
              102,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              55,
              46,
              49,
              52,
              46,
              48,
              34,
              44,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              34,
              52,
              52,
              51,
              34,
              125,
              44,
              34,
              106,
              115,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              47,
              112,
              111,
              115,
              116,
              63,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              61,
              110,
              97,
              103,
              97,
              114,
              114,
              111,
              38,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              61,
              116,
              105,
              109,
              105,
              115,
              111,
              97,
              114,
              97,
              38,
              100,
              101,
              112,
              97,
              114,
              116,
              109,
              101,
              110,
              116,
              61,
              113,
              97,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 130,
          "responseSize": 638
        },
        "id": "aa53828e-d3fd-46c1-b5f7-43614e16271a",
        "assertions": [
          {
            "assertion": "Validate args.company",
            "skipped": false
          },
          {
            "assertion": "Validate args.location",
            "skipped": false
          },
          {
            "assertion": "Validate args.department",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5aab0776-4834-4df6-9649-790d9b3c9846",
          "length": 15,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6f34f03e-b801-4956-b2b3-ee85270e6c55"
        },
        "item": {
          "id": "531a7f20-53c9-4830-9763-29f356d95e9e",
          "name": "form data",
          "request": {
            "url": {
              "path": [
                "post"
              ],
              "host": [
                "{{POSTMAN_ECHO_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "email",
                  "value": "danginkgo@yahoo.com",
                  "type": "text"
                },
                {
                  "key": "username",
                  "value": "danrusu",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "e624c6af-2bc1-4b91-b819-07b7a971c883"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                "type": "text/javascript",
                "exec": [
                  "const expectedForm = {",
                  "    \"email\": \"danginkgo@yahoo.com\",",
                  "    \"username\": \"danrusu\"",
                  "};",
                  "const actualForm = pm.response.json().form;",
                  "",
                  "const deepTest = eval(globals.deepTest);",
                  "const testFunction = eval(globals.testFunction);",
                  "",
                  "deepTest(expectedForm)(actualForm)('form')(testFunction);"
                ],
                "_lastExecutionId": "7e9aad82-dd76-43f9-a995-508a402e5e81"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "post"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/x-www-form-urlencoded"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8e0ae02e-c4a0-4dbc-9917-3892a2cf96e6",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3AESqWipJDOdWoUscgBcb7lPi31hi4Jgrv.9vXPJ4P9rn6DL9pqhTM5%2FqR3RTsKqqCHLyoGR0NaxTk",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "content-length",
              "value": 293,
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "email",
                "value": "danginkgo@yahoo.com",
                "type": "text"
              },
              {
                "key": "username",
                "value": "danrusu",
                "type": "text"
              }
            ]
          }
        },
        "response": {
          "id": "6c58983e-b9b2-42dd-ab54-25df04d69176",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Encoding",
              "value": "gzip"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Mon, 09 Dec 2019 17:21:51 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"272-oymy/u4MTyipX4Dgnn2C+ISXMDM\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3ANMymGxA9bOnhCpzPfF_DikX9zx8z1JOi.hzlAlSl6JXxMa3UZ2y%2BB0Ze%2F8Jt4JaVh2VLaeIECEZc; Path=/; HttpOnly"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "430"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              97,
              114,
              103,
              115,
              34,
              58,
              123,
              125,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              125,
              44,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              58,
              123,
              125,
              44,
              34,
              102,
              111,
              114,
              109,
              34,
              58,
              123,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              100,
              97,
              110,
              103,
              105,
              110,
              107,
              103,
              111,
              64,
              121,
              97,
              104,
              111,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              100,
              97,
              110,
              114,
              117,
              115,
              117,
              34,
              125,
              44,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              123,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              58,
              34,
              50,
              57,
              51,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              34,
              42,
              47,
              42,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              34,
              44,
              34,
              99,
              97,
              99,
              104,
              101,
              45,
              99,
              111,
              110,
              116,
              114,
              111,
              108,
              34,
              58,
              34,
              110,
              111,
              45,
              99,
              97,
              99,
              104,
              101,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              117,
              108,
              116,
              105,
              112,
              97,
              114,
              116,
              47,
              102,
              111,
              114,
              109,
              45,
              100,
              97,
              116,
              97,
              59,
              32,
              98,
              111,
              117,
              110,
              100,
              97,
              114,
              121,
              61,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              55,
              57,
              52,
              55,
              54,
              57,
              55,
              49,
              52,
              57,
              50,
              57,
              54,
              54,
              57,
              55,
              51,
              52,
              53,
              50,
              53,
              49,
              57,
              54,
              34,
              44,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              34,
              58,
              34,
              115,
              97,
              105,
              108,
              115,
              46,
              115,
              105,
              100,
              61,
              115,
              37,
              51,
              65,
              69,
              83,
              113,
              87,
              105,
              112,
              74,
              68,
              79,
              100,
              87,
              111,
              85,
              115,
              99,
              103,
              66,
              99,
              98,
              55,
              108,
              80,
              105,
              51,
              49,
              104,
              105,
              52,
              74,
              103,
              114,
              118,
              46,
              57,
              118,
              88,
              80,
              74,
              52,
              80,
              57,
              114,
              110,
              54,
              68,
              76,
              57,
              112,
              113,
              104,
              84,
              77,
              53,
              37,
              50,
              70,
              113,
              82,
              51,
              82,
              84,
              115,
              75,
              113,
              113,
              67,
              72,
              76,
              121,
              111,
              71,
              82,
              48,
              78,
              97,
              120,
              84,
              107,
              34,
              44,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              56,
              101,
              48,
              97,
              101,
              48,
              50,
              101,
              45,
              99,
              52,
              97,
              48,
              45,
              52,
              100,
              98,
              99,
              45,
              57,
              57,
              49,
              55,
              45,
              51,
              56,
              57,
              50,
              97,
              50,
              99,
              102,
              57,
              54,
              101,
              54,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              55,
              46,
              49,
              52,
              46,
              48,
              34,
              44,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              34,
              52,
              52,
              51,
              34,
              125,
              44,
              34,
              106,
              115,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              47,
              112,
              111,
              115,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 127,
          "responseSize": 626
        },
        "id": "531a7f20-53c9-4830-9763-29f356d95e9e",
        "assertions": [
          {
            "assertion": "Validate form.email",
            "skipped": false
          },
          {
            "assertion": "Validate form.username",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "643d3ba1-e1a8-4734-99b8-16f72806a1a7",
          "length": 15,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "5e823916-4367-4f18-b61a-909e1ab2e181"
        },
        "item": {
          "id": "18a17cde-464c-4257-8733-167b3138a2df",
          "name": "delay 2s",
          "request": {
            "url": {
              "path": [
                "delay",
                "2"
              ],
              "host": [
                "{{POSTMAN_ECHO_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                "type": "text/javascript",
                "exec": [
                  "const getHeader = eval(globals.getHeader);",
                  "const prettify = eval(globals.prettify);",
                  "",
                  "pm.test('Status code is 200', ",
                  "    () =>pm.response.to.have.status(200)",
                  ");",
                  "",
                  "pm.test('Status code name is OK',",
                  "    () => pm.response.to.have.status(\"OK\")",
                  ");",
                  "",
                  "pm.test('Response time is above 2000ms', ",
                  "    () => pm.expect(pm.response.responseTime).to.be.above(2000)",
                  ");",
                  "",
                  "pm.test('Response body size is 13 B',",
                  "    () => {",
                  "        //const bodySize = pm.response.responseSize;",
                  "        console.log(`Headers ${prettify(pm.response.headers, null, 2)}`);",
                  "        const contentLength = parseInt(getHeader(pm, 'Content-Length'));",
                  "        pm.expect(contentLength).to.eql(13);",
                  "    }",
                  ");",
                  "",
                  "pm.test('Response delay is 2', ",
                  "    () =>  pm.expect(pm.response.json().delay).to.eql(\"2\")",
                  ");",
                  ""
                ],
                "_lastExecutionId": "c29afb31-87dd-4f99-9a63-269551adc130"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "delay",
              "2"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "97075ebe-df77-4a92-94a7-fe1e07bff3f0",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3ANMymGxA9bOnhCpzPfF_DikX9zx8z1JOi.hzlAlSl6JXxMa3UZ2y%2BB0Ze%2F8Jt4JaVh2VLaeIECEZc",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "f189dd98-da6b-4fc1-bf13-eac890ff3b29",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Mon, 09 Dec 2019 17:21:53 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"d-vb8pS8uHJYunqF73qADGxcv0Je8\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AOUUqRy679OAvrYuneqh-v97bukhH3NS0.SlRnRf3rMF9zgqLJyZGIfJOSm35KUW7kRnhqddt22ww; Path=/; HttpOnly"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "13"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              108,
              97,
              121,
              34,
              58,
              34,
              50,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2120,
          "responseSize": 13
        },
        "id": "18a17cde-464c-4257-8733-167b3138a2df",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Status code name is OK",
            "skipped": false
          },
          {
            "assertion": "Response time is above 2000ms",
            "skipped": false
          },
          {
            "assertion": "Response body size is 13 B",
            "skipped": false
          },
          {
            "assertion": "Response delay is 2",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b81d8e3a-7322-415f-8b6c-5f16683f8304",
          "length": 15,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b7846ee7-467f-48ed-8f6d-ce3ff2ac309c"
        },
        "item": {
          "id": "aea9afbc-96bf-4fe6-a128-508e41efd0cb",
          "name": "health check",
          "request": {
            "url": {
              "path": [
                "ping"
              ],
              "host": [
                "{{RESTFULL_BOOKER_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "token=16d2f037531ae80"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "27133bf9-421e-4b0b-9bf1-74c59e4a5505",
                "type": "text/javascript",
                "exec": [
                  "pm.globals.clear();",
                  "",
                  "pm.test('Status code name is \"Created\"', ",
                  "    () => pm.response.to.have.status(\"Created\")",
                  ");",
                  "",
                  "pm.test('Response text is \"Created\"', ",
                  "    () => pm.expect(pm.response.text()).to.eql(\"Created\")",
                  ");",
                  ""
                ],
                "_lastExecutionId": "f950f765-c9f6-4dee-9976-a9a9ebcb27d7"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "50a64363-0e4a-443c-abab-1edcafa9600a",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "c1ad6672-3b45-4667-9bea-f139629ac550"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "ping"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Cookie",
              "value": "token=16d2f037531ae80"
            },
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "db31cf1a-67e1-4b0d-b201-a32ebdad54f2",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "3ec517d7-968a-42d7-8646-62e924228d07",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Server",
              "value": "Cowboy"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "text/plain; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "7"
            },
            {
              "key": "Etag",
              "value": "W/\"7-rM9AyJuqT6iOan/xHh+AW+7K/T8\""
            },
            {
              "key": "Date",
              "value": "Mon, 09 Dec 2019 17:21:54 GMT"
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              67,
              114,
              101,
              97,
              116,
              101,
              100
            ]
          },
          "cookie": [],
          "responseTime": 627,
          "responseSize": 7
        },
        "id": "aea9afbc-96bf-4fe6-a128-508e41efd0cb",
        "assertions": [
          {
            "assertion": "Status code is 200 or 201",
            "skipped": false
          },
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false
          },
          {
            "assertion": "Status code name is \"Created\"",
            "skipped": false
          },
          {
            "assertion": "Response text is \"Created\"",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "6c8fac0f-a6a2-479a-bb2c-242588d1abf6",
          "length": 15,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f423756a-0f95-4330-a896-22596eff5790"
        },
        "item": {
          "id": "c4f53160-439c-4662-97cc-78453aeaabc4",
          "name": "create token",
          "request": {
            "url": {
              "path": [
                "auth"
              ],
              "host": [
                "{{RESTFULL_BOOKER_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "22426ed2-1321-48be-9010-2e89e3f7e9f4",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Token is retrieven as a string\", function () {",
                  "    ",
                  "    var jsonData = pm.response.json(); // parse JSON from body",
                  "    ",
                  "    console.log(jsonData);",
                  "    console.log(JSON.stringify(jsonData, null, 2));",
                  "    console.log(`jsonData.token: ${jsonData.token}`);",
                  "    ",
                  "    console.log(`jsonData.value ${jsonData.value}`); // should be undefined",
                  "    pm.expect(jsonData.token).to.be.a('string');",
                  "    ",
                  "    // auto generated snipet - Set an environment variable",
                  "    // pm.globals.set(\"variable_key\", \"variable_value\");",
                  "    pm.globals.set(\"token\", jsonData.token);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "7d4ff71c-b5d1-4416-b04f-19dfa2bea05e"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "32067d93-e91f-48e8-b3fc-f741a9502537",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "611d9ca3-2628-4ac7-bb54-9222ce0cc721"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "auth"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "71356997-b073-4503-9df1-7dff3ccee081",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "content-length",
              "value": 63,
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}"
          }
        },
        "response": {
          "id": "ee58c88e-7a1d-428e-9d77-236e459af103",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Cowboy"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "27"
            },
            {
              "key": "Etag",
              "value": "W/\"1b-YD0m8I8KJBrGHeO2bK6eHxM4NE8\""
            },
            {
              "key": "Date",
              "value": "Mon, 09 Dec 2019 17:21:54 GMT"
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              54,
              99,
              54,
              49,
              101,
              56,
              52,
              51,
              56,
              52,
              55,
              98,
              98,
              50,
              50,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 146,
          "responseSize": 27
        },
        "id": "c4f53160-439c-4662-97cc-78453aeaabc4",
        "assertions": [
          {
            "assertion": "Status code is 200 or 201",
            "skipped": false
          },
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false
          },
          {
            "assertion": "Token is retrieven as a string",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "82b4d84e-699e-4721-afea-5573189a9400",
          "length": 15,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "2749a004-042d-4b8c-8240-38c0b92bb41d"
        },
        "item": {
          "id": "3c54661b-188f-4713-b91a-1a0018f83097",
          "name": "bookings ids",
          "request": {
            "url": {
              "path": [
                "booking"
              ],
              "host": [
                "{{RESTFULL_BOOKER_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "4d64b293-208a-4f86-a466-9d18c4f0195f",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "9f9149d0-59eb-4bd2-a9a9-c7be484fd6a6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a13a1fc3-bb5c-4cac-9357-a717dea1b3f9",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "09acc56c-bd23-4f42-a9ea-56cbfe858f07"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "booking"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b553ec54-fcde-4b3e-8b08-e747d2def2c5",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "07ccd5d4-4ff9-4603-9845-594a0fc14a7b",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Cowboy"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "162"
            },
            {
              "key": "Etag",
              "value": "W/\"a2-qjwYpiqg2B6mQa48jvfDYnSJ0R8\""
            },
            {
              "key": "Date",
              "value": "Mon, 09 Dec 2019 17:21:54 GMT"
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              55,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              48,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              56,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              54,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 128,
          "responseSize": 162
        },
        "id": "3c54661b-188f-4713-b91a-1a0018f83097",
        "assertions": [
          {
            "assertion": "Status code is 200 or 201",
            "skipped": false
          },
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "579843c6-2294-4870-90a7-8c6939208567",
          "length": 15,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2b0a05c2-8c6f-4955-ae6d-0d22008c63b7"
        },
        "item": {
          "id": "937a658d-0121-4ec3-80fa-bd06deaa32db",
          "name": "create booking",
          "request": {
            "url": {
              "path": [
                "booking"
              ],
              "host": [
                "{{RESTFULL_BOOKER_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f243060f-fb2a-4756-b1f8-11f833fd62db",
                "type": "text/javascript",
                "exec": [
                  "const newBookingId = pm.response.json().bookingid;",
                  "console.log(`New booking id: ${newBookingId}`);",
                  "",
                  "pm.globals.set('newBookingId', newBookingId);"
                ],
                "_lastExecutionId": "c92ec7ad-f7fc-42e4-9a1b-54b1aa43a0c1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "bca49a6c-bf22-443e-b6b8-27c9684a46f9",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "dc1a0359-ce8d-43da-89b0-d76991fecd82"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "booking"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "693b8ea6-4180-4514-94bf-01a2543f977d",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "content-length",
              "value": 248,
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
          }
        },
        "response": {
          "id": "aa313b0a-31c4-4fa7-9b07-930a284366c5",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Cowboy"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "195"
            },
            {
              "key": "Etag",
              "value": "W/\"c3-mr+ToVU3dK7bNqxVpsnhD1SC7cM\""
            },
            {
              "key": "Date",
              "value": "Mon, 09 Dec 2019 17:21:55 GMT"
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              49,
              44,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              34,
              58,
              123,
              34,
              102,
              105,
              114,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              105,
              109,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              114,
              111,
              119,
              110,
              34,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              49,
              49,
              44,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              112,
              97,
              105,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              100,
              97,
              116,
              101,
              115,
              34,
              58,
              123,
              34,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              49,
              56,
              45,
              48,
              49,
              45,
              48,
              49,
              34,
              44,
              34,
              99,
              104,
              101,
              99,
              107,
              111,
              117,
              116,
              34,
              58,
              34,
              50,
              48,
              49,
              57,
              45,
              48,
              49,
              45,
              48,
              49,
              34,
              125,
              44,
              34,
              97,
              100,
              100,
              105,
              116,
              105,
              111,
              110,
              97,
              108,
              110,
              101,
              101,
              100,
              115,
              34,
              58,
              34,
              66,
              114,
              101,
              97,
              107,
              102,
              97,
              115,
              116,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 134,
          "responseSize": 195
        },
        "id": "937a658d-0121-4ec3-80fa-bd06deaa32db",
        "assertions": [
          {
            "assertion": "Status code is 200 or 201",
            "skipped": false
          },
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "55aa0051-54b4-435d-b98a-360090866573",
          "length": 15,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "e82739d0-157b-4b1e-b833-73f52599de51"
        },
        "item": {
          "id": "0db50bc2-7aef-46a4-9b9a-d9bad645e3d0",
          "name": "booking by id",
          "request": {
            "url": {
              "path": [
                "booking",
                "{{newBookingId}}"
              ],
              "host": [
                "{{RESTFULL_BOOKER_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e676f020-1592-41c5-9bb2-a209f776b2a8",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "36d9d47d-97fa-46b2-82f2-0adf20dfa461"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "eef0023a-9454-4ef2-be7e-6df7edab294b",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "2d2afb8b-5855-4edb-a569-30d244cf5c96"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "booking",
              "11"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "09b37077-1447-4155-8348-f6663a0b7788",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "193399c6-267b-4ebe-988e-afed4c2071e7",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Cowboy"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "168"
            },
            {
              "key": "Etag",
              "value": "W/\"a8-p5uB2C7mxZA3HXJZF+tJCDJr8VE\""
            },
            {
              "key": "Date",
              "value": "Mon, 09 Dec 2019 17:21:55 GMT"
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              102,
              105,
              114,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              105,
              109,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              114,
              111,
              119,
              110,
              34,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              49,
              49,
              44,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              112,
              97,
              105,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              100,
              97,
              116,
              101,
              115,
              34,
              58,
              123,
              34,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              49,
              56,
              45,
              48,
              49,
              45,
              48,
              49,
              34,
              44,
              34,
              99,
              104,
              101,
              99,
              107,
              111,
              117,
              116,
              34,
              58,
              34,
              50,
              48,
              49,
              57,
              45,
              48,
              49,
              45,
              48,
              49,
              34,
              125,
              44,
              34,
              97,
              100,
              100,
              105,
              116,
              105,
              111,
              110,
              97,
              108,
              110,
              101,
              101,
              100,
              115,
              34,
              58,
              34,
              66,
              114,
              101,
              97,
              107,
              102,
              97,
              115,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 129,
          "responseSize": 168
        },
        "id": "0db50bc2-7aef-46a4-9b9a-d9bad645e3d0",
        "assertions": [
          {
            "assertion": "Status code is 200 or 201",
            "skipped": false
          },
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "7cbacbd5-5b37-44b0-9872-b8b8e45063b0",
          "length": 15,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4dc9ffe9-fdf1-4518-a283-9dc6c17b68bf"
        },
        "item": {
          "id": "2114270d-2933-4acc-a514-8a3f4ee94afb",
          "name": "update booking",
          "request": {
            "url": {
              "path": [
                "booking",
                "{{newBookingId}}"
              ],
              "host": [
                "{{RESTFULL_BOOKER_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "token={{token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2020-01-01\",\r\n        \"checkout\" : \"2020-01-10\"\r\n    },\r\n    \"additionalneeds\": \"none\"\r\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "74710eec-6fac-4f4e-9bf3-b18a2593595a",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "c8c839b3-10de-4e8d-8113-3ab3b7b54133"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f4276e33-94a1-4d6c-a44f-b16be39655f7",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "385ed620-1898-4385-be0b-fd7c9e2f1558"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "booking",
              "11"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Cookie",
              "value": "token=6c61e843847bb22"
            },
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e042db50-9ed5-4330-9295-c1607531d189",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "content-length",
              "value": 243,
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2020-01-01\",\r\n        \"checkout\" : \"2020-01-10\"\r\n    },\r\n    \"additionalneeds\": \"none\"\r\n}"
          }
        },
        "response": {
          "id": "1ecd57e8-396a-47f2-abf5-3806fe623207",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Cowboy"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "164"
            },
            {
              "key": "Etag",
              "value": "W/\"a4-yjpo4Io7He0qWi9HlIhkc365B84\""
            },
            {
              "key": "Date",
              "value": "Mon, 09 Dec 2019 17:21:55 GMT"
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              102,
              105,
              114,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              105,
              109,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              114,
              111,
              119,
              110,
              34,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              49,
              49,
              44,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              112,
              97,
              105,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              100,
              97,
              116,
              101,
              115,
              34,
              58,
              123,
              34,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              48,
              45,
              48,
              49,
              45,
              48,
              49,
              34,
              44,
              34,
              99,
              104,
              101,
              99,
              107,
              111,
              117,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              48,
              45,
              48,
              49,
              45,
              49,
              48,
              34,
              125,
              44,
              34,
              97,
              100,
              100,
              105,
              116,
              105,
              111,
              110,
              97,
              108,
              110,
              101,
              101,
              100,
              115,
              34,
              58,
              34,
              110,
              111,
              110,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 137,
          "responseSize": 164
        },
        "id": "2114270d-2933-4acc-a514-8a3f4ee94afb",
        "assertions": [
          {
            "assertion": "Status code is 200 or 201",
            "skipped": false
          },
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "c84fc917-62e7-471a-ac30-49fa2555cc51",
          "length": 15,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b3cdd214-304d-41e6-8ab4-208f3de3f50a"
        },
        "item": {
          "id": "fab094b4-b769-4d92-8353-dcb2ad68447f",
          "name": "partial update booking",
          "request": {
            "url": {
              "path": [
                "booking",
                "{{newBookingId}}"
              ],
              "host": [
                "{{RESTFULL_BOOKER_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "token={{token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\"\r\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e9de7d4f-41da-441f-ada1-8aab933530fd",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "9d0f090c-a174-4c54-9b98-9a46e2e39bda"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "0820127e-398c-47f2-9eb7-89afa0762f3f",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "5fb93ace-dc50-45b6-abf3-d6548de881f1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "booking",
              "11"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Cookie",
              "value": "token=6c61e843847bb22"
            },
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "bf29be63-3542-429e-ac9b-0eb7e202af05",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "content-length",
              "value": 56,
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\"\r\n}"
          }
        },
        "response": {
          "id": "238398d8-a61b-4dd1-96af-7da443e4e25c",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Cowboy"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "164"
            },
            {
              "key": "Etag",
              "value": "W/\"a4-yjpo4Io7He0qWi9HlIhkc365B84\""
            },
            {
              "key": "Date",
              "value": "Mon, 09 Dec 2019 17:21:55 GMT"
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              102,
              105,
              114,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              105,
              109,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              114,
              111,
              119,
              110,
              34,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              49,
              49,
              44,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              112,
              97,
              105,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              100,
              97,
              116,
              101,
              115,
              34,
              58,
              123,
              34,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              48,
              45,
              48,
              49,
              45,
              48,
              49,
              34,
              44,
              34,
              99,
              104,
              101,
              99,
              107,
              111,
              117,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              48,
              45,
              48,
              49,
              45,
              49,
              48,
              34,
              125,
              44,
              34,
              97,
              100,
              100,
              105,
              116,
              105,
              111,
              110,
              97,
              108,
              110,
              101,
              101,
              100,
              115,
              34,
              58,
              34,
              110,
              111,
              110,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 129,
          "responseSize": 164
        },
        "id": "fab094b4-b769-4d92-8353-dcb2ad68447f",
        "assertions": [
          {
            "assertion": "Status code is 200 or 201",
            "skipped": false
          },
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5d39405b-6999-4147-9c2e-f3b9c3829fc6",
          "length": 15,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c255da1a-a81b-45c2-8354-f6ed12dcde8d"
        },
        "item": {
          "id": "b6869dc5-048b-4884-83d8-a45b4e6508ad",
          "name": "delete booking",
          "request": {
            "url": {
              "path": [
                "booking",
                "{{newBookingId}}"
              ],
              "host": [
                "{{RESTFULL_BOOKER_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "token={{token}}"
              }
            ],
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2020-01-01\",\r\n        \"checkout\" : \"2020-01-10\"\r\n    }\r\n}"
            },
            "auth": {
              "type": "basic",
              "basic": [
                {
                  "type": "string",
                  "value": "admin@rms.com",
                  "key": "username"
                },
                {
                  "type": "string",
                  "value": "P@ssword1",
                  "key": "password"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ff17718e-e2fe-400a-9ed7-be1b58e0129d",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "2aa79c48-80da-4ad3-b8b7-f28d41395042"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "edb1bea6-7b3a-4152-a8ad-c01e4a4b5d17",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "a7fa2af7-7d51-4819-8b9f-aff14732d409"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "booking",
              "11"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Cookie",
              "value": "token=6c61e843847bb22"
            },
            {
              "key": "Authorization",
              "value": "Basic YWRtaW5Acm1zLmNvbTpQQHNzd29yZDE=",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "58418cf2-04b8-42b7-adf0-461be953ba3c",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "content-length",
              "value": 210,
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2020-01-01\",\r\n        \"checkout\" : \"2020-01-10\"\r\n    }\r\n}"
          },
          "auth": {
            "type": "basic",
            "basic": [
              {
                "type": "string",
                "value": "admin@rms.com",
                "key": "username"
              },
              {
                "type": "string",
                "value": "P@ssword1",
                "key": "password"
              }
            ]
          }
        },
        "response": {
          "id": "68b03ec7-9d97-49a2-a3d2-66febace7bcf",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Server",
              "value": "Cowboy"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "text/plain; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "7"
            },
            {
              "key": "Etag",
              "value": "W/\"7-rM9AyJuqT6iOan/xHh+AW+7K/T8\""
            },
            {
              "key": "Date",
              "value": "Mon, 09 Dec 2019 17:21:55 GMT"
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              67,
              114,
              101,
              97,
              116,
              101,
              100
            ]
          },
          "cookie": [],
          "responseTime": 133,
          "responseSize": 7
        },
        "id": "b6869dc5-048b-4884-83d8-a45b4e6508ad",
        "assertions": [
          {
            "assertion": "Status code is 200 or 201",
            "skipped": false
          },
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 2255
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 500",
          "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "2ece2f5d7ed84fcfaec0aac892fc236c",
          "id": "4308abfc-2f7e-4a0f-b7b3-909ae044336f",
          "timestamp": 1575912111073,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "ada83bc3-1659-48a8-a8f5-afecc729cc06",
          "name": "500 Internal Server Error",
          "request": {
            "url": {
              "path": [
                "status",
                "500"
              ],
              "host": [
                "{{POSTMAN_ECHO_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', ",
                  "    () =>pm.response.to.have.status(200)",
                  ");"
                ],
                "_lastExecutionId": "f1c5b79a-59e1-4d52-bad6-bccf5a4d1b56"
              }
            }
          ]
        },
        "parent": {
          "id": "6108698b-59a3-446f-9fe6-8ca228ee643d",
          "name": "ECHO_SERVICE",
          "description": {
            "content": "https://docs.postman-echo.com/",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d272c139-bc51-4311-b82a-79eb0c61531a",
              "name": "setup & utils",
              "request": {
                "url": {
                  "protocol": "https",
                  "host": [
                    "www",
                    "google",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "HEAD",
                "body": {
                  "mode": "raw",
                  "raw": "{ \n\t\"name\": \"mark\", \n\t\"age\": 51, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n\t\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log(`'${pm.info.requestName}' Request Pre-request Script`);",
                      "",
                      "pm.globals.clear();",
                      "",
                      "const deepTest = expected => actual => (prefix = 'object') => testFunction => {        ",
                      "    ",
                      "    if (typeof expected !== 'object' || expected === null){",
                      "        testFunction(expected, actual, prefix);",
                      "        return;",
                      "    }",
                      "",
                      "    if (Array.isArray(expected)){                     ",
                      "        expected.forEach((element, index) => ",
                      "            deepTest(expected[index])(actual[index])(`${prefix}[${index}]`)(testFunction)",
                      "        );",
                      "        return;",
                      "    }",
                      "",
                      "    if (typeof expected === 'object'){          ",
                      "        Object.keys(expected).forEach(key => ",
                      "            deepTest(expected[key])(actual[key])(`${prefix}.${key}`)(testFunction)",
                      "        );            ",
                      "        return;",
                      "    }",
                      "};",
                      "",
                      "const testFunction = (expected, actual, prefix) =>",
                      "    pm.test(`Validate ${prefix}`, () => pm.expect(expected).eql(actual));",
                      "",
                      "const prettify = json => JSON.stringify(json, null, 2);",
                      "",
                      "const getHeader = (pm, headerName) => {",
                      "    const header = pm.response.headers.find(header => header.key == headerName); ",
                      "    return header ? header.value : undefined;",
                      "}",
                      "",
                      "// SAVE FUCTIONALITY FOR REUSE",
                      "postman.setGlobalVariable('deepTest', deepTest);",
                      "//globals.deepTest = deepTest;  // this does not work",
                      "postman.setGlobalVariable('testFunction', testFunction);",
                      "postman.setGlobalVariable('prettify', prettify);",
                      "postman.setGlobalVariable('getHeader', getHeader);",
                      "",
                      "/* Usage within other sripts",
                      "// i.e.",
                      "const expectedUser = { name: \"mark\", age: 50, isAdmin: true };",
                      "const actualUser = { name: \"mark\", age: 51, isAdmin: false };",
                      "const deepTest = eval(globals.deepTest);",
                      "// or const deepTest = eval(postman.getGlobalVariable('deepTest'));",
                      "const testFunction = eval(globals.testFunction);",
                      "deepTest(expectedUser)(actualUser)('Validate user')(testFunction);",
                      "*/",
                      ""
                    ],
                    "_lastExecutionId": "332e624f-ac55-4357-9927-858bd1a5a3ce"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log(`'${pm.info.requestName}' Request Tests`);"
                    ],
                    "_lastExecutionId": "09afdf49-8eb1-4789-b524-cc214ded430b"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "ada83bc3-1659-48a8-a8f5-afecc729cc06",
              "name": "500 Internal Server Error",
              "request": {
                "url": {
                  "path": [
                    "status",
                    "500"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', ",
                      "    () =>pm.response.to.have.status(200)",
                      ");"
                    ],
                    "_lastExecutionId": "f1c5b79a-59e1-4d52-bad6-bccf5a4d1b56"
                  }
                }
              ]
            },
            {
              "id": "b55dcdfc-1b10-4cc0-851f-8a782dfa1cb7",
              "name": "local IP",
              "request": {
                "url": {
                  "path": [
                    "ip"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', ",
                      "    () => pm.response.to.have.status(200)",
                      ");",
                      "",
                      "pm.test('Response JSON \"ip\" property matches an IP Regex',",
                      "    () => {",
                      "        const ip = pm.response.json().ip;",
                      "        console.log(`ip: ${ip}`);",
                      "        ",
                      "        const ipMatcherRegex = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/;",
                      "        ",
                      "        pm.expect(ip).to.match(ipMatcherRegex);",
                      "    }",
                      ");"
                    ],
                    "_lastExecutionId": "15f5bbcf-c31d-48d2-8107-7cc8a2b28ed8"
                  }
                }
              ]
            },
            {
              "id": "a6a5e079-b472-42f8-b8ca-a6c4e9bc8c42",
              "name": "JSON body",
              "request": {
                "url": {
                  "path": [
                    "post"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \n\t\"name\": \"Mark Johnson\", \n\t\"age\": 31, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a2dc4027-5131-46a2-8e6e-b958d221419a"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "const expectedUser = { ",
                      "    name: \"Mark Johnson\", ",
                      "    age: 50, ",
                      "    isAdmin: true, ",
                      "    resourceIds: [1111, 1112, 1113] ",
                      "    ",
                      "}; // wrong age and resourcesIds[1]",
                      "",
                      "const actualUser = pm.response.json().json;",
                      "",
                      "// Chai deep equal assertion",
                      "pm.test('Validate user (deep equal)', () => pm.expect(expectedUser).to.eql(actualUser));",
                      "",
                      "// Enhanced verification - one test / value",
                      "const deepTest = eval(globals.deepTest);",
                      "const testFunction = eval(globals.testFunction);",
                      "deepTest(expectedUser)(actualUser)('user')(testFunction);",
                      "",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "f995c6a2-e25c-4bcc-909b-63f3a2f570e7"
                  }
                }
              ]
            },
            {
              "id": "aa53828e-d3fd-46c1-b5f7-43614e16271a",
              "name": "query string parameters",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "post"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "company",
                      "value": "nagarro"
                    },
                    {
                      "key": "location",
                      "value": "timisoara"
                    },
                    {
                      "key": "department",
                      "value": "qa"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "794e673c-b258-408b-bd91-575ee6f4d5eb"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "const expectedArgs = {",
                      "        \"company\": \"nagarro\",",
                      "        \"location\": \"timisoara\",",
                      "        \"department\": \"qa\"",
                      "    };",
                      "const actualArgs = pm.response.json().args;",
                      "",
                      "const deepTest = eval(globals.deepTest);",
                      "const testFunction = eval(globals.testFunction);",
                      "",
                      "deepTest(expectedArgs)(actualArgs)('args')(testFunction);"
                    ],
                    "_lastExecutionId": "710c28fc-fcbf-43d6-8652-d03528dd8628"
                  }
                }
              ]
            },
            {
              "id": "531a7f20-53c9-4830-9763-29f356d95e9e",
              "name": "form data",
              "request": {
                "url": {
                  "path": [
                    "post"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "email",
                      "value": "danginkgo@yahoo.com",
                      "type": "text"
                    },
                    {
                      "key": "username",
                      "value": "danrusu",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "e624c6af-2bc1-4b91-b819-07b7a971c883"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "const expectedForm = {",
                      "    \"email\": \"danginkgo@yahoo.com\",",
                      "    \"username\": \"danrusu\"",
                      "};",
                      "const actualForm = pm.response.json().form;",
                      "",
                      "const deepTest = eval(globals.deepTest);",
                      "const testFunction = eval(globals.testFunction);",
                      "",
                      "deepTest(expectedForm)(actualForm)('form')(testFunction);"
                    ],
                    "_lastExecutionId": "7e9aad82-dd76-43f9-a995-508a402e5e81"
                  }
                }
              ]
            },
            {
              "id": "18a17cde-464c-4257-8733-167b3138a2df",
              "name": "delay 2s",
              "request": {
                "url": {
                  "path": [
                    "delay",
                    "2"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                    "type": "text/javascript",
                    "exec": [
                      "const getHeader = eval(globals.getHeader);",
                      "const prettify = eval(globals.prettify);",
                      "",
                      "pm.test('Status code is 200', ",
                      "    () =>pm.response.to.have.status(200)",
                      ");",
                      "",
                      "pm.test('Status code name is OK',",
                      "    () => pm.response.to.have.status(\"OK\")",
                      ");",
                      "",
                      "pm.test('Response time is above 2000ms', ",
                      "    () => pm.expect(pm.response.responseTime).to.be.above(2000)",
                      ");",
                      "",
                      "pm.test('Response body size is 13 B',",
                      "    () => {",
                      "        //const bodySize = pm.response.responseSize;",
                      "        console.log(`Headers ${prettify(pm.response.headers, null, 2)}`);",
                      "        const contentLength = parseInt(getHeader(pm, 'Content-Length'));",
                      "        pm.expect(contentLength).to.eql(13);",
                      "    }",
                      ");",
                      "",
                      "pm.test('Response delay is 2', ",
                      "    () =>  pm.expect(pm.response.json().delay).to.eql(\"2\")",
                      ");",
                      ""
                    ],
                    "_lastExecutionId": "c29afb31-87dd-4f99-9a63-269551adc130"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "95db2334-dde7-4ab9-844d-addde171276c",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('ECHO_SERVICE FOLDER Pre-request Scripts');",
                  ""
                ],
                "_lastExecutionId": "6cdbfcaf-0395-4936-89d3-2b15df9b9f89"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "bdadc87d-58fe-4342-bf95-793beec688c0",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('ECHO_SERVICE Folder Tests');"
                ],
                "_lastExecutionId": "cdcbdac9-3c73-4c3c-81ea-adada102773a"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "cursor": {
          "ref": "4d6fd988-c75a-4fa1-b132-bdb88527a9ab",
          "length": 15,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "755feaca-63d2-4aec-97f1-14bf5583c8e7",
          "scriptId": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
          "execution": "f1c5b79a-59e1-4d52-bad6-bccf5a4d1b56"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Validate user (deep equal)",
          "message": "expected { Object (name, age, ...) } to deeply equal { Object (name, age, ...) }",
          "stack": "AssertionError: expected { Object (name, age, ...) } to deeply equal { Object (name, age, ...) }\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "8794bdd570c4db9732c5dd86af478df1",
          "id": "583fac44-c743-4ca7-8090-207c1d6d1423",
          "timestamp": 1575912111464,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "a6a5e079-b472-42f8-b8ca-a6c4e9bc8c42",
          "name": "JSON body",
          "request": {
            "url": {
              "path": [
                "post"
              ],
              "host": [
                "{{POSTMAN_ECHO_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{ \n\t\"name\": \"Mark Johnson\", \n\t\"age\": 31, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "a2dc4027-5131-46a2-8e6e-b958d221419a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                "type": "text/javascript",
                "exec": [
                  "const expectedUser = { ",
                  "    name: \"Mark Johnson\", ",
                  "    age: 50, ",
                  "    isAdmin: true, ",
                  "    resourceIds: [1111, 1112, 1113] ",
                  "    ",
                  "}; // wrong age and resourcesIds[1]",
                  "",
                  "const actualUser = pm.response.json().json;",
                  "",
                  "// Chai deep equal assertion",
                  "pm.test('Validate user (deep equal)', () => pm.expect(expectedUser).to.eql(actualUser));",
                  "",
                  "// Enhanced verification - one test / value",
                  "const deepTest = eval(globals.deepTest);",
                  "const testFunction = eval(globals.testFunction);",
                  "deepTest(expectedUser)(actualUser)('user')(testFunction);",
                  "",
                  "",
                  ""
                ],
                "_lastExecutionId": "f995c6a2-e25c-4bcc-909b-63f3a2f570e7"
              }
            }
          ]
        },
        "parent": {
          "id": "6108698b-59a3-446f-9fe6-8ca228ee643d",
          "name": "ECHO_SERVICE",
          "description": {
            "content": "https://docs.postman-echo.com/",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d272c139-bc51-4311-b82a-79eb0c61531a",
              "name": "setup & utils",
              "request": {
                "url": {
                  "protocol": "https",
                  "host": [
                    "www",
                    "google",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "HEAD",
                "body": {
                  "mode": "raw",
                  "raw": "{ \n\t\"name\": \"mark\", \n\t\"age\": 51, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n\t\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log(`'${pm.info.requestName}' Request Pre-request Script`);",
                      "",
                      "pm.globals.clear();",
                      "",
                      "const deepTest = expected => actual => (prefix = 'object') => testFunction => {        ",
                      "    ",
                      "    if (typeof expected !== 'object' || expected === null){",
                      "        testFunction(expected, actual, prefix);",
                      "        return;",
                      "    }",
                      "",
                      "    if (Array.isArray(expected)){                     ",
                      "        expected.forEach((element, index) => ",
                      "            deepTest(expected[index])(actual[index])(`${prefix}[${index}]`)(testFunction)",
                      "        );",
                      "        return;",
                      "    }",
                      "",
                      "    if (typeof expected === 'object'){          ",
                      "        Object.keys(expected).forEach(key => ",
                      "            deepTest(expected[key])(actual[key])(`${prefix}.${key}`)(testFunction)",
                      "        );            ",
                      "        return;",
                      "    }",
                      "};",
                      "",
                      "const testFunction = (expected, actual, prefix) =>",
                      "    pm.test(`Validate ${prefix}`, () => pm.expect(expected).eql(actual));",
                      "",
                      "const prettify = json => JSON.stringify(json, null, 2);",
                      "",
                      "const getHeader = (pm, headerName) => {",
                      "    const header = pm.response.headers.find(header => header.key == headerName); ",
                      "    return header ? header.value : undefined;",
                      "}",
                      "",
                      "// SAVE FUCTIONALITY FOR REUSE",
                      "postman.setGlobalVariable('deepTest', deepTest);",
                      "//globals.deepTest = deepTest;  // this does not work",
                      "postman.setGlobalVariable('testFunction', testFunction);",
                      "postman.setGlobalVariable('prettify', prettify);",
                      "postman.setGlobalVariable('getHeader', getHeader);",
                      "",
                      "/* Usage within other sripts",
                      "// i.e.",
                      "const expectedUser = { name: \"mark\", age: 50, isAdmin: true };",
                      "const actualUser = { name: \"mark\", age: 51, isAdmin: false };",
                      "const deepTest = eval(globals.deepTest);",
                      "// or const deepTest = eval(postman.getGlobalVariable('deepTest'));",
                      "const testFunction = eval(globals.testFunction);",
                      "deepTest(expectedUser)(actualUser)('Validate user')(testFunction);",
                      "*/",
                      ""
                    ],
                    "_lastExecutionId": "332e624f-ac55-4357-9927-858bd1a5a3ce"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log(`'${pm.info.requestName}' Request Tests`);"
                    ],
                    "_lastExecutionId": "09afdf49-8eb1-4789-b524-cc214ded430b"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "ada83bc3-1659-48a8-a8f5-afecc729cc06",
              "name": "500 Internal Server Error",
              "request": {
                "url": {
                  "path": [
                    "status",
                    "500"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', ",
                      "    () =>pm.response.to.have.status(200)",
                      ");"
                    ],
                    "_lastExecutionId": "f1c5b79a-59e1-4d52-bad6-bccf5a4d1b56"
                  }
                }
              ]
            },
            {
              "id": "b55dcdfc-1b10-4cc0-851f-8a782dfa1cb7",
              "name": "local IP",
              "request": {
                "url": {
                  "path": [
                    "ip"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', ",
                      "    () => pm.response.to.have.status(200)",
                      ");",
                      "",
                      "pm.test('Response JSON \"ip\" property matches an IP Regex',",
                      "    () => {",
                      "        const ip = pm.response.json().ip;",
                      "        console.log(`ip: ${ip}`);",
                      "        ",
                      "        const ipMatcherRegex = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/;",
                      "        ",
                      "        pm.expect(ip).to.match(ipMatcherRegex);",
                      "    }",
                      ");"
                    ],
                    "_lastExecutionId": "15f5bbcf-c31d-48d2-8107-7cc8a2b28ed8"
                  }
                }
              ]
            },
            {
              "id": "a6a5e079-b472-42f8-b8ca-a6c4e9bc8c42",
              "name": "JSON body",
              "request": {
                "url": {
                  "path": [
                    "post"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \n\t\"name\": \"Mark Johnson\", \n\t\"age\": 31, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a2dc4027-5131-46a2-8e6e-b958d221419a"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "const expectedUser = { ",
                      "    name: \"Mark Johnson\", ",
                      "    age: 50, ",
                      "    isAdmin: true, ",
                      "    resourceIds: [1111, 1112, 1113] ",
                      "    ",
                      "}; // wrong age and resourcesIds[1]",
                      "",
                      "const actualUser = pm.response.json().json;",
                      "",
                      "// Chai deep equal assertion",
                      "pm.test('Validate user (deep equal)', () => pm.expect(expectedUser).to.eql(actualUser));",
                      "",
                      "// Enhanced verification - one test / value",
                      "const deepTest = eval(globals.deepTest);",
                      "const testFunction = eval(globals.testFunction);",
                      "deepTest(expectedUser)(actualUser)('user')(testFunction);",
                      "",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "f995c6a2-e25c-4bcc-909b-63f3a2f570e7"
                  }
                }
              ]
            },
            {
              "id": "aa53828e-d3fd-46c1-b5f7-43614e16271a",
              "name": "query string parameters",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "post"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "company",
                      "value": "nagarro"
                    },
                    {
                      "key": "location",
                      "value": "timisoara"
                    },
                    {
                      "key": "department",
                      "value": "qa"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "794e673c-b258-408b-bd91-575ee6f4d5eb"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "const expectedArgs = {",
                      "        \"company\": \"nagarro\",",
                      "        \"location\": \"timisoara\",",
                      "        \"department\": \"qa\"",
                      "    };",
                      "const actualArgs = pm.response.json().args;",
                      "",
                      "const deepTest = eval(globals.deepTest);",
                      "const testFunction = eval(globals.testFunction);",
                      "",
                      "deepTest(expectedArgs)(actualArgs)('args')(testFunction);"
                    ],
                    "_lastExecutionId": "710c28fc-fcbf-43d6-8652-d03528dd8628"
                  }
                }
              ]
            },
            {
              "id": "531a7f20-53c9-4830-9763-29f356d95e9e",
              "name": "form data",
              "request": {
                "url": {
                  "path": [
                    "post"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "email",
                      "value": "danginkgo@yahoo.com",
                      "type": "text"
                    },
                    {
                      "key": "username",
                      "value": "danrusu",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "e624c6af-2bc1-4b91-b819-07b7a971c883"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "const expectedForm = {",
                      "    \"email\": \"danginkgo@yahoo.com\",",
                      "    \"username\": \"danrusu\"",
                      "};",
                      "const actualForm = pm.response.json().form;",
                      "",
                      "const deepTest = eval(globals.deepTest);",
                      "const testFunction = eval(globals.testFunction);",
                      "",
                      "deepTest(expectedForm)(actualForm)('form')(testFunction);"
                    ],
                    "_lastExecutionId": "7e9aad82-dd76-43f9-a995-508a402e5e81"
                  }
                }
              ]
            },
            {
              "id": "18a17cde-464c-4257-8733-167b3138a2df",
              "name": "delay 2s",
              "request": {
                "url": {
                  "path": [
                    "delay",
                    "2"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                    "type": "text/javascript",
                    "exec": [
                      "const getHeader = eval(globals.getHeader);",
                      "const prettify = eval(globals.prettify);",
                      "",
                      "pm.test('Status code is 200', ",
                      "    () =>pm.response.to.have.status(200)",
                      ");",
                      "",
                      "pm.test('Status code name is OK',",
                      "    () => pm.response.to.have.status(\"OK\")",
                      ");",
                      "",
                      "pm.test('Response time is above 2000ms', ",
                      "    () => pm.expect(pm.response.responseTime).to.be.above(2000)",
                      ");",
                      "",
                      "pm.test('Response body size is 13 B',",
                      "    () => {",
                      "        //const bodySize = pm.response.responseSize;",
                      "        console.log(`Headers ${prettify(pm.response.headers, null, 2)}`);",
                      "        const contentLength = parseInt(getHeader(pm, 'Content-Length'));",
                      "        pm.expect(contentLength).to.eql(13);",
                      "    }",
                      ");",
                      "",
                      "pm.test('Response delay is 2', ",
                      "    () =>  pm.expect(pm.response.json().delay).to.eql(\"2\")",
                      ");",
                      ""
                    ],
                    "_lastExecutionId": "c29afb31-87dd-4f99-9a63-269551adc130"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "95db2334-dde7-4ab9-844d-addde171276c",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('ECHO_SERVICE FOLDER Pre-request Scripts');",
                  ""
                ],
                "_lastExecutionId": "6cdbfcaf-0395-4936-89d3-2b15df9b9f89"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "bdadc87d-58fe-4342-bf95-793beec688c0",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('ECHO_SERVICE Folder Tests');"
                ],
                "_lastExecutionId": "cdcbdac9-3c73-4c3c-81ea-adada102773a"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "cursor": {
          "ref": "1d246e83-ebe6-4747-b424-ece67427d1ee",
          "length": 15,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7c288e44-fa28-41f1-8dc7-1db020413f1e",
          "scriptId": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
          "execution": "f995c6a2-e25c-4bcc-909b-63f3a2f570e7"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Validate user.age",
          "message": "expected 50 to deeply equal 31",
          "stack": "AssertionError: expected 50 to deeply equal 31\n   at Object.eval sandbox-script.js:3:4)",
          "checksum": "d6336bc9ea95cefa7599e7966465deee",
          "id": "77727fea-d86b-4c33-8a05-29c40635b5ec",
          "timestamp": 1575912111465,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "a6a5e079-b472-42f8-b8ca-a6c4e9bc8c42",
          "name": "JSON body",
          "request": {
            "url": {
              "path": [
                "post"
              ],
              "host": [
                "{{POSTMAN_ECHO_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{ \n\t\"name\": \"Mark Johnson\", \n\t\"age\": 31, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "a2dc4027-5131-46a2-8e6e-b958d221419a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                "type": "text/javascript",
                "exec": [
                  "const expectedUser = { ",
                  "    name: \"Mark Johnson\", ",
                  "    age: 50, ",
                  "    isAdmin: true, ",
                  "    resourceIds: [1111, 1112, 1113] ",
                  "    ",
                  "}; // wrong age and resourcesIds[1]",
                  "",
                  "const actualUser = pm.response.json().json;",
                  "",
                  "// Chai deep equal assertion",
                  "pm.test('Validate user (deep equal)', () => pm.expect(expectedUser).to.eql(actualUser));",
                  "",
                  "// Enhanced verification - one test / value",
                  "const deepTest = eval(globals.deepTest);",
                  "const testFunction = eval(globals.testFunction);",
                  "deepTest(expectedUser)(actualUser)('user')(testFunction);",
                  "",
                  "",
                  ""
                ],
                "_lastExecutionId": "f995c6a2-e25c-4bcc-909b-63f3a2f570e7"
              }
            }
          ]
        },
        "parent": {
          "id": "6108698b-59a3-446f-9fe6-8ca228ee643d",
          "name": "ECHO_SERVICE",
          "description": {
            "content": "https://docs.postman-echo.com/",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d272c139-bc51-4311-b82a-79eb0c61531a",
              "name": "setup & utils",
              "request": {
                "url": {
                  "protocol": "https",
                  "host": [
                    "www",
                    "google",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "HEAD",
                "body": {
                  "mode": "raw",
                  "raw": "{ \n\t\"name\": \"mark\", \n\t\"age\": 51, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n\t\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log(`'${pm.info.requestName}' Request Pre-request Script`);",
                      "",
                      "pm.globals.clear();",
                      "",
                      "const deepTest = expected => actual => (prefix = 'object') => testFunction => {        ",
                      "    ",
                      "    if (typeof expected !== 'object' || expected === null){",
                      "        testFunction(expected, actual, prefix);",
                      "        return;",
                      "    }",
                      "",
                      "    if (Array.isArray(expected)){                     ",
                      "        expected.forEach((element, index) => ",
                      "            deepTest(expected[index])(actual[index])(`${prefix}[${index}]`)(testFunction)",
                      "        );",
                      "        return;",
                      "    }",
                      "",
                      "    if (typeof expected === 'object'){          ",
                      "        Object.keys(expected).forEach(key => ",
                      "            deepTest(expected[key])(actual[key])(`${prefix}.${key}`)(testFunction)",
                      "        );            ",
                      "        return;",
                      "    }",
                      "};",
                      "",
                      "const testFunction = (expected, actual, prefix) =>",
                      "    pm.test(`Validate ${prefix}`, () => pm.expect(expected).eql(actual));",
                      "",
                      "const prettify = json => JSON.stringify(json, null, 2);",
                      "",
                      "const getHeader = (pm, headerName) => {",
                      "    const header = pm.response.headers.find(header => header.key == headerName); ",
                      "    return header ? header.value : undefined;",
                      "}",
                      "",
                      "// SAVE FUCTIONALITY FOR REUSE",
                      "postman.setGlobalVariable('deepTest', deepTest);",
                      "//globals.deepTest = deepTest;  // this does not work",
                      "postman.setGlobalVariable('testFunction', testFunction);",
                      "postman.setGlobalVariable('prettify', prettify);",
                      "postman.setGlobalVariable('getHeader', getHeader);",
                      "",
                      "/* Usage within other sripts",
                      "// i.e.",
                      "const expectedUser = { name: \"mark\", age: 50, isAdmin: true };",
                      "const actualUser = { name: \"mark\", age: 51, isAdmin: false };",
                      "const deepTest = eval(globals.deepTest);",
                      "// or const deepTest = eval(postman.getGlobalVariable('deepTest'));",
                      "const testFunction = eval(globals.testFunction);",
                      "deepTest(expectedUser)(actualUser)('Validate user')(testFunction);",
                      "*/",
                      ""
                    ],
                    "_lastExecutionId": "332e624f-ac55-4357-9927-858bd1a5a3ce"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log(`'${pm.info.requestName}' Request Tests`);"
                    ],
                    "_lastExecutionId": "09afdf49-8eb1-4789-b524-cc214ded430b"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "ada83bc3-1659-48a8-a8f5-afecc729cc06",
              "name": "500 Internal Server Error",
              "request": {
                "url": {
                  "path": [
                    "status",
                    "500"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', ",
                      "    () =>pm.response.to.have.status(200)",
                      ");"
                    ],
                    "_lastExecutionId": "f1c5b79a-59e1-4d52-bad6-bccf5a4d1b56"
                  }
                }
              ]
            },
            {
              "id": "b55dcdfc-1b10-4cc0-851f-8a782dfa1cb7",
              "name": "local IP",
              "request": {
                "url": {
                  "path": [
                    "ip"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', ",
                      "    () => pm.response.to.have.status(200)",
                      ");",
                      "",
                      "pm.test('Response JSON \"ip\" property matches an IP Regex',",
                      "    () => {",
                      "        const ip = pm.response.json().ip;",
                      "        console.log(`ip: ${ip}`);",
                      "        ",
                      "        const ipMatcherRegex = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/;",
                      "        ",
                      "        pm.expect(ip).to.match(ipMatcherRegex);",
                      "    }",
                      ");"
                    ],
                    "_lastExecutionId": "15f5bbcf-c31d-48d2-8107-7cc8a2b28ed8"
                  }
                }
              ]
            },
            {
              "id": "a6a5e079-b472-42f8-b8ca-a6c4e9bc8c42",
              "name": "JSON body",
              "request": {
                "url": {
                  "path": [
                    "post"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \n\t\"name\": \"Mark Johnson\", \n\t\"age\": 31, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a2dc4027-5131-46a2-8e6e-b958d221419a"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "const expectedUser = { ",
                      "    name: \"Mark Johnson\", ",
                      "    age: 50, ",
                      "    isAdmin: true, ",
                      "    resourceIds: [1111, 1112, 1113] ",
                      "    ",
                      "}; // wrong age and resourcesIds[1]",
                      "",
                      "const actualUser = pm.response.json().json;",
                      "",
                      "// Chai deep equal assertion",
                      "pm.test('Validate user (deep equal)', () => pm.expect(expectedUser).to.eql(actualUser));",
                      "",
                      "// Enhanced verification - one test / value",
                      "const deepTest = eval(globals.deepTest);",
                      "const testFunction = eval(globals.testFunction);",
                      "deepTest(expectedUser)(actualUser)('user')(testFunction);",
                      "",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "f995c6a2-e25c-4bcc-909b-63f3a2f570e7"
                  }
                }
              ]
            },
            {
              "id": "aa53828e-d3fd-46c1-b5f7-43614e16271a",
              "name": "query string parameters",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "post"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "company",
                      "value": "nagarro"
                    },
                    {
                      "key": "location",
                      "value": "timisoara"
                    },
                    {
                      "key": "department",
                      "value": "qa"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "794e673c-b258-408b-bd91-575ee6f4d5eb"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "const expectedArgs = {",
                      "        \"company\": \"nagarro\",",
                      "        \"location\": \"timisoara\",",
                      "        \"department\": \"qa\"",
                      "    };",
                      "const actualArgs = pm.response.json().args;",
                      "",
                      "const deepTest = eval(globals.deepTest);",
                      "const testFunction = eval(globals.testFunction);",
                      "",
                      "deepTest(expectedArgs)(actualArgs)('args')(testFunction);"
                    ],
                    "_lastExecutionId": "710c28fc-fcbf-43d6-8652-d03528dd8628"
                  }
                }
              ]
            },
            {
              "id": "531a7f20-53c9-4830-9763-29f356d95e9e",
              "name": "form data",
              "request": {
                "url": {
                  "path": [
                    "post"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "email",
                      "value": "danginkgo@yahoo.com",
                      "type": "text"
                    },
                    {
                      "key": "username",
                      "value": "danrusu",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "e624c6af-2bc1-4b91-b819-07b7a971c883"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "const expectedForm = {",
                      "    \"email\": \"danginkgo@yahoo.com\",",
                      "    \"username\": \"danrusu\"",
                      "};",
                      "const actualForm = pm.response.json().form;",
                      "",
                      "const deepTest = eval(globals.deepTest);",
                      "const testFunction = eval(globals.testFunction);",
                      "",
                      "deepTest(expectedForm)(actualForm)('form')(testFunction);"
                    ],
                    "_lastExecutionId": "7e9aad82-dd76-43f9-a995-508a402e5e81"
                  }
                }
              ]
            },
            {
              "id": "18a17cde-464c-4257-8733-167b3138a2df",
              "name": "delay 2s",
              "request": {
                "url": {
                  "path": [
                    "delay",
                    "2"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                    "type": "text/javascript",
                    "exec": [
                      "const getHeader = eval(globals.getHeader);",
                      "const prettify = eval(globals.prettify);",
                      "",
                      "pm.test('Status code is 200', ",
                      "    () =>pm.response.to.have.status(200)",
                      ");",
                      "",
                      "pm.test('Status code name is OK',",
                      "    () => pm.response.to.have.status(\"OK\")",
                      ");",
                      "",
                      "pm.test('Response time is above 2000ms', ",
                      "    () => pm.expect(pm.response.responseTime).to.be.above(2000)",
                      ");",
                      "",
                      "pm.test('Response body size is 13 B',",
                      "    () => {",
                      "        //const bodySize = pm.response.responseSize;",
                      "        console.log(`Headers ${prettify(pm.response.headers, null, 2)}`);",
                      "        const contentLength = parseInt(getHeader(pm, 'Content-Length'));",
                      "        pm.expect(contentLength).to.eql(13);",
                      "    }",
                      ");",
                      "",
                      "pm.test('Response delay is 2', ",
                      "    () =>  pm.expect(pm.response.json().delay).to.eql(\"2\")",
                      ");",
                      ""
                    ],
                    "_lastExecutionId": "c29afb31-87dd-4f99-9a63-269551adc130"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "95db2334-dde7-4ab9-844d-addde171276c",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('ECHO_SERVICE FOLDER Pre-request Scripts');",
                  ""
                ],
                "_lastExecutionId": "6cdbfcaf-0395-4936-89d3-2b15df9b9f89"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "bdadc87d-58fe-4342-bf95-793beec688c0",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('ECHO_SERVICE Folder Tests');"
                ],
                "_lastExecutionId": "cdcbdac9-3c73-4c3c-81ea-adada102773a"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "cursor": {
          "ref": "1d246e83-ebe6-4747-b424-ece67427d1ee",
          "length": 15,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7c288e44-fa28-41f1-8dc7-1db020413f1e",
          "scriptId": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
          "execution": "f995c6a2-e25c-4bcc-909b-63f3a2f570e7"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 5,
          "test": "Validate user.resourceIds[1]",
          "message": "expected 1112 to deeply equal 1110",
          "stack": "AssertionError: expected 1112 to deeply equal 1110\n   at Object.eval sandbox-script.js:6:4)",
          "checksum": "38ce7dcc7dab442081096af6de7b8fbf",
          "id": "37dfd420-43fc-4b20-b7f1-2a8ee95c44f7",
          "timestamp": 1575912111466,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 6,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:5 in test-script",
        "source": {
          "id": "a6a5e079-b472-42f8-b8ca-a6c4e9bc8c42",
          "name": "JSON body",
          "request": {
            "url": {
              "path": [
                "post"
              ],
              "host": [
                "{{POSTMAN_ECHO_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{ \n\t\"name\": \"Mark Johnson\", \n\t\"age\": 31, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "a2dc4027-5131-46a2-8e6e-b958d221419a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                "type": "text/javascript",
                "exec": [
                  "const expectedUser = { ",
                  "    name: \"Mark Johnson\", ",
                  "    age: 50, ",
                  "    isAdmin: true, ",
                  "    resourceIds: [1111, 1112, 1113] ",
                  "    ",
                  "}; // wrong age and resourcesIds[1]",
                  "",
                  "const actualUser = pm.response.json().json;",
                  "",
                  "// Chai deep equal assertion",
                  "pm.test('Validate user (deep equal)', () => pm.expect(expectedUser).to.eql(actualUser));",
                  "",
                  "// Enhanced verification - one test / value",
                  "const deepTest = eval(globals.deepTest);",
                  "const testFunction = eval(globals.testFunction);",
                  "deepTest(expectedUser)(actualUser)('user')(testFunction);",
                  "",
                  "",
                  ""
                ],
                "_lastExecutionId": "f995c6a2-e25c-4bcc-909b-63f3a2f570e7"
              }
            }
          ]
        },
        "parent": {
          "id": "6108698b-59a3-446f-9fe6-8ca228ee643d",
          "name": "ECHO_SERVICE",
          "description": {
            "content": "https://docs.postman-echo.com/",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d272c139-bc51-4311-b82a-79eb0c61531a",
              "name": "setup & utils",
              "request": {
                "url": {
                  "protocol": "https",
                  "host": [
                    "www",
                    "google",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "HEAD",
                "body": {
                  "mode": "raw",
                  "raw": "{ \n\t\"name\": \"mark\", \n\t\"age\": 51, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n\t\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log(`'${pm.info.requestName}' Request Pre-request Script`);",
                      "",
                      "pm.globals.clear();",
                      "",
                      "const deepTest = expected => actual => (prefix = 'object') => testFunction => {        ",
                      "    ",
                      "    if (typeof expected !== 'object' || expected === null){",
                      "        testFunction(expected, actual, prefix);",
                      "        return;",
                      "    }",
                      "",
                      "    if (Array.isArray(expected)){                     ",
                      "        expected.forEach((element, index) => ",
                      "            deepTest(expected[index])(actual[index])(`${prefix}[${index}]`)(testFunction)",
                      "        );",
                      "        return;",
                      "    }",
                      "",
                      "    if (typeof expected === 'object'){          ",
                      "        Object.keys(expected).forEach(key => ",
                      "            deepTest(expected[key])(actual[key])(`${prefix}.${key}`)(testFunction)",
                      "        );            ",
                      "        return;",
                      "    }",
                      "};",
                      "",
                      "const testFunction = (expected, actual, prefix) =>",
                      "    pm.test(`Validate ${prefix}`, () => pm.expect(expected).eql(actual));",
                      "",
                      "const prettify = json => JSON.stringify(json, null, 2);",
                      "",
                      "const getHeader = (pm, headerName) => {",
                      "    const header = pm.response.headers.find(header => header.key == headerName); ",
                      "    return header ? header.value : undefined;",
                      "}",
                      "",
                      "// SAVE FUCTIONALITY FOR REUSE",
                      "postman.setGlobalVariable('deepTest', deepTest);",
                      "//globals.deepTest = deepTest;  // this does not work",
                      "postman.setGlobalVariable('testFunction', testFunction);",
                      "postman.setGlobalVariable('prettify', prettify);",
                      "postman.setGlobalVariable('getHeader', getHeader);",
                      "",
                      "/* Usage within other sripts",
                      "// i.e.",
                      "const expectedUser = { name: \"mark\", age: 50, isAdmin: true };",
                      "const actualUser = { name: \"mark\", age: 51, isAdmin: false };",
                      "const deepTest = eval(globals.deepTest);",
                      "// or const deepTest = eval(postman.getGlobalVariable('deepTest'));",
                      "const testFunction = eval(globals.testFunction);",
                      "deepTest(expectedUser)(actualUser)('Validate user')(testFunction);",
                      "*/",
                      ""
                    ],
                    "_lastExecutionId": "332e624f-ac55-4357-9927-858bd1a5a3ce"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log(`'${pm.info.requestName}' Request Tests`);"
                    ],
                    "_lastExecutionId": "09afdf49-8eb1-4789-b524-cc214ded430b"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "ada83bc3-1659-48a8-a8f5-afecc729cc06",
              "name": "500 Internal Server Error",
              "request": {
                "url": {
                  "path": [
                    "status",
                    "500"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', ",
                      "    () =>pm.response.to.have.status(200)",
                      ");"
                    ],
                    "_lastExecutionId": "f1c5b79a-59e1-4d52-bad6-bccf5a4d1b56"
                  }
                }
              ]
            },
            {
              "id": "b55dcdfc-1b10-4cc0-851f-8a782dfa1cb7",
              "name": "local IP",
              "request": {
                "url": {
                  "path": [
                    "ip"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', ",
                      "    () => pm.response.to.have.status(200)",
                      ");",
                      "",
                      "pm.test('Response JSON \"ip\" property matches an IP Regex',",
                      "    () => {",
                      "        const ip = pm.response.json().ip;",
                      "        console.log(`ip: ${ip}`);",
                      "        ",
                      "        const ipMatcherRegex = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/;",
                      "        ",
                      "        pm.expect(ip).to.match(ipMatcherRegex);",
                      "    }",
                      ");"
                    ],
                    "_lastExecutionId": "15f5bbcf-c31d-48d2-8107-7cc8a2b28ed8"
                  }
                }
              ]
            },
            {
              "id": "a6a5e079-b472-42f8-b8ca-a6c4e9bc8c42",
              "name": "JSON body",
              "request": {
                "url": {
                  "path": [
                    "post"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \n\t\"name\": \"Mark Johnson\", \n\t\"age\": 31, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a2dc4027-5131-46a2-8e6e-b958d221419a"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "const expectedUser = { ",
                      "    name: \"Mark Johnson\", ",
                      "    age: 50, ",
                      "    isAdmin: true, ",
                      "    resourceIds: [1111, 1112, 1113] ",
                      "    ",
                      "}; // wrong age and resourcesIds[1]",
                      "",
                      "const actualUser = pm.response.json().json;",
                      "",
                      "// Chai deep equal assertion",
                      "pm.test('Validate user (deep equal)', () => pm.expect(expectedUser).to.eql(actualUser));",
                      "",
                      "// Enhanced verification - one test / value",
                      "const deepTest = eval(globals.deepTest);",
                      "const testFunction = eval(globals.testFunction);",
                      "deepTest(expectedUser)(actualUser)('user')(testFunction);",
                      "",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "f995c6a2-e25c-4bcc-909b-63f3a2f570e7"
                  }
                }
              ]
            },
            {
              "id": "aa53828e-d3fd-46c1-b5f7-43614e16271a",
              "name": "query string parameters",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "post"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "company",
                      "value": "nagarro"
                    },
                    {
                      "key": "location",
                      "value": "timisoara"
                    },
                    {
                      "key": "department",
                      "value": "qa"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "794e673c-b258-408b-bd91-575ee6f4d5eb"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "const expectedArgs = {",
                      "        \"company\": \"nagarro\",",
                      "        \"location\": \"timisoara\",",
                      "        \"department\": \"qa\"",
                      "    };",
                      "const actualArgs = pm.response.json().args;",
                      "",
                      "const deepTest = eval(globals.deepTest);",
                      "const testFunction = eval(globals.testFunction);",
                      "",
                      "deepTest(expectedArgs)(actualArgs)('args')(testFunction);"
                    ],
                    "_lastExecutionId": "710c28fc-fcbf-43d6-8652-d03528dd8628"
                  }
                }
              ]
            },
            {
              "id": "531a7f20-53c9-4830-9763-29f356d95e9e",
              "name": "form data",
              "request": {
                "url": {
                  "path": [
                    "post"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "email",
                      "value": "danginkgo@yahoo.com",
                      "type": "text"
                    },
                    {
                      "key": "username",
                      "value": "danrusu",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "e624c6af-2bc1-4b91-b819-07b7a971c883"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "const expectedForm = {",
                      "    \"email\": \"danginkgo@yahoo.com\",",
                      "    \"username\": \"danrusu\"",
                      "};",
                      "const actualForm = pm.response.json().form;",
                      "",
                      "const deepTest = eval(globals.deepTest);",
                      "const testFunction = eval(globals.testFunction);",
                      "",
                      "deepTest(expectedForm)(actualForm)('form')(testFunction);"
                    ],
                    "_lastExecutionId": "7e9aad82-dd76-43f9-a995-508a402e5e81"
                  }
                }
              ]
            },
            {
              "id": "18a17cde-464c-4257-8733-167b3138a2df",
              "name": "delay 2s",
              "request": {
                "url": {
                  "path": [
                    "delay",
                    "2"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                    "type": "text/javascript",
                    "exec": [
                      "const getHeader = eval(globals.getHeader);",
                      "const prettify = eval(globals.prettify);",
                      "",
                      "pm.test('Status code is 200', ",
                      "    () =>pm.response.to.have.status(200)",
                      ");",
                      "",
                      "pm.test('Status code name is OK',",
                      "    () => pm.response.to.have.status(\"OK\")",
                      ");",
                      "",
                      "pm.test('Response time is above 2000ms', ",
                      "    () => pm.expect(pm.response.responseTime).to.be.above(2000)",
                      ");",
                      "",
                      "pm.test('Response body size is 13 B',",
                      "    () => {",
                      "        //const bodySize = pm.response.responseSize;",
                      "        console.log(`Headers ${prettify(pm.response.headers, null, 2)}`);",
                      "        const contentLength = parseInt(getHeader(pm, 'Content-Length'));",
                      "        pm.expect(contentLength).to.eql(13);",
                      "    }",
                      ");",
                      "",
                      "pm.test('Response delay is 2', ",
                      "    () =>  pm.expect(pm.response.json().delay).to.eql(\"2\")",
                      ");",
                      ""
                    ],
                    "_lastExecutionId": "c29afb31-87dd-4f99-9a63-269551adc130"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "95db2334-dde7-4ab9-844d-addde171276c",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('ECHO_SERVICE FOLDER Pre-request Scripts');",
                  ""
                ],
                "_lastExecutionId": "6cdbfcaf-0395-4936-89d3-2b15df9b9f89"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "bdadc87d-58fe-4342-bf95-793beec688c0",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('ECHO_SERVICE Folder Tests');"
                ],
                "_lastExecutionId": "cdcbdac9-3c73-4c3c-81ea-adada102773a"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "cursor": {
          "ref": "1d246e83-ebe6-4747-b424-ece67427d1ee",
          "length": 15,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7c288e44-fa28-41f1-8dc7-1db020413f1e",
          "scriptId": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
          "execution": "f995c6a2-e25c-4bcc-909b-63f3a2f570e7"
        }
      }
    ],
    "error": null
  }
}