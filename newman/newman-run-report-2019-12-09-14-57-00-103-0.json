{
  "collection": {
    "_": {
      "postman_id": "831201cb-16d0-4057-8906-d3b84f38f650"
    },
    "item": [
      {
        "id": "325ae3a8-c2be-439c-bbe7-ef18bb547fee",
        "name": "ECHO_SERVICE",
        "description": {
          "content": "https://docs.postman-echo.com/",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "ee31bcfe-bc81-4e3d-a744-e370bbba2273",
            "name": "setup & utils",
            "request": {
              "url": {
                "protocol": "https",
                "host": [
                  "www",
                  "google",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "HEAD",
              "body": {
                "mode": "raw",
                "raw": "{ \n\t\"name\": \"mark\", \n\t\"age\": 51, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n\t\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                  "type": "text/javascript",
                  "exec": [
                    "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log(`'${pm.info.requestName}' Request Pre-request Script`);",
                    "",
                    "pm.globals.clear();",
                    "",
                    "const deepTest = expected => actual => (prefix = 'object') => testFunction => {        ",
                    "    ",
                    "    if (typeof expected !== 'object' || expected === null){",
                    "        testFunction(expected, actual, prefix);",
                    "        return;",
                    "    }",
                    "",
                    "    if (Array.isArray(expected)){                     ",
                    "        expected.forEach((element, index) => ",
                    "            deepTest(expected[index])(actual[index])(`${prefix}[${index}]`)(testFunction)",
                    "        );",
                    "        return;",
                    "    }",
                    "",
                    "    if (typeof expected === 'object'){          ",
                    "        Object.keys(expected).forEach(key => ",
                    "            deepTest(expected[key])(actual[key])(`${prefix}.${key}`)(testFunction)",
                    "        );            ",
                    "        return;",
                    "    }",
                    "};",
                    "",
                    "const testFunction = (expected, actual, prefix) =>",
                    "    pm.test(`Validate ${prefix}`, () => pm.expect(expected).eql(actual));",
                    "",
                    "const prettify = json => JSON.stringify(json, null, 2);",
                    "",
                    "const getHeader = (pm, headerName) => {",
                    "    const header = pm.response.headers.find(header => header.key == headerName); ",
                    "    return header ? header.value : undefined;",
                    "}",
                    "",
                    "// SAVE FUCTIONALITY FOR REUSE",
                    "postman.setGlobalVariable('deepTest', deepTest);",
                    "//globals.deepTest = deepTest;  // this does not work",
                    "postman.setGlobalVariable('testFunction', testFunction);",
                    "postman.setGlobalVariable('prettify', prettify);",
                    "postman.setGlobalVariable('getHeader', getHeader);",
                    "",
                    "/* Usage within other sripts",
                    "// i.e.",
                    "const expectedUser = { name: \"mark\", age: 50, isAdmin: true };",
                    "const actualUser = { name: \"mark\", age: 51, isAdmin: false };",
                    "const deepTest = eval(globals.deepTest);",
                    "// or const deepTest = eval(postman.getGlobalVariable('deepTest'));",
                    "const testFunction = eval(globals.testFunction);",
                    "deepTest(expectedUser)(actualUser)('Validate user')(testFunction);",
                    "*/",
                    ""
                  ],
                  "_lastExecutionId": "2f2c7c91-4413-4a15-b742-1221cc25b7a5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                  "type": "text/javascript",
                  "exec": [
                    "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log(`'${pm.info.requestName}' Request Tests`);"
                  ],
                  "_lastExecutionId": "476dbe69-1144-43c8-a39a-8c306203c9e4"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          },
          {
            "id": "bc5e45f7-ca29-4458-ab05-9ea15dbb949f",
            "name": "JSON body",
            "request": {
              "url": {
                "path": [
                  "post"
                ],
                "host": [
                  "{{POSTMAN_ECHO_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{ \n\t\"name\": \"Mark Johnson\", \n\t\"age\": 31, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7e26eaac-e68a-404d-9696-b671bbdbc39e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                  "type": "text/javascript",
                  "exec": [
                    "const expectedUser = { ",
                    "    name: \"Mark Johnson\", ",
                    "    age: 50, ",
                    "    isAdmin: true, ",
                    "    resourceIds: [1111, 1112, 1113] ",
                    "    ",
                    "}; // wrong age and resourcesIds[1]",
                    "",
                    "const actualUser = pm.response.json().json;",
                    "",
                    "// Chai deep equal assertion",
                    "pm.test('Validate user (deep equal)', () => pm.expect(expectedUser).to.eql(actualUser));",
                    "",
                    "// Enhanced verification - one test / value",
                    "const deepTest = eval(globals.deepTest);",
                    "const testFunction = eval(globals.testFunction);",
                    "deepTest(expectedUser)(actualUser)('user')(testFunction);",
                    "",
                    "",
                    ""
                  ],
                  "_lastExecutionId": "5af6d109-a6d4-43bd-8451-909a5cc982a1"
                }
              }
            ]
          },
          {
            "id": "dc1eeec2-9661-4876-a439-af04a30f6ace",
            "name": "query string parameters",
            "request": {
              "url": {
                "protocol": "https",
                "path": [
                  "post"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [
                  {
                    "key": "company",
                    "value": "nagarro"
                  },
                  {
                    "key": "location",
                    "value": "timisoara"
                  },
                  {
                    "key": "department",
                    "value": "qa"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/x-www-form-urlencoded"
                }
              ],
              "method": "POST"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "25314eb7-ea9a-4378-9a81-336478486db3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                  "type": "text/javascript",
                  "exec": [
                    "const expectedArgs = {",
                    "        \"company\": \"nagarro\",",
                    "        \"location\": \"timisoara\",",
                    "        \"department\": \"qa\"",
                    "    };",
                    "const actualArgs = pm.response.json().args;",
                    "",
                    "const deepTest = eval(globals.deepTest);",
                    "const testFunction = eval(globals.testFunction);",
                    "",
                    "deepTest(expectedArgs)(actualArgs)('args')(testFunction);"
                  ],
                  "_lastExecutionId": "94b06c98-0977-4094-9ba3-6157a13f36b8"
                }
              }
            ]
          },
          {
            "id": "d8508ddf-276f-482b-964f-7f3840c32b26",
            "name": "form data",
            "request": {
              "url": {
                "protocol": "https",
                "path": [
                  "post"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [
                  {
                    "key": "user",
                    "value": "100"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/x-www-form-urlencoded"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "email",
                    "value": "danginkgo@yahoo.com",
                    "type": "text"
                  },
                  {
                    "key": "username",
                    "value": "danrusu",
                    "type": "text"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c5f891f7-3b08-45e2-8324-d587bb6f0d5d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                  "type": "text/javascript",
                  "exec": [
                    "const expectedForm = {",
                    "    \"email\": \"danginkgo@yahoo.com\",",
                    "    \"username\": \"danrusu\"",
                    "};",
                    "const actualForm = pm.response.json().form;",
                    "",
                    "const deepTest = eval(globals.deepTest);",
                    "const testFunction = eval(globals.testFunction);",
                    "",
                    "deepTest(expectedForm)(actualForm)('form')(testFunction);"
                  ],
                  "_lastExecutionId": "117f933d-b954-4990-b8c3-be2c0f6fb070"
                }
              }
            ]
          },
          {
            "id": "f91a6a80-fca8-4c32-89b7-fa20506ae57e",
            "name": "delay 2s",
            "request": {
              "url": {
                "path": [
                  "delay",
                  "2"
                ],
                "host": [
                  "{{POSTMAN_ECHO_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                  "type": "text/javascript",
                  "exec": [
                    "const getHeader = eval(globals.getHeader);",
                    "const prettify = eval(globals.prettify);",
                    "",
                    "pm.test('Status code is 200', ",
                    "    () =>pm.response.to.have.status(200)",
                    ");",
                    "",
                    "pm.test('Status code name is OK',",
                    "    () => pm.response.to.have.status(\"OK\")",
                    ");",
                    "",
                    "pm.test('Response time is above 2000ms', ",
                    "    () => pm.expect(pm.response.responseTime).to.be.above(2000)",
                    ");",
                    "",
                    "pm.test('Response body size is 13 B',",
                    "    () => {",
                    "        //const bodySize = pm.response.responseSize;",
                    "        console.log(`Headers ${prettify(pm.response.headers, null, 2)}`);",
                    "        const contentLength = parseInt(getHeader(pm, 'Content-Length'));",
                    "        pm.expect(contentLength).to.eql(13);",
                    "    }",
                    ");",
                    "",
                    "pm.test('Response delay is 2', ",
                    "    () =>  pm.expect(pm.response.json().delay).to.eql(\"2\")",
                    ");",
                    ""
                  ],
                  "_lastExecutionId": "d09e73b6-f03e-43ab-a702-0a59e1de4a4c"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "95db2334-dde7-4ab9-844d-addde171276c",
              "type": "text/javascript",
              "exec": [
                "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('ECHO_SERVICE FOLDER Pre-request Scripts');",
                ""
              ],
              "_lastExecutionId": "274f4e88-e727-4c38-bab1-9637616217e2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bdadc87d-58fe-4342-bf95-793beec688c0",
              "type": "text/javascript",
              "exec": [
                "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('ECHO_SERVICE Folder Tests');"
              ],
              "_lastExecutionId": "f97e83b6-8d7c-43c9-a9bb-5778f1ead961"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disableBodyPruning": true
        }
      },
      {
        "id": "9420ad12-7ead-469c-ad6a-7d8db50c3967",
        "name": "RESTFUL_BOOKER",
        "description": {
          "content": "https://restful-booker.herokuapp.com/\n\nDOCS: https://restful-booker.herokuapp.com/apidoc/index.html",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "89011438-7046-4139-9ddb-de341885cfde",
            "name": "health check",
            "request": {
              "url": {
                "path": [
                  "ping"
                ],
                "host": [
                  "{{RESTFULL_BOOKER_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Cookie",
                  "value": "token=16d2f037531ae80"
                },
                {
                  "key": "Accept",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "27133bf9-421e-4b0b-9bf1-74c59e4a5505",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.clear();",
                    "",
                    "pm.test('Status code name is \"Created\"', ",
                    "    () => pm.response.to.have.status(\"Created\")",
                    ");",
                    "",
                    "pm.test('Response text is \"Created\"', ",
                    "    () => pm.expect(pm.response.text()).to.eql(\"Created\")",
                    ");",
                    ""
                  ],
                  "_lastExecutionId": "41939581-ff25-4368-b93f-3f36344216d3"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "50a64363-0e4a-443c-abab-1edcafa9600a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d0577760-806a-4a42-bc15-0996c8050593"
                }
              }
            ]
          },
          {
            "id": "27482ce1-2be6-4571-a2e7-b7ac04ae7134",
            "name": "create token",
            "request": {
              "url": {
                "path": [
                  "auth"
                ],
                "host": [
                  "{{RESTFULL_BOOKER_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "22426ed2-1321-48be-9010-2e89e3f7e9f4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Token is retrieven as a string\", function () {",
                    "    ",
                    "    var jsonData = pm.response.json(); // parse JSON from body",
                    "    ",
                    "    console.log(jsonData);",
                    "    console.log(JSON.stringify(jsonData, null, 2));",
                    "    console.log(`jsonData.token: ${jsonData.token}`);",
                    "    ",
                    "    console.log(`jsonData.value ${jsonData.value}`); // should be undefined",
                    "    pm.expect(jsonData.token).to.be.a('string');",
                    "    ",
                    "    // auto generated snipet - Set an environment variable",
                    "    // pm.globals.set(\"variable_key\", \"variable_value\");",
                    "    pm.globals.set(\"token\", jsonData.token);",
                    "});",
                    ""
                  ],
                  "_lastExecutionId": "7f359eb7-f6ac-487e-bd03-3a22d418671c"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "32067d93-e91f-48e8-b3fc-f741a9502537",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5f0d8740-f733-4e98-bb3d-1b3998d69b63"
                }
              }
            ]
          },
          {
            "id": "0220ea8a-7e40-4778-b947-22f446f809d4",
            "name": "bookings ids",
            "request": {
              "url": {
                "path": [
                  "booking"
                ],
                "host": [
                  "{{RESTFULL_BOOKER_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4d64b293-208a-4f86-a466-9d18c4f0195f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1783bc3c-3284-409e-9fdc-9add50eeb9a6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a13a1fc3-bb5c-4cac-9357-a717dea1b3f9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3db797f8-0858-4610-bc98-8763714c7e92"
                }
              }
            ]
          },
          {
            "id": "a331c0c8-bb34-41a8-8b2a-2b0fff45b3fa",
            "name": "create booking",
            "request": {
              "url": {
                "path": [
                  "booking"
                ],
                "host": [
                  "{{RESTFULL_BOOKER_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f243060f-fb2a-4756-b1f8-11f833fd62db",
                  "type": "text/javascript",
                  "exec": [
                    "const newBookingId = pm.response.json().bookingid;",
                    "console.log(`New booking id: ${newBookingId}`);",
                    "",
                    "pm.globals.set('newBookingId', newBookingId);"
                  ],
                  "_lastExecutionId": "60cf9d84-c78f-4e2e-a870-8e72478a3eb9"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "bca49a6c-bf22-443e-b6b8-27c9684a46f9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "07d61905-04da-4725-a8d9-5447b18d9d80"
                }
              }
            ]
          },
          {
            "id": "aaf1332e-9add-4640-a791-dd2c2b8fe153",
            "name": "booking by id",
            "request": {
              "url": {
                "path": [
                  "booking",
                  "{{newBookingId}}"
                ],
                "host": [
                  "{{RESTFULL_BOOKER_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e676f020-1592-41c5-9bb2-a209f776b2a8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "20898250-691b-4a7a-964f-f83cf2ae19da"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "eef0023a-9454-4ef2-be7e-6df7edab294b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "41936ffb-183f-4827-b6e1-3c0fa1948274"
                }
              }
            ]
          },
          {
            "id": "180e7f3f-6398-4bbc-b641-f08dac0b87e1",
            "name": "update booking",
            "request": {
              "url": {
                "path": [
                  "booking",
                  "{{newBookingId}}"
                ],
                "host": [
                  "{{RESTFULL_BOOKER_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Cookie",
                  "value": "token={{token}}"
                },
                {
                  "key": "Accept",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2020-01-01\",\r\n        \"checkout\" : \"2020-01-10\"\r\n    },\r\n    \"additionalneeds\": \"none\"\r\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "74710eec-6fac-4f4e-9bf3-b18a2593595a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "15605a8e-c25c-4fe9-816c-ce1782c29b44"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f4276e33-94a1-4d6c-a44f-b16be39655f7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "26f36ab4-6269-4ce4-9166-199a12110004"
                }
              }
            ]
          },
          {
            "id": "53a7e6c4-c811-4038-aa7b-edd34df7df32",
            "name": "partial update booking",
            "request": {
              "url": {
                "path": [
                  "booking",
                  "{{newBookingId}}"
                ],
                "host": [
                  "{{RESTFULL_BOOKER_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Cookie",
                  "value": "token={{token}}"
                },
                {
                  "key": "Accept",
                  "value": "application/json"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\"\r\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e9de7d4f-41da-441f-ada1-8aab933530fd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c09373c5-7cc9-4675-9b3f-d22f226ac1fb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0820127e-398c-47f2-9eb7-89afa0762f3f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "309e5466-4a8e-4eeb-809e-8b8f8d475aa1"
                }
              }
            ]
          },
          {
            "id": "a4c39665-e2c4-4e8b-8c94-d7502972995a",
            "name": "delete booking",
            "request": {
              "url": {
                "path": [
                  "booking",
                  "{{newBookingId}}"
                ],
                "host": [
                  "{{RESTFULL_BOOKER_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Cookie",
                  "value": "token={{token}}"
                }
              ],
              "method": "DELETE",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2020-01-01\",\r\n        \"checkout\" : \"2020-01-10\"\r\n    }\r\n}"
              },
              "auth": {
                "type": "basic",
                "basic": [
                  {
                    "type": "string",
                    "value": "admin@rms.com",
                    "key": "username"
                  },
                  {
                    "type": "string",
                    "value": "P@ssword1",
                    "key": "password"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ff17718e-e2fe-400a-9ed7-be1b58e0129d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "68ff08cd-94b4-4c2e-93ba-35cf84ef277d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "edb1bea6-7b3a-4152-a8ad-c01e4a4b5d17",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8606878d-1f9c-4605-a940-b248670fcf3a"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f8ec0231-dcc6-4037-be5a-4795cbf69b0f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bba8d36a-25ca-486c-b244-d11badca6830"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b2426a45-2ba3-4fa2-abce-3a1354bb364b",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"Status code is 200 or 201\", function () {",
                "   pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                "});",
                "",
                "pm.test(\"Response time is less than 1000ms\", function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                "});"
              ],
              "_lastExecutionId": "f1063ed9-2ac5-43e7-a146-e8f9006504c4"
            }
          }
        ],
        "protocolProfileBehavior": []
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "bea5ca71-8b10-425c-a11c-2bf12948a719",
          "type": "text/javascript",
          "exec": [
            "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('PLAY_SMART_WITH_THE_BACKEND Collection Pre-request Scripts');",
            "",
            ""
          ],
          "_lastExecutionId": "126bb2af-ea99-48d7-8b63-ed43510c708c"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "7c286389-5948-462f-ae79-637b5d683051",
          "type": "text/javascript",
          "exec": [
            "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('PLAY_SMART_WITH_THE_BACKEND Collection Tests');"
          ],
          "_lastExecutionId": "1fb8d7fd-352b-463c-b74b-e9dd2ce4b55f"
        }
      }
    ],
    "protocolProfileBehavior": {
      "disableBodyPruning": true
    },
    "variable": [],
    "info": {
      "_postman_id": "831201cb-16d0-4057-8906-d3b84f38f650",
      "name": "PLAY_SMART_WITH_THE_BACKEND",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2019-12-09T14:50:33.680Z",
      "postman_exported_using": "Postman/7.13.0"
    },
    "id": "5450fdff-035f-42fd-8ae5-0141fd4b5c34",
    "name": "PLAY_SMART_WITH_THE_BACKEND",
    "values": [
      {
        "type": "any",
        "value": "https://restful-booker.herokuapp.com",
        "key": "RESTFULL_BOOKER_URL"
      },
      {
        "type": "any",
        "value": "true",
        "key": "ENABLE_HELP_MESSAGES"
      },
      {
        "type": "any",
        "value": "https://postman-echo.com",
        "key": "POSTMAN_ECHO_URL"
      }
    ]
  },
  "globals": {
    "id": "0c090fb5-2a64-45ab-af0d-33fb6a85f42b",
    "values": [
      {
        "type": "any",
        "value": "02708194bc4ffae",
        "key": "token"
      },
      {
        "type": "any",
        "value": 14,
        "key": "newBookingId"
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 77,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 36,
        "pending": 0,
        "failed": 3
      },
      "testScripts": {
        "total": 39,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 38,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 371.2307692307692,
      "responseMin": 124,
      "responseMax": 2167,
      "responseSd": 540.4886896768878,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1575903414450,
      "completed": 1575903419967
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 13,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a3ab0ddf-e5d6-4048-a857-8965e0a3d006",
          "httpRequestId": "dd0b9fd8-2468-416c-b02a-261892b79315"
        },
        "item": {
          "id": "ee31bcfe-bc81-4e3d-a744-e370bbba2273",
          "name": "setup & utils",
          "request": {
            "url": {
              "protocol": "https",
              "host": [
                "www",
                "google",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "HEAD",
            "body": {
              "mode": "raw",
              "raw": "{ \n\t\"name\": \"mark\", \n\t\"age\": 51, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n\t\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log(`'${pm.info.requestName}' Request Pre-request Script`);",
                  "",
                  "pm.globals.clear();",
                  "",
                  "const deepTest = expected => actual => (prefix = 'object') => testFunction => {        ",
                  "    ",
                  "    if (typeof expected !== 'object' || expected === null){",
                  "        testFunction(expected, actual, prefix);",
                  "        return;",
                  "    }",
                  "",
                  "    if (Array.isArray(expected)){                     ",
                  "        expected.forEach((element, index) => ",
                  "            deepTest(expected[index])(actual[index])(`${prefix}[${index}]`)(testFunction)",
                  "        );",
                  "        return;",
                  "    }",
                  "",
                  "    if (typeof expected === 'object'){          ",
                  "        Object.keys(expected).forEach(key => ",
                  "            deepTest(expected[key])(actual[key])(`${prefix}.${key}`)(testFunction)",
                  "        );            ",
                  "        return;",
                  "    }",
                  "};",
                  "",
                  "const testFunction = (expected, actual, prefix) =>",
                  "    pm.test(`Validate ${prefix}`, () => pm.expect(expected).eql(actual));",
                  "",
                  "const prettify = json => JSON.stringify(json, null, 2);",
                  "",
                  "const getHeader = (pm, headerName) => {",
                  "    const header = pm.response.headers.find(header => header.key == headerName); ",
                  "    return header ? header.value : undefined;",
                  "}",
                  "",
                  "// SAVE FUCTIONALITY FOR REUSE",
                  "postman.setGlobalVariable('deepTest', deepTest);",
                  "//globals.deepTest = deepTest;  // this does not work",
                  "postman.setGlobalVariable('testFunction', testFunction);",
                  "postman.setGlobalVariable('prettify', prettify);",
                  "postman.setGlobalVariable('getHeader', getHeader);",
                  "",
                  "/* Usage within other sripts",
                  "// i.e.",
                  "const expectedUser = { name: \"mark\", age: 50, isAdmin: true };",
                  "const actualUser = { name: \"mark\", age: 51, isAdmin: false };",
                  "const deepTest = eval(globals.deepTest);",
                  "// or const deepTest = eval(postman.getGlobalVariable('deepTest'));",
                  "const testFunction = eval(globals.testFunction);",
                  "deepTest(expectedUser)(actualUser)('Validate user')(testFunction);",
                  "*/",
                  ""
                ],
                "_lastExecutionId": "2f2c7c91-4413-4a15-b742-1221cc25b7a5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log(`'${pm.info.requestName}' Request Tests`);"
                ],
                "_lastExecutionId": "476dbe69-1144-43c8-a39a-8c306203c9e4"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "https",
            "host": [
              "www",
              "google",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "039ce34f-bc9d-4e3a-adef-7830d64fda62",
              "system": true
            },
            {
              "key": "Host",
              "value": "www.google.com",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "content-length",
              "value": 103,
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "HEAD",
          "body": {
            "mode": "raw",
            "raw": "{ \n\t\"name\": \"mark\", \n\t\"age\": 51, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n\t\n}"
          }
        },
        "response": {
          "id": "cc18f359-288a-4c4a-8945-1f2674393f2d",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/html; charset=UTF-8"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "Content-Length",
              "value": "1555"
            },
            {
              "key": "Date",
              "value": "Mon, 09 Dec 2019 14:56:54 GMT"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 286,
          "responseSize": 0
        },
        "id": "ee31bcfe-bc81-4e3d-a744-e370bbba2273"
      },
      {
        "cursor": {
          "ref": "5933443d-d576-413c-903a-9a017ea9f5db",
          "length": 13,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "68905ece-1fe5-41e3-9711-3abdbf32efee"
        },
        "item": {
          "id": "bc5e45f7-ca29-4458-ab05-9ea15dbb949f",
          "name": "JSON body",
          "request": {
            "url": {
              "path": [
                "post"
              ],
              "host": [
                "{{POSTMAN_ECHO_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{ \n\t\"name\": \"Mark Johnson\", \n\t\"age\": 31, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "7e26eaac-e68a-404d-9696-b671bbdbc39e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                "type": "text/javascript",
                "exec": [
                  "const expectedUser = { ",
                  "    name: \"Mark Johnson\", ",
                  "    age: 50, ",
                  "    isAdmin: true, ",
                  "    resourceIds: [1111, 1112, 1113] ",
                  "    ",
                  "}; // wrong age and resourcesIds[1]",
                  "",
                  "const actualUser = pm.response.json().json;",
                  "",
                  "// Chai deep equal assertion",
                  "pm.test('Validate user (deep equal)', () => pm.expect(expectedUser).to.eql(actualUser));",
                  "",
                  "// Enhanced verification - one test / value",
                  "const deepTest = eval(globals.deepTest);",
                  "const testFunction = eval(globals.testFunction);",
                  "deepTest(expectedUser)(actualUser)('user')(testFunction);",
                  "",
                  "",
                  ""
                ],
                "_lastExecutionId": "5af6d109-a6d4-43bd-8451-909a5cc982a1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "post"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "dcfbc531-6fd3-4b17-a6b0-2979685ce98e",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "content-length",
              "value": 109,
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{ \n\t\"name\": \"Mark Johnson\", \n\t\"age\": 31, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n}"
          }
        },
        "response": {
          "id": "98fb984d-3356-495a-91a7-e0f2c5323212",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Encoding",
              "value": "gzip"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Mon, 09 Dec 2019 14:56:55 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"22e-og0jzzalM7cpprRPywqjqwDkRlk\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3A2az1cmNrb_3FMp2z2ZREL6Z-mM_Eyzh8.QLEg17O0omtoCJEeqAvEm7kr%2FDFvor9eMXmTX0mMp9Y; Path=/; HttpOnly"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "329"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              97,
              114,
              103,
              115,
              34,
              58,
              123,
              125,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              97,
              114,
              107,
              32,
              74,
              111,
              104,
              110,
              115,
              111,
              110,
              34,
              44,
              34,
              97,
              103,
              101,
              34,
              58,
              51,
              49,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              73,
              100,
              115,
              34,
              58,
              91,
              49,
              49,
              49,
              49,
              44,
              49,
              49,
              49,
              48,
              44,
              49,
              49,
              49,
              51,
              93,
              125,
              44,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              58,
              123,
              125,
              44,
              34,
              102,
              111,
              114,
              109,
              34,
              58,
              123,
              125,
              44,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              123,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              58,
              34,
              49,
              48,
              57,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              34,
              42,
              47,
              42,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              34,
              44,
              34,
              99,
              97,
              99,
              104,
              101,
              45,
              99,
              111,
              110,
              116,
              114,
              111,
              108,
              34,
              58,
              34,
              110,
              111,
              45,
              99,
              97,
              99,
              104,
              101,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              47,
              106,
              115,
              111,
              110,
              34,
              44,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              100,
              99,
              102,
              98,
              99,
              53,
              51,
              49,
              45,
              54,
              102,
              100,
              51,
              45,
              52,
              98,
              49,
              55,
              45,
              97,
              54,
              98,
              48,
              45,
              50,
              57,
              55,
              57,
              54,
              56,
              53,
              99,
              101,
              57,
              56,
              101,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              55,
              46,
              49,
              52,
              46,
              48,
              34,
              44,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              34,
              52,
              52,
              51,
              34,
              125,
              44,
              34,
              106,
              115,
              111,
              110,
              34,
              58,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              97,
              114,
              107,
              32,
              74,
              111,
              104,
              110,
              115,
              111,
              110,
              34,
              44,
              34,
              97,
              103,
              101,
              34,
              58,
              51,
              49,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              73,
              100,
              115,
              34,
              58,
              91,
              49,
              49,
              49,
              49,
              44,
              49,
              49,
              49,
              48,
              44,
              49,
              49,
              49,
              51,
              93,
              125,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              47,
              112,
              111,
              115,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 560,
          "responseSize": 558
        },
        "id": "bc5e45f7-ca29-4458-ab05-9ea15dbb949f",
        "assertions": [
          {
            "assertion": "Validate user (deep equal)",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Validate user (deep equal)",
              "message": "expected { Object (name, age, ...) } to deeply equal { Object (name, age, ...) }",
              "stack": "AssertionError: expected { Object (name, age, ...) } to deeply equal { Object (name, age, ...) }\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "Validate user.name",
            "skipped": false
          },
          {
            "assertion": "Validate user.age",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Validate user.age",
              "message": "expected 50 to deeply equal 31",
              "stack": "AssertionError: expected 50 to deeply equal 31\n   at Object.eval sandbox-script.js:3:2)"
            }
          },
          {
            "assertion": "Validate user.isAdmin",
            "skipped": false
          },
          {
            "assertion": "Validate user.resourceIds[0]",
            "skipped": false
          },
          {
            "assertion": "Validate user.resourceIds[1]",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 5,
              "test": "Validate user.resourceIds[1]",
              "message": "expected 1112 to deeply equal 1110",
              "stack": "AssertionError: expected 1112 to deeply equal 1110\n   at Object.eval sandbox-script.js:6:2)"
            }
          },
          {
            "assertion": "Validate user.resourceIds[2]",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "670eccc8-f902-4150-a0cd-65756950bc2f",
          "length": 13,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "db242950-e808-45c3-b91d-f8c8f32b422c"
        },
        "item": {
          "id": "dc1eeec2-9661-4876-a439-af04a30f6ace",
          "name": "query string parameters",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "post"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [
                {
                  "key": "company",
                  "value": "nagarro"
                },
                {
                  "key": "location",
                  "value": "timisoara"
                },
                {
                  "key": "department",
                  "value": "qa"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "25314eb7-ea9a-4378-9a81-336478486db3"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                "type": "text/javascript",
                "exec": [
                  "const expectedArgs = {",
                  "        \"company\": \"nagarro\",",
                  "        \"location\": \"timisoara\",",
                  "        \"department\": \"qa\"",
                  "    };",
                  "const actualArgs = pm.response.json().args;",
                  "",
                  "const deepTest = eval(globals.deepTest);",
                  "const testFunction = eval(globals.testFunction);",
                  "",
                  "deepTest(expectedArgs)(actualArgs)('args')(testFunction);"
                ],
                "_lastExecutionId": "94b06c98-0977-4094-9ba3-6157a13f36b8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "post"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [
              {
                "key": "company",
                "value": "nagarro"
              },
              {
                "key": "location",
                "value": "timisoara"
              },
              {
                "key": "department",
                "value": "qa"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/x-www-form-urlencoded"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4afbec2a-f2c5-4e91-bad0-3e80f6ddee23",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3A2az1cmNrb_3FMp2z2ZREL6Z-mM_Eyzh8.QLEg17O0omtoCJEeqAvEm7kr%2FDFvor9eMXmTX0mMp9Y",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "content-length",
              "value": "",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST"
        },
        "response": {
          "id": "97886b75-2795-4f0b-9998-6345fe5d1ad5",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Encoding",
              "value": "gzip"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Mon, 09 Dec 2019 14:56:55 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"27c-vVEZj+5VEu7yWyTtmCRR6m5bHVI\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AbT_moIgYTlHecrANpVGMSLoeS6rmLpwq.TqS8LXRL1m25Mi%2BN9PjqEeUVqwtZKJBPc3uwdwgdmQ8; Path=/; HttpOnly"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "431"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              97,
              114,
              103,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              110,
              97,
              103,
              97,
              114,
              114,
              111,
              34,
              44,
              34,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              116,
              105,
              109,
              105,
              115,
              111,
              97,
              114,
              97,
              34,
              44,
              34,
              100,
              101,
              112,
              97,
              114,
              116,
              109,
              101,
              110,
              116,
              34,
              58,
              34,
              113,
              97,
              34,
              125,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              34,
              34,
              44,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              58,
              123,
              125,
              44,
              34,
              102,
              111,
              114,
              109,
              34,
              58,
              123,
              125,
              44,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              123,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              34,
              42,
              47,
              42,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              34,
              44,
              34,
              99,
              97,
              99,
              104,
              101,
              45,
              99,
              111,
              110,
              116,
              114,
              111,
              108,
              34,
              58,
              34,
              110,
              111,
              45,
              99,
              97,
              99,
              104,
              101,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              47,
              120,
              45,
              119,
              119,
              119,
              45,
              102,
              111,
              114,
              109,
              45,
              117,
              114,
              108,
              101,
              110,
              99,
              111,
              100,
              101,
              100,
              34,
              44,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              34,
              58,
              34,
              115,
              97,
              105,
              108,
              115,
              46,
              115,
              105,
              100,
              61,
              115,
              37,
              51,
              65,
              50,
              97,
              122,
              49,
              99,
              109,
              78,
              114,
              98,
              95,
              51,
              70,
              77,
              112,
              50,
              122,
              50,
              90,
              82,
              69,
              76,
              54,
              90,
              45,
              109,
              77,
              95,
              69,
              121,
              122,
              104,
              56,
              46,
              81,
              76,
              69,
              103,
              49,
              55,
              79,
              48,
              111,
              109,
              116,
              111,
              67,
              74,
              69,
              101,
              113,
              65,
              118,
              69,
              109,
              55,
              107,
              114,
              37,
              50,
              70,
              68,
              70,
              118,
              111,
              114,
              57,
              101,
              77,
              88,
              109,
              84,
              88,
              48,
              109,
              77,
              112,
              57,
              89,
              34,
              44,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              52,
              97,
              102,
              98,
              101,
              99,
              50,
              97,
              45,
              102,
              50,
              99,
              53,
              45,
              52,
              101,
              57,
              49,
              45,
              98,
              97,
              100,
              48,
              45,
              51,
              101,
              56,
              48,
              102,
              54,
              100,
              100,
              101,
              101,
              50,
              51,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              55,
              46,
              49,
              52,
              46,
              48,
              34,
              44,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              34,
              52,
              52,
              51,
              34,
              125,
              44,
              34,
              106,
              115,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              47,
              112,
              111,
              115,
              116,
              63,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              61,
              110,
              97,
              103,
              97,
              114,
              114,
              111,
              38,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              61,
              116,
              105,
              109,
              105,
              115,
              111,
              97,
              114,
              97,
              38,
              100,
              101,
              112,
              97,
              114,
              116,
              109,
              101,
              110,
              116,
              61,
              113,
              97,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 168,
          "responseSize": 636
        },
        "id": "dc1eeec2-9661-4876-a439-af04a30f6ace",
        "assertions": [
          {
            "assertion": "Validate args.company",
            "skipped": false
          },
          {
            "assertion": "Validate args.location",
            "skipped": false
          },
          {
            "assertion": "Validate args.department",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "8770c9bf-80b3-4aa5-b740-7b987c4c0548",
          "length": 13,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "97b67ba8-a842-41aa-9325-547a4b4ffe8e"
        },
        "item": {
          "id": "d8508ddf-276f-482b-964f-7f3840c32b26",
          "name": "form data",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "post"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [
                {
                  "key": "user",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "email",
                  "value": "danginkgo@yahoo.com",
                  "type": "text"
                },
                {
                  "key": "username",
                  "value": "danrusu",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "c5f891f7-3b08-45e2-8324-d587bb6f0d5d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                "type": "text/javascript",
                "exec": [
                  "const expectedForm = {",
                  "    \"email\": \"danginkgo@yahoo.com\",",
                  "    \"username\": \"danrusu\"",
                  "};",
                  "const actualForm = pm.response.json().form;",
                  "",
                  "const deepTest = eval(globals.deepTest);",
                  "const testFunction = eval(globals.testFunction);",
                  "",
                  "deepTest(expectedForm)(actualForm)('form')(testFunction);"
                ],
                "_lastExecutionId": "117f933d-b954-4990-b8c3-be2c0f6fb070"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "post"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [
              {
                "key": "user",
                "value": "100"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/x-www-form-urlencoded"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7a9b2940-0d92-4a65-87ea-8aa38b94cae4",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3AbT_moIgYTlHecrANpVGMSLoeS6rmLpwq.TqS8LXRL1m25Mi%2BN9PjqEeUVqwtZKJBPc3uwdwgdmQ8",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "content-length",
              "value": 293,
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "email",
                "value": "danginkgo@yahoo.com",
                "type": "text"
              },
              {
                "key": "username",
                "value": "danrusu",
                "type": "text"
              }
            ]
          }
        },
        "response": {
          "id": "740e761d-e448-4a79-8e6e-8cc20c6e6137",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Encoding",
              "value": "gzip"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Mon, 09 Dec 2019 14:56:55 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"287-1nN+1QYeS0GqpXo0urmPZRetDNU\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "443"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              97,
              114,
              103,
              115,
              34,
              58,
              123,
              34,
              117,
              115,
              101,
              114,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              125,
              44,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              58,
              123,
              125,
              44,
              34,
              102,
              111,
              114,
              109,
              34,
              58,
              123,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              100,
              97,
              110,
              103,
              105,
              110,
              107,
              103,
              111,
              64,
              121,
              97,
              104,
              111,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              100,
              97,
              110,
              114,
              117,
              115,
              117,
              34,
              125,
              44,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              123,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              58,
              34,
              50,
              57,
              51,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              34,
              42,
              47,
              42,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              34,
              44,
              34,
              99,
              97,
              99,
              104,
              101,
              45,
              99,
              111,
              110,
              116,
              114,
              111,
              108,
              34,
              58,
              34,
              110,
              111,
              45,
              99,
              97,
              99,
              104,
              101,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              117,
              108,
              116,
              105,
              112,
              97,
              114,
              116,
              47,
              102,
              111,
              114,
              109,
              45,
              100,
              97,
              116,
              97,
              59,
              32,
              98,
              111,
              117,
              110,
              100,
              97,
              114,
              121,
              61,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              51,
              53,
              48,
              49,
              49,
              52,
              52,
              48,
              53,
              56,
              52,
              55,
              55,
              53,
              54,
              52,
              52,
              52,
              52,
              51,
              55,
              50,
              52,
              51,
              34,
              44,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              34,
              58,
              34,
              115,
              97,
              105,
              108,
              115,
              46,
              115,
              105,
              100,
              61,
              115,
              37,
              51,
              65,
              98,
              84,
              95,
              109,
              111,
              73,
              103,
              89,
              84,
              108,
              72,
              101,
              99,
              114,
              65,
              78,
              112,
              86,
              71,
              77,
              83,
              76,
              111,
              101,
              83,
              54,
              114,
              109,
              76,
              112,
              119,
              113,
              46,
              84,
              113,
              83,
              56,
              76,
              88,
              82,
              76,
              49,
              109,
              50,
              53,
              77,
              105,
              37,
              50,
              66,
              78,
              57,
              80,
              106,
              113,
              69,
              101,
              85,
              86,
              113,
              119,
              116,
              90,
              75,
              74,
              66,
              80,
              99,
              51,
              117,
              119,
              100,
              119,
              103,
              100,
              109,
              81,
              56,
              34,
              44,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              55,
              97,
              57,
              98,
              50,
              57,
              52,
              48,
              45,
              48,
              100,
              57,
              50,
              45,
              52,
              97,
              54,
              53,
              45,
              56,
              55,
              101,
              97,
              45,
              56,
              97,
              97,
              51,
              56,
              98,
              57,
              52,
              99,
              97,
              101,
              52,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              55,
              46,
              49,
              52,
              46,
              48,
              34,
              44,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              34,
              52,
              52,
              51,
              34,
              125,
              44,
              34,
              106,
              115,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              47,
              112,
              111,
              115,
              116,
              63,
              117,
              115,
              101,
              114,
              61,
              49,
              48,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 166,
          "responseSize": 647
        },
        "id": "d8508ddf-276f-482b-964f-7f3840c32b26",
        "assertions": [
          {
            "assertion": "Validate form.email",
            "skipped": false
          },
          {
            "assertion": "Validate form.username",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "7fe69230-f4de-4adc-b082-d80b7935c51a",
          "length": 13,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "cae41dee-d69c-49c4-9671-7c59098d7252"
        },
        "item": {
          "id": "f91a6a80-fca8-4c32-89b7-fa20506ae57e",
          "name": "delay 2s",
          "request": {
            "url": {
              "path": [
                "delay",
                "2"
              ],
              "host": [
                "{{POSTMAN_ECHO_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                "type": "text/javascript",
                "exec": [
                  "const getHeader = eval(globals.getHeader);",
                  "const prettify = eval(globals.prettify);",
                  "",
                  "pm.test('Status code is 200', ",
                  "    () =>pm.response.to.have.status(200)",
                  ");",
                  "",
                  "pm.test('Status code name is OK',",
                  "    () => pm.response.to.have.status(\"OK\")",
                  ");",
                  "",
                  "pm.test('Response time is above 2000ms', ",
                  "    () => pm.expect(pm.response.responseTime).to.be.above(2000)",
                  ");",
                  "",
                  "pm.test('Response body size is 13 B',",
                  "    () => {",
                  "        //const bodySize = pm.response.responseSize;",
                  "        console.log(`Headers ${prettify(pm.response.headers, null, 2)}`);",
                  "        const contentLength = parseInt(getHeader(pm, 'Content-Length'));",
                  "        pm.expect(contentLength).to.eql(13);",
                  "    }",
                  ");",
                  "",
                  "pm.test('Response delay is 2', ",
                  "    () =>  pm.expect(pm.response.json().delay).to.eql(\"2\")",
                  ");",
                  ""
                ],
                "_lastExecutionId": "d09e73b6-f03e-43ab-a702-0a59e1de4a4c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "delay",
              "2"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "dc434d3d-4664-4901-9b3b-6ea8128b9d8d",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3AbT_moIgYTlHecrANpVGMSLoeS6rmLpwq.TqS8LXRL1m25Mi%2BN9PjqEeUVqwtZKJBPc3uwdwgdmQ8",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "394d479f-7097-4483-847c-b44187be65d0",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Mon, 09 Dec 2019 14:56:57 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"d-vb8pS8uHJYunqF73qADGxcv0Je8\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "13"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              108,
              97,
              121,
              34,
              58,
              34,
              50,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2167,
          "responseSize": 13
        },
        "id": "f91a6a80-fca8-4c32-89b7-fa20506ae57e",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Status code name is OK",
            "skipped": false
          },
          {
            "assertion": "Response time is above 2000ms",
            "skipped": false
          },
          {
            "assertion": "Response body size is 13 B",
            "skipped": false
          },
          {
            "assertion": "Response delay is 2",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "676cee40-3198-43fe-95d8-b9ffdc1f2767",
          "length": 13,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e87b2149-0d3d-4975-ab32-e284989159cd"
        },
        "item": {
          "id": "89011438-7046-4139-9ddb-de341885cfde",
          "name": "health check",
          "request": {
            "url": {
              "path": [
                "ping"
              ],
              "host": [
                "{{RESTFULL_BOOKER_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "token=16d2f037531ae80"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "27133bf9-421e-4b0b-9bf1-74c59e4a5505",
                "type": "text/javascript",
                "exec": [
                  "pm.globals.clear();",
                  "",
                  "pm.test('Status code name is \"Created\"', ",
                  "    () => pm.response.to.have.status(\"Created\")",
                  ");",
                  "",
                  "pm.test('Response text is \"Created\"', ",
                  "    () => pm.expect(pm.response.text()).to.eql(\"Created\")",
                  ");",
                  ""
                ],
                "_lastExecutionId": "41939581-ff25-4368-b93f-3f36344216d3"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "50a64363-0e4a-443c-abab-1edcafa9600a",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "d0577760-806a-4a42-bc15-0996c8050593"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "ping"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Cookie",
              "value": "token=16d2f037531ae80"
            },
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d7726219-7300-4fea-9935-7957ee761171",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "37d9525a-46c1-4b3a-a62c-7d7fa7f22973",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Server",
              "value": "Cowboy"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "text/plain; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "7"
            },
            {
              "key": "Etag",
              "value": "W/\"7-rM9AyJuqT6iOan/xHh+AW+7K/T8\""
            },
            {
              "key": "Date",
              "value": "Mon, 09 Dec 2019 14:56:58 GMT"
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              67,
              114,
              101,
              97,
              116,
              101,
              100
            ]
          },
          "cookie": [],
          "responseTime": 569,
          "responseSize": 7
        },
        "id": "89011438-7046-4139-9ddb-de341885cfde",
        "assertions": [
          {
            "assertion": "Status code is 200 or 201",
            "skipped": false
          },
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false
          },
          {
            "assertion": "Status code name is \"Created\"",
            "skipped": false
          },
          {
            "assertion": "Response text is \"Created\"",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "96e88884-9151-4f8e-a225-4346b20b2c36",
          "length": 13,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b8fd0597-e483-4850-8c59-0e20d8c22e07"
        },
        "item": {
          "id": "27482ce1-2be6-4571-a2e7-b7ac04ae7134",
          "name": "create token",
          "request": {
            "url": {
              "path": [
                "auth"
              ],
              "host": [
                "{{RESTFULL_BOOKER_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "22426ed2-1321-48be-9010-2e89e3f7e9f4",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Token is retrieven as a string\", function () {",
                  "    ",
                  "    var jsonData = pm.response.json(); // parse JSON from body",
                  "    ",
                  "    console.log(jsonData);",
                  "    console.log(JSON.stringify(jsonData, null, 2));",
                  "    console.log(`jsonData.token: ${jsonData.token}`);",
                  "    ",
                  "    console.log(`jsonData.value ${jsonData.value}`); // should be undefined",
                  "    pm.expect(jsonData.token).to.be.a('string');",
                  "    ",
                  "    // auto generated snipet - Set an environment variable",
                  "    // pm.globals.set(\"variable_key\", \"variable_value\");",
                  "    pm.globals.set(\"token\", jsonData.token);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "7f359eb7-f6ac-487e-bd03-3a22d418671c"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "32067d93-e91f-48e8-b3fc-f741a9502537",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "5f0d8740-f733-4e98-bb3d-1b3998d69b63"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "auth"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "099cd909-d692-481f-9936-63aa56a66e5c",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "content-length",
              "value": 63,
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}"
          }
        },
        "response": {
          "id": "914d9f70-01c4-4028-9ae7-9b0718989ed7",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Cowboy"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "27"
            },
            {
              "key": "Etag",
              "value": "W/\"1b-zfB3w+XAc35ZFuw8LIWzlPiEHsI\""
            },
            {
              "key": "Date",
              "value": "Mon, 09 Dec 2019 14:56:58 GMT"
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              48,
              50,
              55,
              48,
              56,
              49,
              57,
              52,
              98,
              99,
              52,
              102,
              102,
              97,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 131,
          "responseSize": 27
        },
        "id": "27482ce1-2be6-4571-a2e7-b7ac04ae7134",
        "assertions": [
          {
            "assertion": "Status code is 200 or 201",
            "skipped": false
          },
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false
          },
          {
            "assertion": "Token is retrieven as a string",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5e12ba09-e4cf-46ea-bad9-473ba4bdf8da",
          "length": 13,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3707be4d-0aa8-4fad-8b0c-e37f76223ec3"
        },
        "item": {
          "id": "0220ea8a-7e40-4778-b947-22f446f809d4",
          "name": "bookings ids",
          "request": {
            "url": {
              "path": [
                "booking"
              ],
              "host": [
                "{{RESTFULL_BOOKER_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "4d64b293-208a-4f86-a466-9d18c4f0195f",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "1783bc3c-3284-409e-9fdc-9add50eeb9a6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a13a1fc3-bb5c-4cac-9357-a717dea1b3f9",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "3db797f8-0858-4610-bc98-8763714c7e92"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "booking"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f7a8ec5c-26f2-453d-8abf-d306da056bff",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "faedaa0a-c2bf-4e09-966f-055d2ae3a0b4",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Cowboy"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "179"
            },
            {
              "key": "Etag",
              "value": "W/\"b3-jTI8dLNNYgaWjgFOUVysgvxJYUY\""
            },
            {
              "key": "Date",
              "value": "Mon, 09 Dec 2019 14:56:59 GMT"
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              55,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              54,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              48,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              49,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              56,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              57,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 126,
          "responseSize": 179
        },
        "id": "0220ea8a-7e40-4778-b947-22f446f809d4",
        "assertions": [
          {
            "assertion": "Status code is 200 or 201",
            "skipped": false
          },
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "fd562614-59bf-457d-ba24-8bbf4f710161",
          "length": 13,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "499a3051-9442-4e89-84ae-376222a9c303"
        },
        "item": {
          "id": "a331c0c8-bb34-41a8-8b2a-2b0fff45b3fa",
          "name": "create booking",
          "request": {
            "url": {
              "path": [
                "booking"
              ],
              "host": [
                "{{RESTFULL_BOOKER_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f243060f-fb2a-4756-b1f8-11f833fd62db",
                "type": "text/javascript",
                "exec": [
                  "const newBookingId = pm.response.json().bookingid;",
                  "console.log(`New booking id: ${newBookingId}`);",
                  "",
                  "pm.globals.set('newBookingId', newBookingId);"
                ],
                "_lastExecutionId": "60cf9d84-c78f-4e2e-a870-8e72478a3eb9"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "bca49a6c-bf22-443e-b6b8-27c9684a46f9",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "07d61905-04da-4725-a8d9-5447b18d9d80"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "booking"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e25a3d65-d956-402e-8253-9920051ad653",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "content-length",
              "value": 248,
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
          }
        },
        "response": {
          "id": "74a3277a-aef8-46c6-b7b0-c3ad11a90148",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Cowboy"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "195"
            },
            {
              "key": "Etag",
              "value": "W/\"c3-/h+hXkhVYUVpjJBSFQdxRxTcyB8\""
            },
            {
              "key": "Date",
              "value": "Mon, 09 Dec 2019 14:56:59 GMT"
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              52,
              44,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              34,
              58,
              123,
              34,
              102,
              105,
              114,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              105,
              109,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              114,
              111,
              119,
              110,
              34,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              49,
              49,
              44,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              112,
              97,
              105,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              100,
              97,
              116,
              101,
              115,
              34,
              58,
              123,
              34,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              49,
              56,
              45,
              48,
              49,
              45,
              48,
              49,
              34,
              44,
              34,
              99,
              104,
              101,
              99,
              107,
              111,
              117,
              116,
              34,
              58,
              34,
              50,
              48,
              49,
              57,
              45,
              48,
              49,
              45,
              48,
              49,
              34,
              125,
              44,
              34,
              97,
              100,
              100,
              105,
              116,
              105,
              111,
              110,
              97,
              108,
              110,
              101,
              101,
              100,
              115,
              34,
              58,
              34,
              66,
              114,
              101,
              97,
              107,
              102,
              97,
              115,
              116,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 130,
          "responseSize": 195
        },
        "id": "a331c0c8-bb34-41a8-8b2a-2b0fff45b3fa",
        "assertions": [
          {
            "assertion": "Status code is 200 or 201",
            "skipped": false
          },
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "859d3f8c-4aa5-4d47-98cc-f0a760beae1c",
          "length": 13,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0e807de9-a4aa-47a2-87c2-cca2fbe2abe4"
        },
        "item": {
          "id": "aaf1332e-9add-4640-a791-dd2c2b8fe153",
          "name": "booking by id",
          "request": {
            "url": {
              "path": [
                "booking",
                "{{newBookingId}}"
              ],
              "host": [
                "{{RESTFULL_BOOKER_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e676f020-1592-41c5-9bb2-a209f776b2a8",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "20898250-691b-4a7a-964f-f83cf2ae19da"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "eef0023a-9454-4ef2-be7e-6df7edab294b",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "41936ffb-183f-4827-b6e1-3c0fa1948274"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "booking",
              "14"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2ab807ef-8ed7-4c27-9844-b611fc65176c",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "b8a88830-6b04-4a3b-b28c-31975d95bb6f",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Cowboy"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "168"
            },
            {
              "key": "Etag",
              "value": "W/\"a8-p5uB2C7mxZA3HXJZF+tJCDJr8VE\""
            },
            {
              "key": "Date",
              "value": "Mon, 09 Dec 2019 14:56:59 GMT"
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              102,
              105,
              114,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              105,
              109,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              114,
              111,
              119,
              110,
              34,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              49,
              49,
              44,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              112,
              97,
              105,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              100,
              97,
              116,
              101,
              115,
              34,
              58,
              123,
              34,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              49,
              56,
              45,
              48,
              49,
              45,
              48,
              49,
              34,
              44,
              34,
              99,
              104,
              101,
              99,
              107,
              111,
              117,
              116,
              34,
              58,
              34,
              50,
              48,
              49,
              57,
              45,
              48,
              49,
              45,
              48,
              49,
              34,
              125,
              44,
              34,
              97,
              100,
              100,
              105,
              116,
              105,
              111,
              110,
              97,
              108,
              110,
              101,
              101,
              100,
              115,
              34,
              58,
              34,
              66,
              114,
              101,
              97,
              107,
              102,
              97,
              115,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 124,
          "responseSize": 168
        },
        "id": "aaf1332e-9add-4640-a791-dd2c2b8fe153",
        "assertions": [
          {
            "assertion": "Status code is 200 or 201",
            "skipped": false
          },
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "48a4783f-8d56-4c20-98d8-470c48a8c2c6",
          "length": 13,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "31a4f4cc-170c-4af1-b883-6f3c0e8cd0f4"
        },
        "item": {
          "id": "180e7f3f-6398-4bbc-b641-f08dac0b87e1",
          "name": "update booking",
          "request": {
            "url": {
              "path": [
                "booking",
                "{{newBookingId}}"
              ],
              "host": [
                "{{RESTFULL_BOOKER_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "token={{token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2020-01-01\",\r\n        \"checkout\" : \"2020-01-10\"\r\n    },\r\n    \"additionalneeds\": \"none\"\r\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "74710eec-6fac-4f4e-9bf3-b18a2593595a",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "15605a8e-c25c-4fe9-816c-ce1782c29b44"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f4276e33-94a1-4d6c-a44f-b16be39655f7",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "26f36ab4-6269-4ce4-9166-199a12110004"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "booking",
              "14"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Cookie",
              "value": "token=02708194bc4ffae"
            },
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "78fd3de7-9187-41f1-90e7-1db4e15813de",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "content-length",
              "value": 243,
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2020-01-01\",\r\n        \"checkout\" : \"2020-01-10\"\r\n    },\r\n    \"additionalneeds\": \"none\"\r\n}"
          }
        },
        "response": {
          "id": "ba6ecccc-76c1-4ce2-8073-518547ff1882",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Cowboy"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "164"
            },
            {
              "key": "Etag",
              "value": "W/\"a4-yjpo4Io7He0qWi9HlIhkc365B84\""
            },
            {
              "key": "Date",
              "value": "Mon, 09 Dec 2019 14:56:59 GMT"
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              102,
              105,
              114,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              105,
              109,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              114,
              111,
              119,
              110,
              34,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              49,
              49,
              44,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              112,
              97,
              105,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              100,
              97,
              116,
              101,
              115,
              34,
              58,
              123,
              34,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              48,
              45,
              48,
              49,
              45,
              48,
              49,
              34,
              44,
              34,
              99,
              104,
              101,
              99,
              107,
              111,
              117,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              48,
              45,
              48,
              49,
              45,
              49,
              48,
              34,
              125,
              44,
              34,
              97,
              100,
              100,
              105,
              116,
              105,
              111,
              110,
              97,
              108,
              110,
              101,
              101,
              100,
              115,
              34,
              58,
              34,
              110,
              111,
              110,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 133,
          "responseSize": 164
        },
        "id": "180e7f3f-6398-4bbc-b641-f08dac0b87e1",
        "assertions": [
          {
            "assertion": "Status code is 200 or 201",
            "skipped": false
          },
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ca393d26-c7e3-47cb-809a-96b001b98147",
          "length": 13,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "cfa8edce-59cb-4760-ac16-cd0ac82f0c6a"
        },
        "item": {
          "id": "53a7e6c4-c811-4038-aa7b-edd34df7df32",
          "name": "partial update booking",
          "request": {
            "url": {
              "path": [
                "booking",
                "{{newBookingId}}"
              ],
              "host": [
                "{{RESTFULL_BOOKER_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "token={{token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\"\r\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e9de7d4f-41da-441f-ada1-8aab933530fd",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "c09373c5-7cc9-4675-9b3f-d22f226ac1fb"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "0820127e-398c-47f2-9eb7-89afa0762f3f",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "309e5466-4a8e-4eeb-809e-8b8f8d475aa1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "booking",
              "14"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Cookie",
              "value": "token=02708194bc4ffae"
            },
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4deda02c-0439-4df0-8c31-fde6d7bf645b",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "content-length",
              "value": 56,
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\"\r\n}"
          }
        },
        "response": {
          "id": "2b3d7127-bd8c-46ce-9c62-fefeab33d0ce",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Cowboy"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "164"
            },
            {
              "key": "Etag",
              "value": "W/\"a4-yjpo4Io7He0qWi9HlIhkc365B84\""
            },
            {
              "key": "Date",
              "value": "Mon, 09 Dec 2019 14:56:59 GMT"
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              102,
              105,
              114,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              105,
              109,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              114,
              111,
              119,
              110,
              34,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              49,
              49,
              44,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              112,
              97,
              105,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              100,
              97,
              116,
              101,
              115,
              34,
              58,
              123,
              34,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              48,
              45,
              48,
              49,
              45,
              48,
              49,
              34,
              44,
              34,
              99,
              104,
              101,
              99,
              107,
              111,
              117,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              48,
              45,
              48,
              49,
              45,
              49,
              48,
              34,
              125,
              44,
              34,
              97,
              100,
              100,
              105,
              116,
              105,
              111,
              110,
              97,
              108,
              110,
              101,
              101,
              100,
              115,
              34,
              58,
              34,
              110,
              111,
              110,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 136,
          "responseSize": 164
        },
        "id": "53a7e6c4-c811-4038-aa7b-edd34df7df32",
        "assertions": [
          {
            "assertion": "Status code is 200 or 201",
            "skipped": false
          },
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "9aae5588-d848-423d-82ef-85e491e80ea7",
          "length": 13,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "e766b63e-b155-4a1b-a251-edbfab054fab"
        },
        "item": {
          "id": "a4c39665-e2c4-4e8b-8c94-d7502972995a",
          "name": "delete booking",
          "request": {
            "url": {
              "path": [
                "booking",
                "{{newBookingId}}"
              ],
              "host": [
                "{{RESTFULL_BOOKER_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "token={{token}}"
              }
            ],
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2020-01-01\",\r\n        \"checkout\" : \"2020-01-10\"\r\n    }\r\n}"
            },
            "auth": {
              "type": "basic",
              "basic": [
                {
                  "type": "string",
                  "value": "admin@rms.com",
                  "key": "username"
                },
                {
                  "type": "string",
                  "value": "P@ssword1",
                  "key": "password"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ff17718e-e2fe-400a-9ed7-be1b58e0129d",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "68ff08cd-94b4-4c2e-93ba-35cf84ef277d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "edb1bea6-7b3a-4152-a8ad-c01e4a4b5d17",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "8606878d-1f9c-4605-a940-b248670fcf3a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "booking",
              "14"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Cookie",
              "value": "token=02708194bc4ffae"
            },
            {
              "key": "Authorization",
              "value": "Basic YWRtaW5Acm1zLmNvbTpQQHNzd29yZDE=",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.14.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a899e687-cb38-463b-9e75-ba79c007cf47",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "content-length",
              "value": 210,
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2020-01-01\",\r\n        \"checkout\" : \"2020-01-10\"\r\n    }\r\n}"
          },
          "auth": {
            "type": "basic",
            "basic": [
              {
                "type": "string",
                "value": "admin@rms.com",
                "key": "username"
              },
              {
                "type": "string",
                "value": "P@ssword1",
                "key": "password"
              }
            ]
          }
        },
        "response": {
          "id": "e199fa29-9828-45bd-9f47-5f9d293fd2fa",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Server",
              "value": "Cowboy"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "text/plain; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "7"
            },
            {
              "key": "Etag",
              "value": "W/\"7-rM9AyJuqT6iOan/xHh+AW+7K/T8\""
            },
            {
              "key": "Date",
              "value": "Mon, 09 Dec 2019 14:56:59 GMT"
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              67,
              114,
              101,
              97,
              116,
              101,
              100
            ]
          },
          "cookie": [],
          "responseTime": 130,
          "responseSize": 7
        },
        "id": "a4c39665-e2c4-4e8b-8c94-d7502972995a",
        "assertions": [
          {
            "assertion": "Status code is 200 or 201",
            "skipped": false
          },
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 2127
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Validate user (deep equal)",
          "message": "expected { Object (name, age, ...) } to deeply equal { Object (name, age, ...) }",
          "stack": "AssertionError: expected { Object (name, age, ...) } to deeply equal { Object (name, age, ...) }\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "97e6ce65b3e322c12e5a14dd657c1eeb",
          "id": "a752b32b-0fb8-4fa8-82c2-7d36dd8e5529",
          "timestamp": 1575903415411,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "bc5e45f7-ca29-4458-ab05-9ea15dbb949f",
          "name": "JSON body",
          "request": {
            "url": {
              "path": [
                "post"
              ],
              "host": [
                "{{POSTMAN_ECHO_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{ \n\t\"name\": \"Mark Johnson\", \n\t\"age\": 31, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "7e26eaac-e68a-404d-9696-b671bbdbc39e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                "type": "text/javascript",
                "exec": [
                  "const expectedUser = { ",
                  "    name: \"Mark Johnson\", ",
                  "    age: 50, ",
                  "    isAdmin: true, ",
                  "    resourceIds: [1111, 1112, 1113] ",
                  "    ",
                  "}; // wrong age and resourcesIds[1]",
                  "",
                  "const actualUser = pm.response.json().json;",
                  "",
                  "// Chai deep equal assertion",
                  "pm.test('Validate user (deep equal)', () => pm.expect(expectedUser).to.eql(actualUser));",
                  "",
                  "// Enhanced verification - one test / value",
                  "const deepTest = eval(globals.deepTest);",
                  "const testFunction = eval(globals.testFunction);",
                  "deepTest(expectedUser)(actualUser)('user')(testFunction);",
                  "",
                  "",
                  ""
                ],
                "_lastExecutionId": "5af6d109-a6d4-43bd-8451-909a5cc982a1"
              }
            }
          ]
        },
        "parent": {
          "id": "325ae3a8-c2be-439c-bbe7-ef18bb547fee",
          "name": "ECHO_SERVICE",
          "description": {
            "content": "https://docs.postman-echo.com/",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "ee31bcfe-bc81-4e3d-a744-e370bbba2273",
              "name": "setup & utils",
              "request": {
                "url": {
                  "protocol": "https",
                  "host": [
                    "www",
                    "google",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "HEAD",
                "body": {
                  "mode": "raw",
                  "raw": "{ \n\t\"name\": \"mark\", \n\t\"age\": 51, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n\t\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log(`'${pm.info.requestName}' Request Pre-request Script`);",
                      "",
                      "pm.globals.clear();",
                      "",
                      "const deepTest = expected => actual => (prefix = 'object') => testFunction => {        ",
                      "    ",
                      "    if (typeof expected !== 'object' || expected === null){",
                      "        testFunction(expected, actual, prefix);",
                      "        return;",
                      "    }",
                      "",
                      "    if (Array.isArray(expected)){                     ",
                      "        expected.forEach((element, index) => ",
                      "            deepTest(expected[index])(actual[index])(`${prefix}[${index}]`)(testFunction)",
                      "        );",
                      "        return;",
                      "    }",
                      "",
                      "    if (typeof expected === 'object'){          ",
                      "        Object.keys(expected).forEach(key => ",
                      "            deepTest(expected[key])(actual[key])(`${prefix}.${key}`)(testFunction)",
                      "        );            ",
                      "        return;",
                      "    }",
                      "};",
                      "",
                      "const testFunction = (expected, actual, prefix) =>",
                      "    pm.test(`Validate ${prefix}`, () => pm.expect(expected).eql(actual));",
                      "",
                      "const prettify = json => JSON.stringify(json, null, 2);",
                      "",
                      "const getHeader = (pm, headerName) => {",
                      "    const header = pm.response.headers.find(header => header.key == headerName); ",
                      "    return header ? header.value : undefined;",
                      "}",
                      "",
                      "// SAVE FUCTIONALITY FOR REUSE",
                      "postman.setGlobalVariable('deepTest', deepTest);",
                      "//globals.deepTest = deepTest;  // this does not work",
                      "postman.setGlobalVariable('testFunction', testFunction);",
                      "postman.setGlobalVariable('prettify', prettify);",
                      "postman.setGlobalVariable('getHeader', getHeader);",
                      "",
                      "/* Usage within other sripts",
                      "// i.e.",
                      "const expectedUser = { name: \"mark\", age: 50, isAdmin: true };",
                      "const actualUser = { name: \"mark\", age: 51, isAdmin: false };",
                      "const deepTest = eval(globals.deepTest);",
                      "// or const deepTest = eval(postman.getGlobalVariable('deepTest'));",
                      "const testFunction = eval(globals.testFunction);",
                      "deepTest(expectedUser)(actualUser)('Validate user')(testFunction);",
                      "*/",
                      ""
                    ],
                    "_lastExecutionId": "2f2c7c91-4413-4a15-b742-1221cc25b7a5"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log(`'${pm.info.requestName}' Request Tests`);"
                    ],
                    "_lastExecutionId": "476dbe69-1144-43c8-a39a-8c306203c9e4"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "bc5e45f7-ca29-4458-ab05-9ea15dbb949f",
              "name": "JSON body",
              "request": {
                "url": {
                  "path": [
                    "post"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \n\t\"name\": \"Mark Johnson\", \n\t\"age\": 31, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "7e26eaac-e68a-404d-9696-b671bbdbc39e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "const expectedUser = { ",
                      "    name: \"Mark Johnson\", ",
                      "    age: 50, ",
                      "    isAdmin: true, ",
                      "    resourceIds: [1111, 1112, 1113] ",
                      "    ",
                      "}; // wrong age and resourcesIds[1]",
                      "",
                      "const actualUser = pm.response.json().json;",
                      "",
                      "// Chai deep equal assertion",
                      "pm.test('Validate user (deep equal)', () => pm.expect(expectedUser).to.eql(actualUser));",
                      "",
                      "// Enhanced verification - one test / value",
                      "const deepTest = eval(globals.deepTest);",
                      "const testFunction = eval(globals.testFunction);",
                      "deepTest(expectedUser)(actualUser)('user')(testFunction);",
                      "",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "5af6d109-a6d4-43bd-8451-909a5cc982a1"
                  }
                }
              ]
            },
            {
              "id": "dc1eeec2-9661-4876-a439-af04a30f6ace",
              "name": "query string parameters",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "post"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "company",
                      "value": "nagarro"
                    },
                    {
                      "key": "location",
                      "value": "timisoara"
                    },
                    {
                      "key": "department",
                      "value": "qa"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "25314eb7-ea9a-4378-9a81-336478486db3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "const expectedArgs = {",
                      "        \"company\": \"nagarro\",",
                      "        \"location\": \"timisoara\",",
                      "        \"department\": \"qa\"",
                      "    };",
                      "const actualArgs = pm.response.json().args;",
                      "",
                      "const deepTest = eval(globals.deepTest);",
                      "const testFunction = eval(globals.testFunction);",
                      "",
                      "deepTest(expectedArgs)(actualArgs)('args')(testFunction);"
                    ],
                    "_lastExecutionId": "94b06c98-0977-4094-9ba3-6157a13f36b8"
                  }
                }
              ]
            },
            {
              "id": "d8508ddf-276f-482b-964f-7f3840c32b26",
              "name": "form data",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "post"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "user",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "email",
                      "value": "danginkgo@yahoo.com",
                      "type": "text"
                    },
                    {
                      "key": "username",
                      "value": "danrusu",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "c5f891f7-3b08-45e2-8324-d587bb6f0d5d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "const expectedForm = {",
                      "    \"email\": \"danginkgo@yahoo.com\",",
                      "    \"username\": \"danrusu\"",
                      "};",
                      "const actualForm = pm.response.json().form;",
                      "",
                      "const deepTest = eval(globals.deepTest);",
                      "const testFunction = eval(globals.testFunction);",
                      "",
                      "deepTest(expectedForm)(actualForm)('form')(testFunction);"
                    ],
                    "_lastExecutionId": "117f933d-b954-4990-b8c3-be2c0f6fb070"
                  }
                }
              ]
            },
            {
              "id": "f91a6a80-fca8-4c32-89b7-fa20506ae57e",
              "name": "delay 2s",
              "request": {
                "url": {
                  "path": [
                    "delay",
                    "2"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                    "type": "text/javascript",
                    "exec": [
                      "const getHeader = eval(globals.getHeader);",
                      "const prettify = eval(globals.prettify);",
                      "",
                      "pm.test('Status code is 200', ",
                      "    () =>pm.response.to.have.status(200)",
                      ");",
                      "",
                      "pm.test('Status code name is OK',",
                      "    () => pm.response.to.have.status(\"OK\")",
                      ");",
                      "",
                      "pm.test('Response time is above 2000ms', ",
                      "    () => pm.expect(pm.response.responseTime).to.be.above(2000)",
                      ");",
                      "",
                      "pm.test('Response body size is 13 B',",
                      "    () => {",
                      "        //const bodySize = pm.response.responseSize;",
                      "        console.log(`Headers ${prettify(pm.response.headers, null, 2)}`);",
                      "        const contentLength = parseInt(getHeader(pm, 'Content-Length'));",
                      "        pm.expect(contentLength).to.eql(13);",
                      "    }",
                      ");",
                      "",
                      "pm.test('Response delay is 2', ",
                      "    () =>  pm.expect(pm.response.json().delay).to.eql(\"2\")",
                      ");",
                      ""
                    ],
                    "_lastExecutionId": "d09e73b6-f03e-43ab-a702-0a59e1de4a4c"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "95db2334-dde7-4ab9-844d-addde171276c",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('ECHO_SERVICE FOLDER Pre-request Scripts');",
                  ""
                ],
                "_lastExecutionId": "274f4e88-e727-4c38-bab1-9637616217e2"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "bdadc87d-58fe-4342-bf95-793beec688c0",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('ECHO_SERVICE Folder Tests');"
                ],
                "_lastExecutionId": "f97e83b6-8d7c-43c9-a9bb-5778f1ead961"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "cursor": {
          "ref": "5933443d-d576-413c-903a-9a017ea9f5db",
          "length": 13,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "68905ece-1fe5-41e3-9711-3abdbf32efee",
          "scriptId": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
          "execution": "5af6d109-a6d4-43bd-8451-909a5cc982a1"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Validate user.age",
          "message": "expected 50 to deeply equal 31",
          "stack": "AssertionError: expected 50 to deeply equal 31\n   at Object.eval sandbox-script.js:3:2)",
          "checksum": "ae85caacc2e9973c586bfc2c1dfcac96",
          "id": "8424f7e8-4abc-44bc-a7c0-88e7bc7989e0",
          "timestamp": 1575903415415,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "bc5e45f7-ca29-4458-ab05-9ea15dbb949f",
          "name": "JSON body",
          "request": {
            "url": {
              "path": [
                "post"
              ],
              "host": [
                "{{POSTMAN_ECHO_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{ \n\t\"name\": \"Mark Johnson\", \n\t\"age\": 31, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "7e26eaac-e68a-404d-9696-b671bbdbc39e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                "type": "text/javascript",
                "exec": [
                  "const expectedUser = { ",
                  "    name: \"Mark Johnson\", ",
                  "    age: 50, ",
                  "    isAdmin: true, ",
                  "    resourceIds: [1111, 1112, 1113] ",
                  "    ",
                  "}; // wrong age and resourcesIds[1]",
                  "",
                  "const actualUser = pm.response.json().json;",
                  "",
                  "// Chai deep equal assertion",
                  "pm.test('Validate user (deep equal)', () => pm.expect(expectedUser).to.eql(actualUser));",
                  "",
                  "// Enhanced verification - one test / value",
                  "const deepTest = eval(globals.deepTest);",
                  "const testFunction = eval(globals.testFunction);",
                  "deepTest(expectedUser)(actualUser)('user')(testFunction);",
                  "",
                  "",
                  ""
                ],
                "_lastExecutionId": "5af6d109-a6d4-43bd-8451-909a5cc982a1"
              }
            }
          ]
        },
        "parent": {
          "id": "325ae3a8-c2be-439c-bbe7-ef18bb547fee",
          "name": "ECHO_SERVICE",
          "description": {
            "content": "https://docs.postman-echo.com/",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "ee31bcfe-bc81-4e3d-a744-e370bbba2273",
              "name": "setup & utils",
              "request": {
                "url": {
                  "protocol": "https",
                  "host": [
                    "www",
                    "google",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "HEAD",
                "body": {
                  "mode": "raw",
                  "raw": "{ \n\t\"name\": \"mark\", \n\t\"age\": 51, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n\t\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log(`'${pm.info.requestName}' Request Pre-request Script`);",
                      "",
                      "pm.globals.clear();",
                      "",
                      "const deepTest = expected => actual => (prefix = 'object') => testFunction => {        ",
                      "    ",
                      "    if (typeof expected !== 'object' || expected === null){",
                      "        testFunction(expected, actual, prefix);",
                      "        return;",
                      "    }",
                      "",
                      "    if (Array.isArray(expected)){                     ",
                      "        expected.forEach((element, index) => ",
                      "            deepTest(expected[index])(actual[index])(`${prefix}[${index}]`)(testFunction)",
                      "        );",
                      "        return;",
                      "    }",
                      "",
                      "    if (typeof expected === 'object'){          ",
                      "        Object.keys(expected).forEach(key => ",
                      "            deepTest(expected[key])(actual[key])(`${prefix}.${key}`)(testFunction)",
                      "        );            ",
                      "        return;",
                      "    }",
                      "};",
                      "",
                      "const testFunction = (expected, actual, prefix) =>",
                      "    pm.test(`Validate ${prefix}`, () => pm.expect(expected).eql(actual));",
                      "",
                      "const prettify = json => JSON.stringify(json, null, 2);",
                      "",
                      "const getHeader = (pm, headerName) => {",
                      "    const header = pm.response.headers.find(header => header.key == headerName); ",
                      "    return header ? header.value : undefined;",
                      "}",
                      "",
                      "// SAVE FUCTIONALITY FOR REUSE",
                      "postman.setGlobalVariable('deepTest', deepTest);",
                      "//globals.deepTest = deepTest;  // this does not work",
                      "postman.setGlobalVariable('testFunction', testFunction);",
                      "postman.setGlobalVariable('prettify', prettify);",
                      "postman.setGlobalVariable('getHeader', getHeader);",
                      "",
                      "/* Usage within other sripts",
                      "// i.e.",
                      "const expectedUser = { name: \"mark\", age: 50, isAdmin: true };",
                      "const actualUser = { name: \"mark\", age: 51, isAdmin: false };",
                      "const deepTest = eval(globals.deepTest);",
                      "// or const deepTest = eval(postman.getGlobalVariable('deepTest'));",
                      "const testFunction = eval(globals.testFunction);",
                      "deepTest(expectedUser)(actualUser)('Validate user')(testFunction);",
                      "*/",
                      ""
                    ],
                    "_lastExecutionId": "2f2c7c91-4413-4a15-b742-1221cc25b7a5"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log(`'${pm.info.requestName}' Request Tests`);"
                    ],
                    "_lastExecutionId": "476dbe69-1144-43c8-a39a-8c306203c9e4"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "bc5e45f7-ca29-4458-ab05-9ea15dbb949f",
              "name": "JSON body",
              "request": {
                "url": {
                  "path": [
                    "post"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \n\t\"name\": \"Mark Johnson\", \n\t\"age\": 31, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "7e26eaac-e68a-404d-9696-b671bbdbc39e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "const expectedUser = { ",
                      "    name: \"Mark Johnson\", ",
                      "    age: 50, ",
                      "    isAdmin: true, ",
                      "    resourceIds: [1111, 1112, 1113] ",
                      "    ",
                      "}; // wrong age and resourcesIds[1]",
                      "",
                      "const actualUser = pm.response.json().json;",
                      "",
                      "// Chai deep equal assertion",
                      "pm.test('Validate user (deep equal)', () => pm.expect(expectedUser).to.eql(actualUser));",
                      "",
                      "// Enhanced verification - one test / value",
                      "const deepTest = eval(globals.deepTest);",
                      "const testFunction = eval(globals.testFunction);",
                      "deepTest(expectedUser)(actualUser)('user')(testFunction);",
                      "",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "5af6d109-a6d4-43bd-8451-909a5cc982a1"
                  }
                }
              ]
            },
            {
              "id": "dc1eeec2-9661-4876-a439-af04a30f6ace",
              "name": "query string parameters",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "post"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "company",
                      "value": "nagarro"
                    },
                    {
                      "key": "location",
                      "value": "timisoara"
                    },
                    {
                      "key": "department",
                      "value": "qa"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "25314eb7-ea9a-4378-9a81-336478486db3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "const expectedArgs = {",
                      "        \"company\": \"nagarro\",",
                      "        \"location\": \"timisoara\",",
                      "        \"department\": \"qa\"",
                      "    };",
                      "const actualArgs = pm.response.json().args;",
                      "",
                      "const deepTest = eval(globals.deepTest);",
                      "const testFunction = eval(globals.testFunction);",
                      "",
                      "deepTest(expectedArgs)(actualArgs)('args')(testFunction);"
                    ],
                    "_lastExecutionId": "94b06c98-0977-4094-9ba3-6157a13f36b8"
                  }
                }
              ]
            },
            {
              "id": "d8508ddf-276f-482b-964f-7f3840c32b26",
              "name": "form data",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "post"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "user",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "email",
                      "value": "danginkgo@yahoo.com",
                      "type": "text"
                    },
                    {
                      "key": "username",
                      "value": "danrusu",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "c5f891f7-3b08-45e2-8324-d587bb6f0d5d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "const expectedForm = {",
                      "    \"email\": \"danginkgo@yahoo.com\",",
                      "    \"username\": \"danrusu\"",
                      "};",
                      "const actualForm = pm.response.json().form;",
                      "",
                      "const deepTest = eval(globals.deepTest);",
                      "const testFunction = eval(globals.testFunction);",
                      "",
                      "deepTest(expectedForm)(actualForm)('form')(testFunction);"
                    ],
                    "_lastExecutionId": "117f933d-b954-4990-b8c3-be2c0f6fb070"
                  }
                }
              ]
            },
            {
              "id": "f91a6a80-fca8-4c32-89b7-fa20506ae57e",
              "name": "delay 2s",
              "request": {
                "url": {
                  "path": [
                    "delay",
                    "2"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                    "type": "text/javascript",
                    "exec": [
                      "const getHeader = eval(globals.getHeader);",
                      "const prettify = eval(globals.prettify);",
                      "",
                      "pm.test('Status code is 200', ",
                      "    () =>pm.response.to.have.status(200)",
                      ");",
                      "",
                      "pm.test('Status code name is OK',",
                      "    () => pm.response.to.have.status(\"OK\")",
                      ");",
                      "",
                      "pm.test('Response time is above 2000ms', ",
                      "    () => pm.expect(pm.response.responseTime).to.be.above(2000)",
                      ");",
                      "",
                      "pm.test('Response body size is 13 B',",
                      "    () => {",
                      "        //const bodySize = pm.response.responseSize;",
                      "        console.log(`Headers ${prettify(pm.response.headers, null, 2)}`);",
                      "        const contentLength = parseInt(getHeader(pm, 'Content-Length'));",
                      "        pm.expect(contentLength).to.eql(13);",
                      "    }",
                      ");",
                      "",
                      "pm.test('Response delay is 2', ",
                      "    () =>  pm.expect(pm.response.json().delay).to.eql(\"2\")",
                      ");",
                      ""
                    ],
                    "_lastExecutionId": "d09e73b6-f03e-43ab-a702-0a59e1de4a4c"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "95db2334-dde7-4ab9-844d-addde171276c",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('ECHO_SERVICE FOLDER Pre-request Scripts');",
                  ""
                ],
                "_lastExecutionId": "274f4e88-e727-4c38-bab1-9637616217e2"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "bdadc87d-58fe-4342-bf95-793beec688c0",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('ECHO_SERVICE Folder Tests');"
                ],
                "_lastExecutionId": "f97e83b6-8d7c-43c9-a9bb-5778f1ead961"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "cursor": {
          "ref": "5933443d-d576-413c-903a-9a017ea9f5db",
          "length": 13,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "68905ece-1fe5-41e3-9711-3abdbf32efee",
          "scriptId": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
          "execution": "5af6d109-a6d4-43bd-8451-909a5cc982a1"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 5,
          "test": "Validate user.resourceIds[1]",
          "message": "expected 1112 to deeply equal 1110",
          "stack": "AssertionError: expected 1112 to deeply equal 1110\n   at Object.eval sandbox-script.js:6:2)",
          "checksum": "1e3bf6265c73678f3bed7170be1b974a",
          "id": "46f42fc4-ba43-4e6d-9e43-b96946ff9e73",
          "timestamp": 1575903415416,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 6,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:5 in test-script",
        "source": {
          "id": "bc5e45f7-ca29-4458-ab05-9ea15dbb949f",
          "name": "JSON body",
          "request": {
            "url": {
              "path": [
                "post"
              ],
              "host": [
                "{{POSTMAN_ECHO_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{ \n\t\"name\": \"Mark Johnson\", \n\t\"age\": 31, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "7e26eaac-e68a-404d-9696-b671bbdbc39e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                "type": "text/javascript",
                "exec": [
                  "const expectedUser = { ",
                  "    name: \"Mark Johnson\", ",
                  "    age: 50, ",
                  "    isAdmin: true, ",
                  "    resourceIds: [1111, 1112, 1113] ",
                  "    ",
                  "}; // wrong age and resourcesIds[1]",
                  "",
                  "const actualUser = pm.response.json().json;",
                  "",
                  "// Chai deep equal assertion",
                  "pm.test('Validate user (deep equal)', () => pm.expect(expectedUser).to.eql(actualUser));",
                  "",
                  "// Enhanced verification - one test / value",
                  "const deepTest = eval(globals.deepTest);",
                  "const testFunction = eval(globals.testFunction);",
                  "deepTest(expectedUser)(actualUser)('user')(testFunction);",
                  "",
                  "",
                  ""
                ],
                "_lastExecutionId": "5af6d109-a6d4-43bd-8451-909a5cc982a1"
              }
            }
          ]
        },
        "parent": {
          "id": "325ae3a8-c2be-439c-bbe7-ef18bb547fee",
          "name": "ECHO_SERVICE",
          "description": {
            "content": "https://docs.postman-echo.com/",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "ee31bcfe-bc81-4e3d-a744-e370bbba2273",
              "name": "setup & utils",
              "request": {
                "url": {
                  "protocol": "https",
                  "host": [
                    "www",
                    "google",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "HEAD",
                "body": {
                  "mode": "raw",
                  "raw": "{ \n\t\"name\": \"mark\", \n\t\"age\": 51, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n\t\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log(`'${pm.info.requestName}' Request Pre-request Script`);",
                      "",
                      "pm.globals.clear();",
                      "",
                      "const deepTest = expected => actual => (prefix = 'object') => testFunction => {        ",
                      "    ",
                      "    if (typeof expected !== 'object' || expected === null){",
                      "        testFunction(expected, actual, prefix);",
                      "        return;",
                      "    }",
                      "",
                      "    if (Array.isArray(expected)){                     ",
                      "        expected.forEach((element, index) => ",
                      "            deepTest(expected[index])(actual[index])(`${prefix}[${index}]`)(testFunction)",
                      "        );",
                      "        return;",
                      "    }",
                      "",
                      "    if (typeof expected === 'object'){          ",
                      "        Object.keys(expected).forEach(key => ",
                      "            deepTest(expected[key])(actual[key])(`${prefix}.${key}`)(testFunction)",
                      "        );            ",
                      "        return;",
                      "    }",
                      "};",
                      "",
                      "const testFunction = (expected, actual, prefix) =>",
                      "    pm.test(`Validate ${prefix}`, () => pm.expect(expected).eql(actual));",
                      "",
                      "const prettify = json => JSON.stringify(json, null, 2);",
                      "",
                      "const getHeader = (pm, headerName) => {",
                      "    const header = pm.response.headers.find(header => header.key == headerName); ",
                      "    return header ? header.value : undefined;",
                      "}",
                      "",
                      "// SAVE FUCTIONALITY FOR REUSE",
                      "postman.setGlobalVariable('deepTest', deepTest);",
                      "//globals.deepTest = deepTest;  // this does not work",
                      "postman.setGlobalVariable('testFunction', testFunction);",
                      "postman.setGlobalVariable('prettify', prettify);",
                      "postman.setGlobalVariable('getHeader', getHeader);",
                      "",
                      "/* Usage within other sripts",
                      "// i.e.",
                      "const expectedUser = { name: \"mark\", age: 50, isAdmin: true };",
                      "const actualUser = { name: \"mark\", age: 51, isAdmin: false };",
                      "const deepTest = eval(globals.deepTest);",
                      "// or const deepTest = eval(postman.getGlobalVariable('deepTest'));",
                      "const testFunction = eval(globals.testFunction);",
                      "deepTest(expectedUser)(actualUser)('Validate user')(testFunction);",
                      "*/",
                      ""
                    ],
                    "_lastExecutionId": "2f2c7c91-4413-4a15-b742-1221cc25b7a5"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log(`'${pm.info.requestName}' Request Tests`);"
                    ],
                    "_lastExecutionId": "476dbe69-1144-43c8-a39a-8c306203c9e4"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "bc5e45f7-ca29-4458-ab05-9ea15dbb949f",
              "name": "JSON body",
              "request": {
                "url": {
                  "path": [
                    "post"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \n\t\"name\": \"Mark Johnson\", \n\t\"age\": 31, \n\t\"isAdmin\": true, \n\t\"resourceIds\": [\n\t\t1111, \n\t\t1110, \n\t\t1113\n\t] \n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "7e26eaac-e68a-404d-9696-b671bbdbc39e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "const expectedUser = { ",
                      "    name: \"Mark Johnson\", ",
                      "    age: 50, ",
                      "    isAdmin: true, ",
                      "    resourceIds: [1111, 1112, 1113] ",
                      "    ",
                      "}; // wrong age and resourcesIds[1]",
                      "",
                      "const actualUser = pm.response.json().json;",
                      "",
                      "// Chai deep equal assertion",
                      "pm.test('Validate user (deep equal)', () => pm.expect(expectedUser).to.eql(actualUser));",
                      "",
                      "// Enhanced verification - one test / value",
                      "const deepTest = eval(globals.deepTest);",
                      "const testFunction = eval(globals.testFunction);",
                      "deepTest(expectedUser)(actualUser)('user')(testFunction);",
                      "",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "5af6d109-a6d4-43bd-8451-909a5cc982a1"
                  }
                }
              ]
            },
            {
              "id": "dc1eeec2-9661-4876-a439-af04a30f6ace",
              "name": "query string parameters",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "post"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "company",
                      "value": "nagarro"
                    },
                    {
                      "key": "location",
                      "value": "timisoara"
                    },
                    {
                      "key": "department",
                      "value": "qa"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "25314eb7-ea9a-4378-9a81-336478486db3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "const expectedArgs = {",
                      "        \"company\": \"nagarro\",",
                      "        \"location\": \"timisoara\",",
                      "        \"department\": \"qa\"",
                      "    };",
                      "const actualArgs = pm.response.json().args;",
                      "",
                      "const deepTest = eval(globals.deepTest);",
                      "const testFunction = eval(globals.testFunction);",
                      "",
                      "deepTest(expectedArgs)(actualArgs)('args')(testFunction);"
                    ],
                    "_lastExecutionId": "94b06c98-0977-4094-9ba3-6157a13f36b8"
                  }
                }
              ]
            },
            {
              "id": "d8508ddf-276f-482b-964f-7f3840c32b26",
              "name": "form data",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "post"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "user",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "email",
                      "value": "danginkgo@yahoo.com",
                      "type": "text"
                    },
                    {
                      "key": "username",
                      "value": "danrusu",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c5962fd8-0b2b-4c47-be8f-38ce8f49ec94",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "c5f891f7-3b08-45e2-8324-d587bb6f0d5d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
                    "type": "text/javascript",
                    "exec": [
                      "const expectedForm = {",
                      "    \"email\": \"danginkgo@yahoo.com\",",
                      "    \"username\": \"danrusu\"",
                      "};",
                      "const actualForm = pm.response.json().form;",
                      "",
                      "const deepTest = eval(globals.deepTest);",
                      "const testFunction = eval(globals.testFunction);",
                      "",
                      "deepTest(expectedForm)(actualForm)('form')(testFunction);"
                    ],
                    "_lastExecutionId": "117f933d-b954-4990-b8c3-be2c0f6fb070"
                  }
                }
              ]
            },
            {
              "id": "f91a6a80-fca8-4c32-89b7-fa20506ae57e",
              "name": "delay 2s",
              "request": {
                "url": {
                  "path": [
                    "delay",
                    "2"
                  ],
                  "host": [
                    "{{POSTMAN_ECHO_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0165a1fb-8984-43ca-8fb2-f61851a37a7f",
                    "type": "text/javascript",
                    "exec": [
                      "const getHeader = eval(globals.getHeader);",
                      "const prettify = eval(globals.prettify);",
                      "",
                      "pm.test('Status code is 200', ",
                      "    () =>pm.response.to.have.status(200)",
                      ");",
                      "",
                      "pm.test('Status code name is OK',",
                      "    () => pm.response.to.have.status(\"OK\")",
                      ");",
                      "",
                      "pm.test('Response time is above 2000ms', ",
                      "    () => pm.expect(pm.response.responseTime).to.be.above(2000)",
                      ");",
                      "",
                      "pm.test('Response body size is 13 B',",
                      "    () => {",
                      "        //const bodySize = pm.response.responseSize;",
                      "        console.log(`Headers ${prettify(pm.response.headers, null, 2)}`);",
                      "        const contentLength = parseInt(getHeader(pm, 'Content-Length'));",
                      "        pm.expect(contentLength).to.eql(13);",
                      "    }",
                      ");",
                      "",
                      "pm.test('Response delay is 2', ",
                      "    () =>  pm.expect(pm.response.json().delay).to.eql(\"2\")",
                      ");",
                      ""
                    ],
                    "_lastExecutionId": "d09e73b6-f03e-43ab-a702-0a59e1de4a4c"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "95db2334-dde7-4ab9-844d-addde171276c",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('ECHO_SERVICE FOLDER Pre-request Scripts');",
                  ""
                ],
                "_lastExecutionId": "274f4e88-e727-4c38-bab1-9637616217e2"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "bdadc87d-58fe-4342-bf95-793beec688c0",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.get('ENABLE_HELP_MESSAGES') && console.log('ECHO_SERVICE Folder Tests');"
                ],
                "_lastExecutionId": "f97e83b6-8d7c-43c9-a9bb-5778f1ead961"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "cursor": {
          "ref": "5933443d-d576-413c-903a-9a017ea9f5db",
          "length": 13,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "68905ece-1fe5-41e3-9711-3abdbf32efee",
          "scriptId": "a2307916-e931-40f8-9696-d6ae2afd5ffa",
          "execution": "5af6d109-a6d4-43bd-8451-909a5cc982a1"
        }
      }
    ],
    "error": null
  }
}